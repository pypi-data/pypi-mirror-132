from typing import Any, Iterable, Optional

DEFAULT_RANDOM_SEED: int
PAIRWISE_GENERATION: int

def addExclusion(task: int, items: Iterable[tuple[int,int]]) -> None: ...
def addParameter(model: int, valueCount: int, order: int = ..., valueWeights: Optional[Iterable[int]] = ...) -> int: ...
def addSeed(task: int, items: Iterable[tuple[int,int]]) -> None: ...
def allocateResultBuffer(task: int) -> memoryview: ...
def attachChildModel(modelParent: int, modelChild: int, order: int = ...) -> None: ...
def createModel(randomSeed: int = ...) -> int: ...
def createTask() -> int: ...
def deleteModel(model: int) -> None: ...
def deleteTask(task: int) -> None: ...
def execute(args: list[str]) -> str: ...
def freeResultBuffer(resultRow: memoryview) -> None: ...
def generate(task: int) -> None: ...
def getNextResultRow(task: int, resultRow: memoryview) -> int: ...
def getTotalParameterCount(task: int) -> int: ...
def resetResultFetching(task: int) -> None: ...
def setRootModel(task: int, model: int) -> None: ...
