# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class OrmModelEdges(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'artifact_volume': 'OrmVolume',
        'created_by': 'OrmUser',
        'experiment': 'OrmExperiment',
        'project': 'OrmProject',
        'tags': 'list[OrmTag]'
    }

    attribute_map = {
        'artifact_volume': 'artifact_volume',
        'created_by': 'created_by',
        'experiment': 'experiment',
        'project': 'project',
        'tags': 'tags'
    }

    def __init__(self, artifact_volume=None, created_by=None, experiment=None, project=None, tags=None, local_vars_configuration=None):  # noqa: E501
        """OrmModelEdges - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._artifact_volume = None
        self._created_by = None
        self._experiment = None
        self._project = None
        self._tags = None
        self.discriminator = None

        if artifact_volume is not None:
            self.artifact_volume = artifact_volume
        if created_by is not None:
            self.created_by = created_by
        if experiment is not None:
            self.experiment = experiment
        if project is not None:
            self.project = project
        if tags is not None:
            self.tags = tags

    @property
    def artifact_volume(self):
        """Gets the artifact_volume of this OrmModelEdges.  # noqa: E501


        :return: The artifact_volume of this OrmModelEdges.  # noqa: E501
        :rtype: OrmVolume
        """
        return self._artifact_volume

    @artifact_volume.setter
    def artifact_volume(self, artifact_volume):
        """Sets the artifact_volume of this OrmModelEdges.


        :param artifact_volume: The artifact_volume of this OrmModelEdges.  # noqa: E501
        :type artifact_volume: OrmVolume
        """

        self._artifact_volume = artifact_volume

    @property
    def created_by(self):
        """Gets the created_by of this OrmModelEdges.  # noqa: E501


        :return: The created_by of this OrmModelEdges.  # noqa: E501
        :rtype: OrmUser
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this OrmModelEdges.


        :param created_by: The created_by of this OrmModelEdges.  # noqa: E501
        :type created_by: OrmUser
        """

        self._created_by = created_by

    @property
    def experiment(self):
        """Gets the experiment of this OrmModelEdges.  # noqa: E501


        :return: The experiment of this OrmModelEdges.  # noqa: E501
        :rtype: OrmExperiment
        """
        return self._experiment

    @experiment.setter
    def experiment(self, experiment):
        """Sets the experiment of this OrmModelEdges.


        :param experiment: The experiment of this OrmModelEdges.  # noqa: E501
        :type experiment: OrmExperiment
        """

        self._experiment = experiment

    @property
    def project(self):
        """Gets the project of this OrmModelEdges.  # noqa: E501


        :return: The project of this OrmModelEdges.  # noqa: E501
        :rtype: OrmProject
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this OrmModelEdges.


        :param project: The project of this OrmModelEdges.  # noqa: E501
        :type project: OrmProject
        """

        self._project = project

    @property
    def tags(self):
        """Gets the tags of this OrmModelEdges.  # noqa: E501


        :return: The tags of this OrmModelEdges.  # noqa: E501
        :rtype: list[OrmTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this OrmModelEdges.


        :param tags: The tags of this OrmModelEdges.  # noqa: E501
        :type tags: list[OrmTag]
        """

        self._tags = tags

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrmModelEdges):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrmModelEdges):
            return True

        return self.to_dict() != other.to_dict()
