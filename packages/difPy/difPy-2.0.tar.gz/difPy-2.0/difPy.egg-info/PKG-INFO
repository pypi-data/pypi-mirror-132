Metadata-Version: 2.1
Name: difPy
Version: 2.0
Summary: DifPy Python Duplicate Image Finder - searches for duplicate image files within folders.
Home-page: https://github.com/elisemercury/Duplicate-Image-Finder
Author: Elise Landman
Author-email: elisejlandman@hotmail.com
License: MIT
Download-URL: https://github.com/elisemercury/Duplicate-Image-Finder/archive/refs/tags/v2.0.tar.gz
Description: # Duplicate Image Finder (difPy)
        
        **Tired of going through all images in a folder and comparing them manually to check if they are duplicates?**
        
        -> The Duplicate Image Finder (difPy) for Python **automates** this task for you!
        
        -------
        
        Description
        -------------
        
        DifPy searches for images in **one or two different folders**, compares the images it found and checks whether these are duplicates. It then outputs the **image files classified as duplicates** and the **filenames of the duplicate images having the lower resolution**, so you know which of the duplicate images are safe to be deleted. You can then either delete them manually, or let difPy delete them for you.
        
        You can read more on how the algorithm of difPy works in my Medium article [Finding Duplicate Images with Python](https://towardsdatascience.com/finding-duplicate-images-with-python-71c04ec8051). 
        
        Basic Usage
        ------------
        Use the following function to make difPy search for duplicates in one specified folder:
        
        ``from difPy import dif``
        
        ``search = dif("C:/Path/to/Folder/")``
        
        To search for duplicates within two folders:
        
        ``from difPy import dif``
        
        ``search = dif("C:/Path/to/Folder_A/", "C:/Path/to/Folder_B/")``
        
        The folder paths must be specified as a Python string.
        
        Output
        ------
        DifPy gives two types of output that you may use depending on your use case: 
        
        A **dictionary** of duplicates/similar images that were found: 
        
        ``search.result``
        
        Output:
        
        ``{"image1" : {"location" : "C:/Path/to/Image/image1.jpg"}, "duplicates" : ["C:/Path/to/Image/duplicate_image1.jpg", 
        "C:/Path/to/Image/duplicate_image2.jpg"]}, ... }``
        
        A **list** of duplicates/similar images that have the **lowest quality:** 
        
        ``search.lower_quality``
        
        Output:
        
        ``["C:/Path/to/Image/duplicate_image1.jpg", 
        "C:/Path/to/Image/duplicate_image2.jpg", ...]`` 
        
        Additional Parameters
        -----------------------
        
        DifPy has the following optional parameters:
        
        ``dif(directory_A, directory_B, similarity="normal", px_size=50, sort_output=False, show_output=False, delete=False)``
        
        **similarity (str)**
        
        Depending on which use-case you want to apply difPy for, the granularity for the classification of the images can be adjusted.
        
        DifPy can f. e. search for exact matching duplicate images, or images that look similar, but are not necessarily duplicates.
        
        ``"normal"`` = (recommended, default) searches for duplicates (with a certain tolerance)
        
        ``"high"`` = searches for duplicate images with extreme precision, f. e. for use with images that contain a lot of text     
        
        ``"low"`` = searches for similar images
        
        **px_size (int)**
        
        ! Recommended not to change default value
        
        Absolute size in pixels (width x height) of the images before being compared.
        The higher the px_size, the more computational ressources and time required.  
        
        **sort_output (bool)**
        
        Per default, difPy will output the filenames of the duplicate images within a dictionary by the order in which they were found. If you want the duplicate images to be ordered alphabetically then set sort_output to `True`.
        
        ```False```= (default) output filenames of the duplicate/similar images by order they were found 
        
        ```True``` = outputs filesnames of duplicate/similar images in alphabetic order
        
        **show_output (bool)**
        
        Per default, the difPy will output only the filename of the duplicate images it found. If you want the duplicate images to be shown in the console output, change this value to ``True``.
        
        ```False```= (default) outputs filename of the duplicate/similar images found
        
        ```True``` = outputs a sample and the filename
                                
        **delete (bool)**
        
        ! Please use with care, as this cannot be undone !
        
        When set to ``True``, the lower resolution duplicate images that were found by difPy are automatically deleted from the folder.
Keywords: duplicate,image,finder,similarity,pictures
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Topic :: Software Development :: Build Tools
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.4
Classifier: Programming Language :: Python :: 3.5
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Description-Content-Type: text/markdown
