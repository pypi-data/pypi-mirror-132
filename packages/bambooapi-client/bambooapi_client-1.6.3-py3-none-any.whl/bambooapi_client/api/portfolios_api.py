"""
    Bamboo Flexibility API

     This API provides access to flexibility assets managed by Bamboo Energy: - Create and list flexibility sites & assets - Obtain activations for specific assets - Post and get measurements for specific assets   # noqa: E501

    The version of the OpenAPI document: 1.6.2
    Contact: development@bambooenergy.tech
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from bambooapi_client.api_client import ApiClient, Endpoint as _Endpoint
from bambooapi_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from bambooapi_client.model.http400_bad_request import HTTP400BadRequest
from bambooapi_client.model.http401_unauthorized import HTTP401Unauthorized
from bambooapi_client.model.http403_forbidden import HTTP403Forbidden
from bambooapi_client.model.http404_not_found import HTTP404NotFound
from bambooapi_client.model.http_validation_error import HTTPValidationError
from bambooapi_client.model.portfolio import Portfolio
from bambooapi_client.model.portfolio_create import PortfolioCreate
from bambooapi_client.model.portfolio_list_item import PortfolioListItem
from bambooapi_client.model.portfolio_market import PortfolioMarket
from bambooapi_client.model.portfolio_site import PortfolioSite
from bambooapi_client.model.portfolio_update import PortfolioUpdate


class PortfoliosApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.add_portfolio_site_endpoint = _Endpoint(
            settings={
                'response_type': (PortfolioSite,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/portfolios/{portfolio_id}/sites/{site_id}',
                'operation_id': 'add_portfolio_site',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'portfolio_id',
                    'site_id',
                ],
                'required': [
                    'portfolio_id',
                    'site_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'portfolio_id',
                    'site_id',
                ]
            },
            root_map={
                'validations': {
                    ('portfolio_id',): {

                        'inclusive_maximum': 9999,
                        'inclusive_minimum': 1001,
                    },
                    ('site_id',): {

                        'inclusive_maximum': 99999,
                        'inclusive_minimum': 10000,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'portfolio_id':
                        (int,),
                    'site_id':
                        (int,),
                },
                'attribute_map': {
                    'portfolio_id': 'portfolio_id',
                    'site_id': 'site_id',
                },
                'location_map': {
                    'portfolio_id': 'path',
                    'site_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.create_portfolio_endpoint = _Endpoint(
            settings={
                'response_type': (Portfolio,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/portfolios',
                'operation_id': 'create_portfolio',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'portfolio_create',
                ],
                'required': [
                    'portfolio_create',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'portfolio_create':
                        (PortfolioCreate,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'portfolio_create': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.create_portfolio_market_endpoint = _Endpoint(
            settings={
                'response_type': (PortfolioMarket,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/portfolios/{portfolio_id}/markets/{market_id}',
                'operation_id': 'create_portfolio_market',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'portfolio_id',
                    'market_id',
                ],
                'required': [
                    'portfolio_id',
                    'market_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'portfolio_id',
                    'market_id',
                ]
            },
            root_map={
                'validations': {
                    ('portfolio_id',): {

                        'inclusive_maximum': 9999,
                        'inclusive_minimum': 1001,
                    },
                    ('market_id',): {

                        'inclusive_maximum': 9999,
                        'inclusive_minimum': 1001,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'portfolio_id':
                        (int,),
                    'market_id':
                        (int,),
                },
                'attribute_map': {
                    'portfolio_id': 'portfolio_id',
                    'market_id': 'market_id',
                },
                'location_map': {
                    'portfolio_id': 'path',
                    'market_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_portfolio_endpoint = _Endpoint(
            settings={
                'response_type': (Portfolio,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/portfolios/{portfolio_id}',
                'operation_id': 'delete_portfolio',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'portfolio_id',
                ],
                'required': [
                    'portfolio_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'portfolio_id',
                ]
            },
            root_map={
                'validations': {
                    ('portfolio_id',): {

                        'inclusive_maximum': 9999,
                        'inclusive_minimum': 1001,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'portfolio_id':
                        (int,),
                },
                'attribute_map': {
                    'portfolio_id': 'portfolio_id',
                },
                'location_map': {
                    'portfolio_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_portfolio_endpoint = _Endpoint(
            settings={
                'response_type': (Portfolio,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/portfolios/{portfolio_id}',
                'operation_id': 'get_portfolio',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'portfolio_id',
                ],
                'required': [
                    'portfolio_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'portfolio_id',
                ]
            },
            root_map={
                'validations': {
                    ('portfolio_id',): {

                        'inclusive_maximum': 9999,
                        'inclusive_minimum': 1001,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'portfolio_id':
                        (int,),
                },
                'attribute_map': {
                    'portfolio_id': 'portfolio_id',
                },
                'location_map': {
                    'portfolio_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.list_portfolios_endpoint = _Endpoint(
            settings={
                'response_type': ([PortfolioListItem],),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/portfolios',
                'operation_id': 'list_portfolios',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.list_portfolios_markets_endpoint = _Endpoint(
            settings={
                'response_type': ([PortfolioMarket],),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/portfolios/{portfolio_id}/markets',
                'operation_id': 'list_portfolios_markets',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'portfolio_id',
                ],
                'required': [
                    'portfolio_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'portfolio_id',
                ]
            },
            root_map={
                'validations': {
                    ('portfolio_id',): {

                        'inclusive_maximum': 9999,
                        'inclusive_minimum': 1001,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'portfolio_id':
                        (int,),
                },
                'attribute_map': {
                    'portfolio_id': 'portfolio_id',
                },
                'location_map': {
                    'portfolio_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.list_portfolios_sites_endpoint = _Endpoint(
            settings={
                'response_type': ([PortfolioSite],),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/portfolios/{portfolio_id}/sites',
                'operation_id': 'list_portfolios_sites',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'portfolio_id',
                ],
                'required': [
                    'portfolio_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'portfolio_id',
                ]
            },
            root_map={
                'validations': {
                    ('portfolio_id',): {

                        'inclusive_maximum': 9999,
                        'inclusive_minimum': 1001,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'portfolio_id':
                        (int,),
                },
                'attribute_map': {
                    'portfolio_id': 'portfolio_id',
                },
                'location_map': {
                    'portfolio_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.remove_portfolio_market_endpoint = _Endpoint(
            settings={
                'response_type': (PortfolioMarket,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/portfolios/{portfolio_id}/markets/{market_id}',
                'operation_id': 'remove_portfolio_market',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'portfolio_id',
                    'market_id',
                ],
                'required': [
                    'portfolio_id',
                    'market_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'portfolio_id',
                    'market_id',
                ]
            },
            root_map={
                'validations': {
                    ('portfolio_id',): {

                        'inclusive_maximum': 9999,
                        'inclusive_minimum': 1001,
                    },
                    ('market_id',): {

                        'inclusive_maximum': 9999,
                        'inclusive_minimum': 1001,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'portfolio_id':
                        (int,),
                    'market_id':
                        (int,),
                },
                'attribute_map': {
                    'portfolio_id': 'portfolio_id',
                    'market_id': 'market_id',
                },
                'location_map': {
                    'portfolio_id': 'path',
                    'market_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.remove_portfolio_site_endpoint = _Endpoint(
            settings={
                'response_type': (PortfolioSite,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/portfolios/{portfolio_id}/sites/{site_id}',
                'operation_id': 'remove_portfolio_site',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'portfolio_id',
                    'site_id',
                ],
                'required': [
                    'portfolio_id',
                    'site_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'portfolio_id',
                    'site_id',
                ]
            },
            root_map={
                'validations': {
                    ('portfolio_id',): {

                        'inclusive_maximum': 9999,
                        'inclusive_minimum': 1001,
                    },
                    ('site_id',): {

                        'inclusive_maximum': 99999,
                        'inclusive_minimum': 10000,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'portfolio_id':
                        (int,),
                    'site_id':
                        (int,),
                },
                'attribute_map': {
                    'portfolio_id': 'portfolio_id',
                    'site_id': 'site_id',
                },
                'location_map': {
                    'portfolio_id': 'path',
                    'site_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.update_portfolio_endpoint = _Endpoint(
            settings={
                'response_type': (Portfolio,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/portfolios/{portfolio_id}',
                'operation_id': 'update_portfolio',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'portfolio_id',
                    'portfolio_update',
                ],
                'required': [
                    'portfolio_id',
                    'portfolio_update',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'portfolio_id',
                ]
            },
            root_map={
                'validations': {
                    ('portfolio_id',): {

                        'inclusive_maximum': 9999,
                        'inclusive_minimum': 1001,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'portfolio_id':
                        (int,),
                    'portfolio_update':
                        (PortfolioUpdate,),
                },
                'attribute_map': {
                    'portfolio_id': 'portfolio_id',
                },
                'location_map': {
                    'portfolio_id': 'path',
                    'portfolio_update': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def add_portfolio_site(
        self,
        portfolio_id,
        site_id,
        **kwargs
    ):
        """Adds a Site to a Portfolio  # noqa: E501

        Adds a Site to a Portfolio.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.add_portfolio_site(portfolio_id, site_id, async_req=True)
        >>> result = thread.get()

        Args:
            portfolio_id (int):
            site_id (int):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            PortfolioSite
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['portfolio_id'] = \
            portfolio_id
        kwargs['site_id'] = \
            site_id
        return self.add_portfolio_site_endpoint.call_with_http_info(**kwargs)

    def create_portfolio(
        self,
        portfolio_create,
        **kwargs
    ):
        """Create a Portfolio  # noqa: E501

        Create a Portfolio with all the information:  - **portfolio_name**: each portfolio must have a unique name - **enable**: If True, this portfolio participates in market auction.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_portfolio(portfolio_create, async_req=True)
        >>> result = thread.get()

        Args:
            portfolio_create (PortfolioCreate):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Portfolio
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['portfolio_create'] = \
            portfolio_create
        return self.create_portfolio_endpoint.call_with_http_info(**kwargs)

    def create_portfolio_market(
        self,
        portfolio_id,
        market_id,
        **kwargs
    ):
        """Adds a Market to a Portfolio  # noqa: E501

        Adds a Market to a Portfolio.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_portfolio_market(portfolio_id, market_id, async_req=True)
        >>> result = thread.get()

        Args:
            portfolio_id (int):
            market_id (int):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            PortfolioMarket
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['portfolio_id'] = \
            portfolio_id
        kwargs['market_id'] = \
            market_id
        return self.create_portfolio_market_endpoint.call_with_http_info(**kwargs)

    def delete_portfolio(
        self,
        portfolio_id,
        **kwargs
    ):
        """Delete an existing Portfolio  # noqa: E501

        Delete a Portfolio.  **WARNING!: Portfolio deletion is PERMANENT!** (no way to recover deleted portfolio)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_portfolio(portfolio_id, async_req=True)
        >>> result = thread.get()

        Args:
            portfolio_id (int):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Portfolio
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['portfolio_id'] = \
            portfolio_id
        return self.delete_portfolio_endpoint.call_with_http_info(**kwargs)

    def get_portfolio(
        self,
        portfolio_id,
        **kwargs
    ):
        """Info about a specific Portfolio  # noqa: E501

        Info about a specific Portfolio.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_portfolio(portfolio_id, async_req=True)
        >>> result = thread.get()

        Args:
            portfolio_id (int):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Portfolio
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['portfolio_id'] = \
            portfolio_id
        return self.get_portfolio_endpoint.call_with_http_info(**kwargs)

    def list_portfolios(
        self,
        **kwargs
    ):
        """List all portfolios  # noqa: E501

        List all Portfolios.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_portfolios(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [PortfolioListItem]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.list_portfolios_endpoint.call_with_http_info(**kwargs)

    def list_portfolios_markets(
        self,
        portfolio_id,
        **kwargs
    ):
        """List all Markets added to a Portfolio  # noqa: E501

        List all Markets added to a Portfolio.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_portfolios_markets(portfolio_id, async_req=True)
        >>> result = thread.get()

        Args:
            portfolio_id (int):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [PortfolioMarket]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['portfolio_id'] = \
            portfolio_id
        return self.list_portfolios_markets_endpoint.call_with_http_info(**kwargs)

    def list_portfolios_sites(
        self,
        portfolio_id,
        **kwargs
    ):
        """List all Sites added to a Portfolio  # noqa: E501

        List all Sites added to a Portfolio.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_portfolios_sites(portfolio_id, async_req=True)
        >>> result = thread.get()

        Args:
            portfolio_id (int):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [PortfolioSite]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['portfolio_id'] = \
            portfolio_id
        return self.list_portfolios_sites_endpoint.call_with_http_info(**kwargs)

    def remove_portfolio_market(
        self,
        portfolio_id,
        market_id,
        **kwargs
    ):
        """Removes a Market from a Portfolio  # noqa: E501

        Removes a Market from a Portfolio.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.remove_portfolio_market(portfolio_id, market_id, async_req=True)
        >>> result = thread.get()

        Args:
            portfolio_id (int):
            market_id (int):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            PortfolioMarket
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['portfolio_id'] = \
            portfolio_id
        kwargs['market_id'] = \
            market_id
        return self.remove_portfolio_market_endpoint.call_with_http_info(**kwargs)

    def remove_portfolio_site(
        self,
        portfolio_id,
        site_id,
        **kwargs
    ):
        """Removes a Site from a Portfolio  # noqa: E501

        Removes a Site from a Portfolio.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.remove_portfolio_site(portfolio_id, site_id, async_req=True)
        >>> result = thread.get()

        Args:
            portfolio_id (int):
            site_id (int):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            PortfolioSite
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['portfolio_id'] = \
            portfolio_id
        kwargs['site_id'] = \
            site_id
        return self.remove_portfolio_site_endpoint.call_with_http_info(**kwargs)

    def update_portfolio(
        self,
        portfolio_id,
        portfolio_update,
        **kwargs
    ):
        """Update an existing Portfolio  # noqa: E501

        Update information about a Portfolio.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_portfolio(portfolio_id, portfolio_update, async_req=True)
        >>> result = thread.get()

        Args:
            portfolio_id (int):
            portfolio_update (PortfolioUpdate):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Portfolio
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['portfolio_id'] = \
            portfolio_id
        kwargs['portfolio_update'] = \
            portfolio_update
        return self.update_portfolio_endpoint.call_with_http_info(**kwargs)

