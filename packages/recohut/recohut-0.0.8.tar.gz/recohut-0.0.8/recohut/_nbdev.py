# AUTOGENERATED BY NBDEV! DO NOT EDIT!

__all__ = ["index", "modules", "custom_doc_links", "git_url"]

index = {"AOTMDataset": "aotm.ipynb",
         "download": "movielens.ipynb",
         "unzip": "movielens.ipynb",
         "AbstractDataset": "base.ipynb",
         "AbstractDatasetv2": "base.ipynb",
         "to_list": "retailrocket.ipynb",
         "files_exist": "retailrocket.ipynb",
         "Dataset": "retailrocket.ipynb",
         "SessionDataset": "base.ipynb",
         "SessionDatasetv2": "base.ipynb",
         "SessionDatasetv3": "base.ipynb",
         "data_masks": "session.ipynb",
         "GraphData": "session.ipynb",
         "DigineticaDataset": "diginetica.ipynb",
         "GowallaDataset": "gowalla.ipynb",
         "LastfmDataset": "lastfm.ipynb",
         "ML1MDataset": "movielens.ipynb",
         "Music30Dataset": "music30.ipynb",
         "NowPlayingDataset": "nowplaying.ipynb",
         "RetailRocketDatasetv2": "retailrocket.ipynb",
         "SampleSessionDataset": "session.ipynb",
         "split_validation": "session.ipynb",
         "Synthetic": "synthetic.ipynb",
         "Session": "synthetic.ipynb",
         "SequentialMarkov": "synthetic.ipynb",
         "TianchiDataset": "tianchi.ipynb",
         "LightGConv": "message_passing.ipynb",
         "LRGCCF": "message_passing.ipynb",
         "OUNoise": "ou_noise.ipynb",
         "ndcg_at_k": "ndcg.ipynb",
         "ndcg_one": "ndcg.ipynb",
         "dcg_at_k": "ndcg.ipynb",
         "ndcg_at_k_v2": "ndcg.ipynb",
         "calculate_precision_recall": "utils.ipynb",
         "calculate_ndcg": "utils.ipynb",
         "recall": "utils.ipynb",
         "ndcg": "utils.ipynb",
         "recalls_and_ndcgs_for_ks": "utils.ipynb",
         "Actor": "actor_critic.ipynb",
         "Critic": "actor_critic.ipynb",
         "BetaBandit": "bandits.ipynb",
         "EpsilonBandit": "bandits.ipynb",
         "BCQ": "bcq.ipynb",
         "Multi_Layer_Perceptron": "dnn.ipynb",
         "CollabFNet": "dnn.ipynb",
         "DSSM": "dssm.ipynb",
         "EmbeddingNet": "embedding.ipynb",
         "get_list": "embedding.ipynb",
         "GroupEmbedding": "embedding.ipynb",
         "EpsilonGreedy": "bandit_policies.ipynb",
         "EpsilonGreedyRunner": "epsilon.ipynb",
         "MF": "factorization.ipynb",
         "BiasedMF": "factorization.ipynb",
         "NeuMF": "factorization.ipynb",
         "GMF": "gmf.ipynb",
         "MLP": "mlp.ipynb",
         "NMF": "nmf.ipynb",
         "Prod2Vec": "prod2vec.ipynb",
         "SiReN": "siren.ipynb",
         "GNN": "tagnn.ipynb",
         "SRGNN": "srgnn.ipynb",
         "TAGNN": "tagnn.ipynb",
         "unitwise_norm": "tagnn_pp.ipynb",
         "AGC": "tagnn_pp.ipynb",
         "Attention_GNN": "tagnn_pp.ipynb",
         "TAGNN_PP": "tagnn_pp.ipynb",
         "SelfAttention_Layer": "attrec.ipynb",
         "AttRec": "attrec.ipynb",
         "BPR": "bpr.ipynb",
         "Caser": "caser.ipynb",
         "CrossNetwork": "dcn.ipynb",
         "DNN": "widedeep.ipynb",
         "DCN": "dcn.ipynb",
         "Residual_Units": "deepcross.ipynb",
         "DeepCross": "deepcross.ipynb",
         "DeepMF": "deepmf.ipynb",
         "FM_Layer": "fm.ipynb",
         "FM_Layer_v2": "fm.ipynb",
         "FM": "fm.ipynb",
         "FFM_Layer": "fm.ipynb",
         "FFM": "fm.ipynb",
         "NFM": "fm.ipynb",
         "AFM": "fm.ipynb",
         "DeepFM": "fm.ipynb",
         "DNN_v2": "fm.ipynb",
         "Linear": "widedeep.ipynb",
         "CIN": "fm.ipynb",
         "xDeepFM": "fm.ipynb",
         "NCF": "ncf.ipynb",
         "PNN": "pnn.ipynb",
         "get_angles": "sasrec.ipynb",
         "positional_encoding": "sasrec.ipynb",
         "scaled_dot_product_attention": "sasrec.ipynb",
         "MultiHeadAttention": "sasrec.ipynb",
         "FFN": "sasrec.ipynb",
         "EncoderLayer": "sasrec.ipynb",
         "SASRec": "sasrec.ipynb",
         "VDeepMF": "vdeepmf.ipynb",
         "VNCF": "vncf.ipynb",
         "WideDeep": "widedeep.ipynb",
         "seed_everything": "utils.ipynb",
         "ABTestRunner": "ab_test_agent.ipynb",
         "DDPGAgent": "ddpg.ipynb",
         "DDPG": "ddpg.ipynb",
         "ABTestReplayer": "replay_agents.ipynb",
         "EpsilonGreedyReplayer": "replay_agents.ipynb",
         "ThompsonSamplingReplayer": "replay_agents.ipynb",
         "ReplaySimulator": "replay_agents.ipynb",
         "UCBSamplingReplayer": "replay_agents.ipynb",
         "BanditEnv": "bandits.ipynb",
         "BanditTwoArmedDeterministicFixed": "bandits.ipynb",
         "BanditTwoArmedHighLowFixed": "bandits.ipynb",
         "BanditTwoArmedHighHighFixed": "bandits.ipynb",
         "BanditTwoArmedLowLowFixed": "bandits.ipynb",
         "BanditTenArmedRandomFixed": "bandits.ipynb",
         "BanditTenArmedUniformDistributedReward": "bandits.ipynb",
         "BanditTenArmedRandomRandom": "bandits.ipynb",
         "BanditTenArmedGaussian": "bandits.ipynb",
         "Env": "recsys.ipynb",
         "ReplayMemory": "memory.ipynb",
         "ABPolicy": "bandit_policies.ipynb",
         "UCB": "bandit_policies.ipynb",
         "TS": "bandit_policies.ipynb",
         "simple_aggregate": "aggregate.ipynb",
         "BipartiteDataset": "bipartite.ipynb",
         "sparseFeature": "movielens.ipynb",
         "denseFeature": "criteo.ipynb",
         "create_criteo_dataset": "criteo.ipynb",
         "create_ml_1m_dataset": "movielens.ipynb",
         "create_implicit_ml_1m_dataset": "movielens.ipynb",
         "label_encode": "encode.ipynb",
         "simple_normalize": "normalize.ipynb",
         "simple_negative_sampling": "sampling.ipynb",
         "AbstractNegativeSampler": "sampling.ipynb",
         "RandomNegativeSampler": "sampling.ipynb",
         "PopularNegativeSampler": "sampling.ipynb",
         "construct_session_sequences": "session.ipynb",
         "groupby_user": "splitting.ipynb",
         "split_by_ratio": "splitting.ipynb",
         "clean_split": "splitting.ipynb",
         "last_session_out_split": "splitting.ipynb",
         "GroupGenerator": "user_grouping.ipynb",
         "pooled_prob": "ab_testing.ipynb",
         "pooled_SE": "ab_testing.ipynb",
         "confidence_interval": "ab_testing.ipynb",
         "z_val": "ab_testing.ipynb",
         "ab_dist": "ab_testing.ipynb",
         "min_sample_size": "ab_testing.ipynb",
         "p_val": "ab_testing.ipynb",
         "plot_norm_dist": "ab_testing.ipynb",
         "plot_binom_dist": "ab_testing.ipynb",
         "plot_CI": "ab_testing.ipynb",
         "plot_null": "ab_testing.ipynb",
         "plot_alt": "ab_testing.ipynb",
         "abplot": "ab_testing.ipynb",
         "show_area": "ab_testing.ipynb",
         "zplot": "ab_testing.ipynb",
         "abplot_CI_bars": "ab_testing.ipynb",
         "funnel_CI_plot": "ab_testing.ipynb",
         "makedirs": "common_utils.ipynb",
         "wget_download": "common_utils.ipynb",
         "download_url": "common_utils.ipynb",
         "maybe_log": "common_utils.ipynb",
         "extract_tar": "common_utils.ipynb",
         "extract_zip": "common_utils.ipynb",
         "extract_bz2": "common_utils.ipynb",
         "extract_gz": "common_utils.ipynb",
         "Configurator": "config.ipynb",
         "set_logger": "logging.ipynb",
         "Visual": "basic_plots.ipynb",
         "BasicVisual": "basic_plots.ipynb",
         "CountPlot": "basic_plots.ipynb",
         "LongTailPlot": "basic_plots.ipynb",
         "LongTailPlotv2": "basic_plots.ipynb",
         "MatrixPlot": "basic_plots.ipynb",
         "ConfusionMatrix": "basic_plots.ipynb",
         "EmbeddingPlot": "basic_plots.ipynb",
         "ClusterPlot": "basic_plots.ipynb",
         "TimelinePlot": "basic_plots.ipynb",
         "ImageGridPlot": "basic_plots.ipynb",
         "plot_sparse": "eda.ipynb"}

modules = ["datasets/aotm.py",
           "datasets/base.py",
           "datasets/diginetica.py",
           "datasets/gowalla.py",
           "datasets/lastfm.py",
           "datasets/movielens.py",
           "datasets/music30.py",
           "datasets/nowplaying.py",
           "datasets/retailrocket.py",
           "datasets/session.py",
           "datasets/synthetic.py",
           "datasets/tianchi.py",
           "layers/message_passing.py",
           "layers/ou_noise.py",
           "metrics/ndcg.py",
           "metrics/utils.py",
           "models/actor_critic.py",
           "models/bandits.py",
           "models/bcq.py",
           "models/dnn.py",
           "models/dssm.py",
           "models/embedding.py",
           "models/epsilon.py",
           "models/factorization.py",
           "models/gmf.py",
           "models/mlp.py",
           "models/nmf.py",
           "models/prod2vec.py",
           "models/siren.py",
           "models/srgnn.py",
           "models/tagnn.py",
           "models/tagnn_pp.py",
           "models/tf/attrec.py",
           "models/tf/bpr.py",
           "models/tf/caser.py",
           "models/tf/dcn.py",
           "models/tf/deepcross.py",
           "models/tf/deepmf.py",
           "models/tf/fm.py",
           "models/tf/ncf.py",
           "models/tf/pnn.py",
           "models/tf/sasrec.py",
           "models/tf/vdeepmf.py",
           "models/tf/vncf.py",
           "models/tf/widedeep.py",
           "pytorch/utils.py",
           "rl/agents/ab_test_agent.py",
           "rl/agents/ddpg.py",
           "rl/agents/replay_agents.py",
           "rl/envs/bandits.py",
           "rl/envs/recsys.py",
           "rl/memory.py",
           "rl/policies/bandit_policies.py",
           "transforms/aggregate.py",
           "transforms/bipartite.py",
           "transforms/datasets/criteo.py",
           "transforms/datasets/movielens.py",
           "transforms/encode.py",
           "transforms/normalize.py",
           "transforms/sampling.py",
           "transforms/session.py",
           "transforms/splitting.py",
           "transforms/user_grouping.py",
           "utils/ab_testing.py",
           "utils/common_utils.py",
           "utils/config.py",
           "utils/logging.py",
           "visualization/basic_plots.py",
           "visualization/eda.py"]

doc_url = "https://RecoHut-Projects.github.io/recohut/"

git_url = "https://github.com/RecoHut-Projects/recohut/tree/master/"

def custom_doc_links(name): return None
