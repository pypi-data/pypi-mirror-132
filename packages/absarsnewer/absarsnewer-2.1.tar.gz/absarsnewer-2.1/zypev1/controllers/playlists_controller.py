# -*- coding: utf-8 -*-

"""
zypev1

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from zypev1.api_helper import APIHelper
from zypev1.configuration import Server
from zypev1.controllers.base_controller import BaseController
from zypev1.models.playlist_metadata import PlaylistMetadata
from zypev1.models.video_metadata import VideoMetadata


class PlaylistsController(BaseController):

    """A Controller to access Endpoints in the zypev1 API."""

    def __init__(self, config, call_back=None):
        super(PlaylistsController, self).__init__(config, call_back)

    def playlists_get(self,
                      active=None,
                      category=None,
                      title=None,
                      id=None,
                      q=None,
                      order=None,
                      sort=None,
                      page=None,
                      per_page=None):
        """Does a GET request to /playlists.

        List Playlists

        Args:
            active (bool, optional): Filter by active, inactive, or all
                records
            category (string, optional): Filter by category value + Examples  
                + `category[genre][]=drama`     + use
                `category![genre][]=drama` to exclude by category value
            title (string, optional): Filter by title
            id (string, optional): Filter by id + Examples     +
                `id=53d1457962702d4d66000000`     + use
                `id!=53d1457962702d4d66000000` to exclude by ID
            q (string, optional): Filter by keyword
            order (string, optional): Filter by ascending or descending order
                + Examples     + `asc`     + `desc`
            sort (string, optional): Sort on the specified field
            page (float, optional): Number of pages to return
            per_page (float, optional): Number of records to return per page

        Returns:
            list of PlaylistMetadata: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/playlists'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'active': active,
            'category': category,
            'title': title,
            'id': id,
            'q': q,
            'order': order,
            'sort': sort,
            'page': page,
            'per_page': per_page
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, PlaylistMetadata.from_dictionary)

        return decoded

    def playlists_post(self,
                       body,
                       active=None,
                       category=None,
                       title=None,
                       id=None,
                       q=None,
                       order=None,
                       sort=None,
                       page=None,
                       per_page=None):
        """Does a POST request to /playlists.

        Create Playlist

        Args:
            body (PlaylistRequest): TODO: type description here.
            active (string, optional): TODO: type description here.
            category (string, optional): TODO: type description here.
            title (string, optional): TODO: type description here.
            id (string, optional): TODO: type description here.
            q (string, optional): TODO: type description here.
            order (string, optional): TODO: type description here.
            sort (string, optional): TODO: type description here.
            page (string, optional): TODO: type description here.
            per_page (string, optional): TODO: type description here.

        Returns:
            PlaylistMetadata: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/playlists'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'active': active,
            'category': category,
            'title': title,
            'id': id,
            'q': q,
            'order': order,
            'sort': sort,
            'page': page,
            'per_page': per_page
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, PlaylistMetadata.from_dictionary)

        return decoded

    def playlists_by_id_get(self,
                            id):
        """Does a GET request to /playlists/{id}.

        View Playlist

        Args:
            id (string): ID of video

        Returns:
            PlaylistMetadata: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/playlists/{id}'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'id': {'value': id, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, PlaylistMetadata.from_dictionary)

        return decoded

    def playlists_by_id_put(self,
                            id,
                            body):
        """Does a PUT request to /playlists/{id}.

        Update Playlist

        Args:
            id (string): ID of video
            body (Playlist): TODO: type description here.

        Returns:
            PlaylistMetadata: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/playlists/{id}'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'id': {'value': id, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.config.http_client.put(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, PlaylistMetadata.from_dictionary)

        return decoded

    def playlists_by_id_delete(self,
                               id):
        """Does a DELETE request to /playlists/{id}.

        Delete Playlist

        Args:
            id (string): ID of video

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/playlists/{id}'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'id': {'value': id, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare and execute request
        _request = self.config.http_client.delete(_query_url)
        _response = self.execute_request(_request)
        self.validate_response(_response)

    def playlists_videos_by_id_get(self,
                                   id):
        """Does a GET request to /playlists/{id}/videos.

        List Playlist Videos

        Args:
            id (string): ID of playlist

        Returns:
            list of PlaylistMetadata: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/playlists/{id}/videos'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'id': {'value': id, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, PlaylistMetadata.from_dictionary)

        return decoded

    def playlists_add_video_by_id_put(self,
                                      id,
                                      body):
        """Does a PUT request to /playlists/{id}/add_video.

        Add a video to a playlist

        Args:
            id (string): ID of playlist
            body (AddAVideoToAPlaylistRequest): TODO: type description here.

        Returns:
            list of PlaylistMetadata: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/playlists/{id}/add_video'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'id': {'value': id, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.config.http_client.put(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, PlaylistMetadata.from_dictionary)

        return decoded

    def playlists_remove_video_by_id_put(self,
                                         id,
                                         body):
        """Does a PUT request to /playlists/{id}/remove_video.

        Remove a video from a playlist

        Args:
            id (string): ID of playlist
            body (string): TODO: type description here.

        Returns:
            list of VideoMetadata: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/playlists/{id}/remove_video'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'id': {'value': id, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.put(_query_url, headers=_headers, parameters=body)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, VideoMetadata.from_dictionary)

        return decoded
