# -*- coding: utf-8 -*-

"""
zypev1

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class Zobject(object):

    """Implementation of the 'Zobject' model.

    TODO: type model description here.

    Attributes:
        title (string): TODO: type description here.
        description (string): TODO: type description here.
        friendly_title (string): mckellen
        keywords (list of string): TODO: type description here.
        active (string): TODO: type description here.
        zobject_type_title (string): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "title": 'title',
        "description": 'description',
        "friendly_title": 'friendly_title',
        "keywords": 'keywords',
        "active": 'active',
        "zobject_type_title": 'zobject_type_title'
    }

    def __init__(self,
                 title=None,
                 description=None,
                 friendly_title=None,
                 keywords=None,
                 active=None,
                 zobject_type_title=None):
        """Constructor for the Zobject class"""

        # Initialize members of the class
        self.title = title
        self.description = description
        self.friendly_title = friendly_title
        self.keywords = keywords
        self.active = active
        self.zobject_type_title = zobject_type_title

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        title = dictionary.get('title')
        description = dictionary.get('description')
        friendly_title = dictionary.get('friendly_title')
        keywords = dictionary.get('keywords')
        active = dictionary.get('active')
        zobject_type_title = dictionary.get('zobject_type_title')

        # Return an object of this model
        return cls(title,
                   description,
                   friendly_title,
                   keywords,
                   active,
                   zobject_type_title)
