# -*- coding: utf-8 -*-

"""
zypev1

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from zypev1.api_helper import APIHelper
from zypev1.configuration import Server
from zypev1.controllers.base_controller import BaseController
from zypev1.models.video_favorite_metadata import VideoFavoriteMetadata


class VideoFavoritesController(BaseController):

    """A Controller to access Endpoints in the zypev1 API."""

    def __init__(self, config, call_back=None):
        super(VideoFavoritesController, self).__init__(config, call_back)

    def consumers_video_favorites_by_consumer_id_get(self,
                                                     consumer_id):
        """Does a GET request to /consumers/{consumer_id}/video_favorites.

        List Video Favorites

        Args:
            consumer_id (string): ID of consumer

        Returns:
            VideoFavoriteMetadata: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/consumers/{consumer_id}/video_favorites'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'consumer_id': {'value': consumer_id, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, VideoFavoriteMetadata.from_dictionary)

        return decoded

    def consumers_video_favorites_by_consumer_id_post(self,
                                                      body,
                                                      consumer_id):
        """Does a POST request to /consumers/{consumer_id}/video_favorites.

        Create Video Favorite

        Args:
            body (VideoFavoriteRequest): TODO: type description here.
            consumer_id (string): TODO: type description here.

        Returns:
            VideoFavoriteMetadata: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/consumers/{consumer_id}/video_favorites'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'consumer_id': {'value': consumer_id, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, VideoFavoriteMetadata.from_dictionary)

        return decoded

    def consumers_video_favorites_by_consumer_id_and_video_id_delete(self,
                                                                     consumer_id,
                                                                     video_id):
        """Does a DELETE request to /consumers/{consumer_id}/video_favorites/{video_id}.

        Delete Video Favorite

        Args:
            consumer_id (string): ID of consumer
            video_id (string): ID of video

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/consumers/{consumer_id}/video_favorites/{video_id}'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'consumer_id': {'value': consumer_id, 'encode': True},
            'video_id': {'value': video_id, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare and execute request
        _request = self.config.http_client.delete(_query_url)
        _response = self.execute_request(_request)
        self.validate_response(_response)
