# -*- coding: utf-8 -*-

"""
zypev1

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from zypev1.api_helper import APIHelper
from zypev1.configuration import Server
from zypev1.controllers.base_controller import BaseController
from zypev1.models.subscription_metadata import SubscriptionMetadata


class SubscriptionsController(BaseController):

    """A Controller to access Endpoints in the zypev1 API."""

    def __init__(self, config, call_back=None):
        super(SubscriptionsController, self).__init__(config, call_back)

    def subscriptions_get(self,
                          id=None,
                          created_at=None,
                          plan_id=None,
                          braintree_id=None,
                          stripe_id=None,
                          consumer_id=None,
                          q=None,
                          order=None,
                          sort=None,
                          page=None,
                          per_page=None):
        """Does a GET request to /subscriptions.

        List Subscriptions

        Args:
            id (string, optional): Filter by ID + Examples     +
                `id=5992f328ce593000ef000008`     + use
                `id!=5992f328ce593000ef000008` to exclude by id
            created_at (date, optional): Filter by created at date using times
                in ISO8601 format Note: Range filters can be applied by adding
                a suffix: ‘.gt’, ‘.gte’, ‘.lt’, ‘lte’ (Example:
                expires_at.gte) + Examples     + `2017-01-01T00:00:00-00:00` -
                in ISO8601 format     + `1483228800` - Unix timestamps
            plan_id (string, optional): ID of Plan
            braintree_id (string, optional): Filter by the consumer's
                Braintree ID
            stripe_id (string, optional): Filter by the consumer's Stripe ID
            consumer_id (string, optional): ID of consumer
            q (string, optional): Filter by keyword
            order (string, optional): Filter by ascending or descending order
                + Examples     + asc     + desc
            sort (string, optional): Sort on the specified field
            page (float, optional): Number of pages to return
            per_page (float, optional): Number of records to return per page

        Returns:
            SubscriptionMetadata: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/subscriptions'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'id': id,
            'created_at': created_at,
            'plan_id': plan_id,
            'braintree_id': braintree_id,
            'stripe_id': stripe_id,
            'consumer_id': consumer_id,
            'q': q,
            'order': order,
            'sort': sort,
            'page': page,
            'per_page': per_page
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, SubscriptionMetadata.from_dictionary)

        return decoded

    def subscriptions_post(self,
                           body,
                           created_at=None,
                           id=None,
                           plan_id=None,
                           braintree_id=None,
                           stripe_id=None,
                           consumer_id=None,
                           order=None,
                           sort=None,
                           page=None,
                           per_page=None,
                           q=None):
        """Does a POST request to /subscriptions.

        Create Subscriptions

        Args:
            body (SubscriptionRequest): TODO: type description here.
            created_at (string, optional): TODO: type description here.
            id (string, optional): TODO: type description here.
            plan_id (string, optional): TODO: type description here.
            braintree_id (string, optional): TODO: type description here.
            stripe_id (string, optional): TODO: type description here.
            consumer_id (string, optional): TODO: type description here.
            order (string, optional): TODO: type description here.
            sort (string, optional): TODO: type description here.
            page (string, optional): TODO: type description here.
            per_page (string, optional): TODO: type description here.
            q (string, optional): TODO: type description here.

        Returns:
            SubscriptionMetadata: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/subscriptions'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'created_at': created_at,
            'id': id,
            'plan_id': plan_id,
            'braintree_id': braintree_id,
            'stripe_id': stripe_id,
            'consumer_id': consumer_id,
            'order': order,
            'sort': sort,
            'page': page,
            'per_page': per_page,
            'q': q
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, SubscriptionMetadata.from_dictionary)

        return decoded

    def subscriptions_by_id_get(self,
                                id):
        """Does a GET request to /subscriptions/{id}.

        View Subscription

        Args:
            id (string): ID of the subscription

        Returns:
            SubscriptionMetadata: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/subscriptions/{id}'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'id': {'value': id, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, SubscriptionMetadata.from_dictionary)

        return decoded

    def subscriptions_by_id_put(self,
                                id,
                                body):
        """Does a PUT request to /subscriptions/{id}.

        Update Subscription

        Args:
            id (string): ID of the subscription
            body (SubscriptionRequest): TODO: type description here.

        Returns:
            SubscriptionMetadata: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/subscriptions/{id}'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'id': {'value': id, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.config.http_client.put(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, SubscriptionMetadata.from_dictionary)

        return decoded

    def subscriptions_by_id_delete(self,
                                   id):
        """Does a DELETE request to /subscriptions/{id}.

        Delete Subscription

        Args:
            id (string): ID of the subscription

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/subscriptions/{id}'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'id': {'value': id, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare and execute request
        _request = self.config.http_client.delete(_query_url)
        _response = self.execute_request(_request)
        self.validate_response(_response)
