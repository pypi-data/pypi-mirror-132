# AUTOGENERATED! DO NOT EDIT! File to edit: discrete.ipynb (unless otherwise specified).

__all__ = ['P', 'V', 'DiscretePrior', 'Variables', 'DiscreteKey']

# Cell
import gtsam

from typing import List, Tuple, Callable


# Cell
def P(*args):
    """ Create a DiscreteKeys instances from a variable number of DiscreteKey pairs.

    Discrete keys are represented as pairs in Python, with the first element the key and
    the second element the cardinality of the discrete variable. This function accepts a
    variable number of such pairs and creates a gtsam.DiscreteKeys instance.

    Returns:
        DiscreteKeys: an instance of DiscreteKeys.
    """
    #TODO: We can make life easier by providing variable argument functions in C++ itself.
    dks = gtsam.DiscreteKeys()
    for key in args:
        dks.push_back(key)
    return dks

# Cell
def V(values):
    """Convert a dictionary into a DiscreteValues instance.

    Args:
        values (dict): A map from keys to values.

    Returns:
        gtsam.DiscreteValues: an assignment to discrete variables usable by gtsam.
    """
    # TODO: add variable argument operator that takes values in keys order.
    # TODO: allow conversion from dictionary to DiscreteValues.
    a = gtsam.DiscreteValues()
    for key, value in values.items():
        a[key] = value
    return a


# Cell
def DiscretePrior(key: int, pmf: str):
    """ A prior on a discrete variable.

    This really just creates a gtsam.DiscreteConditional without parents.
    """
    # TODO: add to GTSAM
    return gtsam.DiscreteConditional(key, P(), pmf)


# Cell

DiscreteKey = Tuple[int, int]


class Variables:
    """A problem domain for discrete variables."""

    BINARY = ["false", "true"]

    def __init__(self):
        self._variables = {}

    def discrete(self, name: str, domain: List[str]) -> DiscreteKey:
        """Create a variable with given name and discrete domain of named values.

        Args:
            name (str): name of the variable.
            domain (List[str]): names for the different values.

        Returns:
            key: DiscreteKey, i.e., (gtsam.Key, cardinality)
        """
        discreteKey = len(self._variables), len(domain)
        self._variables[discreteKey[0]] = name, domain
        return discreteKey

    def binary(self, name: str) -> DiscreteKey:
        """Create a binary variable with given name.

        Args:
            name (str): name of the variable.

        Returns:
            key: DiscreteKey, i.e., (gtsam.Key, cardinality)
        """
        return self.discrete(name, self.BINARY)

    def name(self, discreteKey: DiscreteKey) -> str:
        """Return name of variable with given discreteKey.

        Args:
            discreteKey (DiscreteKey): (gtsam.Key, cardinality)

        Returns:
            str: name of the variable.
        """
        return self._variables[discreteKey[0]][0]

    def domain(self, discreteKey: DiscreteKey):
        """Return domain of variable with given discreteKey.

        Args:
            discreteKey (DiscreteKey): (gtsam.Key, cardinality)

        Returns:
            str: domain of the variable.
        """
        return self._variables[discreteKey[0]][1]

    def keyFormatter(self) -> Callable:
        """Return a lambda that can be used as KeyFormatter in GTSAM"""
        return lambda key: self._variables[key][0]
