{"version":3,"file":"lib_widget_js.380ec9fab76d9b480352.js","mappings":";;;;;;;;;;;;;AAAA;AACA;AACA;AACO;AACP;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sFAAsF;AACtF;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6FAA6F;AAC7F,aAAa;AACb;AACA;AACA;AACA;AACA,oBAAoB,cAAc;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;;;;;;;;;;;;;;;;AC/GA;AACA;AACA;AACA,aAAa,mBAAO,CAAC,uCAAiB;AACtC;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;;;;;;;;;;;;;;;;;;;;;;;;ACfA;AACA;AACsE;AACd;AACxD;AAC4B,CAAC;AACkB;AACN;AACO;AACzC,6BAA6B,iEAAc;AAClD;AACA,6CAA6C,uBAAuB,kXAAkX,oBAAoB,4EAA4E;AACthB;AACA;AACA;AACA;AACA;AACA,2BAA2B,uDAAU;AACrC,6CAA6C,EAAE,6EAA0B;AACzE;AACA;AACA;AACA,8BAA8B,iDAAW;AACzC,sCAAsC,oDAAc;AACpD,4CAA4C;AAC5C,6BAA6B,iDAAW,EAAE;AAC1C,qCAAqC,oDAAc;AAC5C,4BAA4B,gEAAa;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,yDAAU;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,qEAAyB;AAChE,iCAAiC,qEAAyB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,cAAc,IAAI;AAChD;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,oBAAoB,mEAAuB;AAC3C,4BAA4B,WAAW,oBAAoB,KAAK,eAAe;AAC/E,4BAA4B;AAC5B,4DAA4D;AAC5D;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,iCAAiC,IAAI;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;ACtLA;AACA,kCAAkC,mBAAO,CAAC,qGAAgD;AAC1F,wCAAwC,mBAAO,CAAC,mHAAqD;AACrG;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACRA,UAAU,mBAAO,CAAC,oJAAwE;AAC1F,0BAA0B,mBAAO,CAAC,qHAAsD;;AAExF;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;;;AAIA","sources":["webpack://serialhub/./lib/serialhubport.js","webpack://serialhub/./lib/version.js","webpack://serialhub/./lib/widget.js","webpack://serialhub/./style/index.css","webpack://serialhub/./style/index.css?0140"],"sourcesContent":["// Copyright (c) cdr4eelz\n// Distributed under the terms of the Modified BSD License.\n/* SerilHubPort class to simplify access to WebSerial ports */\nexport class SerialHubPort {\n    constructor(oldSP) {\n        if (oldSP) {\n            oldSP.disconnect(); //Dispose of prior \"port\" if passed to us\n        }\n        this.port = null;\n        this.writer = null;\n        this.reader = null;\n    }\n    async connect(requestOpts, serialOpts) {\n        const NAV = window.navigator;\n        if (!NAV || !NAV.serial) {\n            return;\n        }\n        if (this.port) {\n            //Implies potentially \"connected\" status if this.port is set\n            try {\n                await this.disconnect();\n            }\n            catch (e) {\n                console.log('Ignoring exception', e);\n            }\n            finally {\n                this.port = null; //Ensure it is null before proceeding\n            }\n        }\n        const rawPort = await NAV.serial.requestPort(requestOpts);\n        if (!rawPort) {\n            return; //TODO: Throw exception? The requestPort() probably already threw error\n        }\n        this.port = rawPort;\n        await this.port.open(serialOpts);\n        this.writer = this.port.writable.getWriter();\n        this.reader = this.port.readable.getReader();\n        console.log('CONNECT: ', this);\n        //Let cbConnect initiate this.readLoop(f);\n    }\n    async disconnect() {\n        var _a, _b, _c;\n        console.log('CLOSE: ', this);\n        //TODO: Verify proper closing steps for reader/writer vs the port itself\n        try {\n            await ((_a = this.reader) === null || _a === void 0 ? void 0 : _a.cancel());\n        }\n        catch (e) {\n            //Ignore exception on reader\n        }\n        finally {\n            this.reader = null;\n        }\n        try {\n            await ((_b = this.writer) === null || _b === void 0 ? void 0 : _b.close());\n        }\n        catch (e) {\n            //Ignore exception on writer\n        }\n        finally {\n            this.writer = null;\n        }\n        try {\n            await ((_c = this.port) === null || _c === void 0 ? void 0 : _c.close()); //Let exceptions through from here\n        }\n        finally {\n            this.port = null; //But clear this.port reference\n        }\n    }\n    writeToStream(data) {\n        if (this.writer) {\n            data.forEach(async (d) => {\n                var _a;\n                //Anonymous function is ASYNC so it can AWAIT the write() call below\n                console.log('[WRITE]', d);\n                await ((_a = this.writer) === null || _a === void 0 ? void 0 : _a.write(d)); // AWAIT in sequence, to avoid parallel promises\n            });\n        }\n    }\n    async readLoop(cbRead) {\n        while (this.reader) {\n            const { value, done } = await this.reader.read();\n            if (value) {\n                //console.log('[readLoop] VALUE', value);\n                cbRead(value);\n            }\n            if (done) {\n                console.log('[readLoop] DONE', done);\n                this.reader.releaseLock();\n                break;\n            }\n        }\n    }\n    static isSupported() {\n        const NAV = window.navigator;\n        if (NAV === undefined || NAV === null) {\n            return false;\n        }\n        const SER = NAV.serial;\n        if (SER === undefined || SER === null) {\n            return false;\n        }\n        return true;\n    }\n    static createHub() {\n        const oldSER = window.serPort;\n        const newSHP = new SerialHubPort(oldSER);\n        window.serPort = newSHP; //Assign to a global location\n        return newSHP;\n    }\n}\n//# sourceMappingURL=serialhubport.js.map","// Copyright (c) cdr4eelz\n// Distributed under the terms of the Modified BSD License.\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst data = require('../package.json');\n/**\n * The _model_module_version/_view_module_version this package implements.\n *\n * The html widget manager assumes that this is the same as the npm package\n * version number.\n */\nexport const MODULE_VERSION = data.version;\n/*\n * The current package name.\n */\nexport const MODULE_NAME = data.name;\n//# sourceMappingURL=version.js.map","// Copyright (c) cdr4eelz\n// Distributed under the terms of the Modified BSD License.\nimport { DOMWidgetModel, DOMWidgetView } from '@jupyter-widgets/base';\nimport { MODULE_NAME, MODULE_VERSION } from './version';\n// Import the CSS\nimport '../style/index.css'; //was '../css/widget.css'\nimport * as utils from '@jupyter-widgets/base';\nimport { UUID } from '@lumino/coreutils';\nimport { SerialHubPort } from './serialhubport';\nexport class SerialHubModel extends DOMWidgetModel {\n    defaults() {\n        return Object.assign(Object.assign({}, super.defaults()), { _model_name: SerialHubModel.model_name, _model_module: SerialHubModel.model_module, _model_module_version: SerialHubModel.model_module_version, _view_name: SerialHubModel.view_name, _view_module: SerialHubModel.view_module, _view_module_version: SerialHubModel.view_module_version, is_supported: false, status: 'Initializing...', value: 'Loading...', request_options: {}, serial_options: {}, pkt_recv_front: 0, pkt_recv_back: 0, pkt_send_front: 0, pkt_send_back: 0 });\n    }\n    static get mytempid() {\n        return SerialHubModel._mytempid;\n    }\n}\nSerialHubModel._mytempid = utils.uuid();\nSerialHubModel.serializers = Object.assign({}, DOMWidgetModel.serializers\n// Add any extra serializers here\n);\nSerialHubModel.model_name = 'SerialHubModel';\nSerialHubModel.model_module = MODULE_NAME;\nSerialHubModel.model_module_version = MODULE_VERSION;\nSerialHubModel.view_name = 'SerialHubView'; // Set to null if no view\nSerialHubModel.view_module = MODULE_NAME; // Set to null if no view\nSerialHubModel.view_module_version = MODULE_VERSION;\nexport class SerialHubView extends DOMWidgetView {\n    constructor() {\n        super(...arguments);\n        this._el_status = null;\n        this._el_stats = null;\n        this._el_value = null;\n        this._shp = null;\n    }\n    render() {\n        this.el.id = this.id || UUID.uuid4();\n        this.el.classList.add('xx-serialhub-widget');\n        /* Create a couple sub-Elements for our custom widget */\n        this._el_status = window.document.createElement('button');\n        this._el_status.classList.add('xx-serialhub-status');\n        this._el_stats = window.document.createElement('span');\n        this._el_stats.classList.add('xx-serialhub-stats');\n        this._el_value = window.document.createElement('pre');\n        this._el_value.classList.add('xx-serialhub-value');\n        /* Click events wrapped to capture \"this\" object */\n        this._el_status.onclick = (ev) => this.click_status(ev);\n        this._el_value.onclick = (ev) => this.click_value(ev);\n        /* Maybe is more appropriate append() function availablie? */\n        this.el.append(this._el_status, this._el_stats, this._el_value);\n        this.changed_status();\n        this.changed_value();\n        this.changed_stats();\n        this.model.on('change:status', this.changed_status, this);\n        this.model.on('change:value', this.changed_value, this);\n        this.model.on('change:request_options', this.changed_request_options, this);\n        this.model.on('change:serial_options', this.changed_serial_options, this);\n        this.model.on('change:pkt_recv_front', this.changed_stats, this);\n        this.model.on('change:pkt_recv_back', this.changed_stats, this);\n        this.model.on('change:pkt_send_front', this.changed_stats, this);\n        this.model.on('change:pkt_send_back', this.changed_stats, this);\n        this.model.on('msg:custom', this.msg_custom, this);\n        this.model.set('is_supported', SerialHubPort.isSupported());\n        this.model.set('status', SerialHubPort.isSupported() ? 'Supported' : 'Unsupported');\n        this.touch();\n        return this;\n    }\n    get_port_options() {\n        return [\n            this.model.get('request_options'),\n            this.model.get('serial_options')\n        ];\n    }\n    update_stats_title() {\n        var _a, _b;\n        const [reqOpts, serOpts] = this.get_port_options();\n        let title = 'Request-Options: ' +\n            JSON.stringify(reqOpts) +\n            '\\r\\nSerial-Options: ' +\n            JSON.stringify(serOpts);\n        const serInfo = (_b = (_a = this._shp) === null || _a === void 0 ? void 0 : _a.port) === null || _b === void 0 ? void 0 : _b.getInfo();\n        if (serInfo) {\n            title += '\\r\\nPort-Info:' + JSON.stringify(serInfo);\n        }\n        if (this._el_stats) {\n            this._el_stats.title = title;\n        }\n    }\n    changed_request_options() {\n        console.log('SET request_options:', this.model.get('request_options'));\n        this.update_stats_title();\n    }\n    changed_serial_options() {\n        console.log('SET serial_options:', this.model.get('serial_options'));\n        this.update_stats_title();\n    }\n    changed_status() {\n        if (this._el_status && this.model) {\n            this._el_status.textContent = this.model.get('status');\n        }\n    }\n    changed_value() {\n        if (this._el_value && this.model) {\n            this._el_value.textContent = this.model.get('value');\n        }\n    }\n    changed_stats() {\n        if (this._el_stats) {\n            let stats = '';\n            stats += ' Rf:' + this.model.get('pkt_recv_front');\n            stats += ' Rb:' + this.model.get('pkt_recv_back');\n            stats += ' Sf:' + this.model.get('pkt_send_front');\n            stats += ' Sb:' + this.model.get('pkt_send_back');\n            this._el_stats.textContent = stats;\n        }\n    }\n    cb_read(value) {\n        console.log('DATA-IN', value);\n        try {\n            this.model.send({ type: 'RECV' }, {}, [value]);\n        }\n        catch (e) {\n            console.log('Failed to send serial data to backend.', e);\n            //TODO: Shutdown the reader & connection on fatal errors\n            throw e; //Rethrow exception\n        }\n        //Only increment statistics if send() was successful\n        const cnt = this.model.get('pkt_recv_front') + 1;\n        this.model.set('pkt_recv_front', cnt);\n    }\n    cb_connect() {\n        var _a;\n        console.log('cb_connect', this._shp);\n        this.update_stats_title(); //Update serialPortInfo since we connected\n        (_a = this._shp) === null || _a === void 0 ? void 0 : _a.readLoop((value) => {\n            this.cb_read(value);\n        });\n        console.log('DONE cb_connect');\n    }\n    click_status(ev) {\n        console.log('click_status', this, this.model, ev);\n        this._shp = SerialHubPort.createHub();\n        //const reqOpts = { filters: [{usbVendorId: 0x2047}] }; // TI proper ; unused 0x0451 for \"TUSB2046 Hub\"\n        //const serOpts = { baudRate: 115200 };\n        const [reqOpts, serOpts] = this.get_port_options(); //Unpack options to local vars\n        console.log('Connect with options...', reqOpts, serOpts);\n        this._shp.connect(reqOpts, serOpts).then(() => {\n            this.cb_connect();\n        });\n        console.log('DONE click', this._shp);\n    }\n    click_value(ev) {\n        var _a;\n        if (!this || !this.model) {\n            return;\n        }\n        this.model.send({ type: 'text', text: 'VALUE-6\\n' }, {}, []);\n        const encoder = new TextEncoder();\n        const theData = encoder.encode('6');\n        (_a = this._shp) === null || _a === void 0 ? void 0 : _a.writeToStream([theData]);\n        this.model.set('pkt_send_front', this.model.get('pkt_send_front') + 1);\n    }\n    msg_custom(mData, mBuffs) {\n        var _a, _b;\n        //console.log(this, mData, mBuffs);\n        const msgType = mData['type'];\n        if (msgType === 'SEND') {\n            console.log('MSG-SEND', mBuffs);\n            (_a = this._shp) === null || _a === void 0 ? void 0 : _a.writeToStream(mBuffs);\n            this.model.set('pkt_send_front', this.model.get('pkt_send_front') + 1);\n        }\n        else if (msgType === 'SEND2') {\n            const encoder = new TextEncoder();\n            const theData = encoder.encode(mData['text']);\n            (_b = this._shp) === null || _b === void 0 ? void 0 : _b.writeToStream([theData]);\n            this.model.set('pkt_send_front', this.model.get('pkt_send_front') + 1);\n        }\n        else {\n            console.log('UNKNOWN MESSAGE: ', msgType, mData, mBuffs);\n        }\n    }\n}\n//# sourceMappingURL=widget.js.map","// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../node_modules/css-loader/dist/runtime/api.js\");\nvar ___CSS_LOADER_AT_RULE_IMPORT_0___ = require(\"-!../node_modules/css-loader/dist/cjs.js!./base.css\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\nexports.i(___CSS_LOADER_AT_RULE_IMPORT_0___);\n// Module\nexports.push([module.id, \"\\n\", \"\"]);\n// Exports\nmodule.exports = exports;\n","var api = require(\"!../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../node_modules/css-loader/dist/cjs.js!./index.css\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};"],"names":[],"sourceRoot":""}