{"version":3,"file":"8004d083.js","mappings":";AAoBA;;AAKA;AACA;AAIA;;;AAGA;;AAGA;AACA;AACA;AACA;AACA;;;AAGA;;AAGA;;;;AAjCA;;;;;;;;;;;AAAA;;AC0BA;AACA;;AA9BA","sources":["webpack://home-assistant-frontend/./src/panels/lovelace/components/hui-buttons-base.ts","webpack://home-assistant-frontend/./src/panels/lovelace/header-footer/hui-buttons-header-footer.ts"],"sourcesContent":["import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, state, property } from \"lit/decorators\";\nimport { computeStateName } from \"../../../common/entity/compute_state_name\";\nimport \"../../../components/entity/state-badge\";\nimport type { ActionHandlerEvent } from \"../../../data/lovelace\";\nimport type { HomeAssistant } from \"../../../types\";\nimport type { EntitiesCardEntityConfig } from \"../cards/types\";\nimport { computeTooltip } from \"../common/compute-tooltip\";\nimport { actionHandler } from \"../common/directives/action-handler-directive\";\nimport { handleAction } from \"../common/handle-action\";\nimport { hasAction } from \"../common/has-action\";\n\n@customElement(\"hui-buttons-base\")\nexport class HuiButtonsBase extends LitElement {\n  @state() public hass!: HomeAssistant;\n\n  @property() public configEntities?: EntitiesCardEntityConfig[];\n\n  protected render(): TemplateResult {\n    return html`\n      ${(this.configEntities || []).map((entityConf) => {\n        const stateObj = this.hass.states[entityConf.entity];\n\n        return html`\n          <div\n            @action=${this._handleAction}\n            .actionHandler=${actionHandler({\n              hasHold: hasAction(entityConf.hold_action),\n              hasDoubleClick: hasAction(entityConf.double_tap_action),\n            })}\n            .config=${entityConf}\n            tabindex=\"0\"\n          >\n            ${entityConf.show_icon !== false\n              ? html`\n                  <state-badge\n                    title=${computeTooltip(this.hass, entityConf)}\n                    .hass=${this.hass}\n                    .stateObj=${stateObj}\n                    .overrideIcon=${entityConf.icon}\n                    .overrideImage=${entityConf.image}\n                    stateColor\n                  ></state-badge>\n                `\n              : \"\"}\n            <span>\n              ${(entityConf.show_name && stateObj) ||\n              (entityConf.name && entityConf.show_name !== false)\n                ? entityConf.name || computeStateName(stateObj)\n                : \"\"}\n            </span>\n          </div>\n        `;\n      })}\n    `;\n  }\n\n  private _handleAction(ev: ActionHandlerEvent) {\n    const config = (ev.currentTarget as any).config as EntitiesCardEntityConfig;\n    handleAction(this, this.hass, config, ev.detail.action!);\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: flex;\n        justify-content: space-evenly;\n      }\n      div {\n        cursor: pointer;\n        align-items: center;\n        display: inline-flex;\n        outline: none;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-buttons-base\": HuiButtonsBase;\n  }\n}\n","import { html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { HomeAssistant } from \"../../../types\";\nimport { processConfigEntities } from \"../common/process-config-entities\";\nimport \"../components/hui-buttons-base\";\nimport { EntityConfig } from \"../entity-rows/types\";\nimport { LovelaceHeaderFooter } from \"../types\";\nimport { ButtonsHeaderFooterConfig } from \"./types\";\n\n@customElement(\"hui-buttons-header-footer\")\nexport class HuiButtonsHeaderFooter\n  extends LitElement\n  implements LovelaceHeaderFooter\n{\n  public static getStubConfig(): Record<string, unknown> {\n    return { entities: [] };\n  }\n\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _configEntities?: EntityConfig[];\n\n  public getCardSize(): number {\n    return 3;\n  }\n\n  public setConfig(config: ButtonsHeaderFooterConfig): void {\n    this._configEntities = processConfigEntities(config.entities).map(\n      (entityConfig) => ({\n        tap_action: { action: \"toggle\" },\n        hold_action: { action: \"more-info\" },\n        ...entityConfig,\n      })\n    );\n  }\n\n  protected render(): TemplateResult | void {\n    return html`\n      <hui-buttons-base\n        .hass=${this.hass}\n        .configEntities=${this._configEntities}\n      ></hui-buttons-base>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-buttons-header-footer\": HuiButtonsHeaderFooter;\n  }\n}\n"],"names":[],"sourceRoot":""}