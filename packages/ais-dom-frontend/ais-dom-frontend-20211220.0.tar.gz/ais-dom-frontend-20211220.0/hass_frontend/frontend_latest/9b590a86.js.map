{"version":3,"file":"9b590a86.js","mappings":";AAaA;;AAEA;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQA;;;ACkBA;AACA;;;AAMA;;AAEA;;;AAIA;;AAIA;;;;AAMA;;AAIA;AACA;;;;AAMA;AAEA;;;AAIA;;;AAKA;AACA;;;AAGA;;;AAIA;AACA;;;AA3DA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAhBA","sources":["webpack://home-assistant-frontend/./src/components/ha-dialog.ts","webpack://home-assistant-frontend/./src/panels/config/automation/dialog-new-automation.ts"],"sourcesContent":["import { Dialog } from \"@material/mwc-dialog\";\nimport { mdiClose } from \"@mdi/js\";\nimport { css, CSSResultGroup, html, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport { computeRTLDirection } from \"../common/util/compute_rtl\";\nimport type { HomeAssistant } from \"../types\";\nimport \"@material/mwc-icon-button/mwc-icon-button\";\nimport \"./ha-svg-icon\";\n\nexport const createCloseHeading = (\n  hass: HomeAssistant,\n  title: string | TemplateResult\n) => html`\n  <span class=\"header_title\">${title}</span>\n  <mwc-icon-button\n    aria-label=${hass.localize(\"ui.dialogs.generic.close\")}\n    dialogAction=\"close\"\n    class=\"header_button\"\n    dir=${computeRTLDirection(hass)}\n  >\n    <ha-svg-icon .path=${mdiClose}></ha-svg-icon>\n  </mwc-icon-button>\n`;\n\n@customElement(\"ha-dialog\")\n// @ts-expect-error\nexport class HaDialog extends Dialog {\n  public scrollToPos(x: number, y: number) {\n    this.contentElement.scrollTo(x, y);\n  }\n\n  protected renderHeading() {\n    return html`<slot name=\"heading\"> ${super.renderHeading()} </slot>`;\n  }\n\n  protected static get styles(): CSSResultGroup {\n    return [\n      Dialog.styles,\n      css`\n        .mdc-dialog {\n          --mdc-dialog-scroll-divider-color: var(--divider-color);\n          z-index: var(--dialog-z-index, 7);\n          backdrop-filter: var(--dialog-backdrop-filter, none);\n        }\n        .mdc-dialog__actions {\n          justify-content: var(--justify-action-buttons, flex-end);\n          padding-bottom: max(env(safe-area-inset-bottom), 8px);\n        }\n        .mdc-dialog__container {\n          align-items: var(--vertial-align-dialog, center);\n        }\n        .mdc-dialog__title::before {\n          display: block;\n          height: 20px;\n        }\n        .mdc-dialog .mdc-dialog__content {\n          position: var(--dialog-content-position, relative);\n          padding: var(--dialog-content-padding, 20px 24px);\n        }\n        :host([hideactions]) .mdc-dialog .mdc-dialog__content {\n          padding-bottom: max(\n            var(--dialog-content-padding, 20px),\n            env(safe-area-inset-bottom)\n          );\n        }\n        .mdc-dialog .mdc-dialog__surface {\n          position: var(--dialog-surface-position, relative);\n          top: var(--dialog-surface-top);\n          min-height: var(--mdc-dialog-min-height, auto);\n        }\n        :host([flexContent]) .mdc-dialog .mdc-dialog__content {\n          display: flex;\n          flex-direction: column;\n        }\n        .header_button {\n          position: absolute;\n          right: 16px;\n          top: 10px;\n          text-decoration: none;\n          color: inherit;\n        }\n        .header_title {\n          margin-right: 40px;\n        }\n        [dir=\"rtl\"].header_button {\n          right: auto;\n          left: 16px;\n        }\n        [dir=\"rtl\"].header_title {\n          margin-left: 40px;\n          margin-right: 0px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog\": HaDialog;\n  }\n}\n","import \"@material/mwc-button\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { isComponentLoaded } from \"../../../common/config/is_component_loaded\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport { nextRender } from \"../../../common/util/render-status\";\nimport \"../../../components/ha-blueprint-picker\";\nimport \"../../../components/ha-card\";\nimport \"../../../components/ha-circular-progress\";\nimport { createCloseHeading } from \"../../../components/ha-dialog\";\nimport {\n  AutomationConfig,\n  showAutomationEditor,\n} from \"../../../data/automation\";\nimport {\n  HassDialog,\n  replaceDialog,\n} from \"../../../dialogs/make-dialog-manager\";\nimport { haStyle, haStyleDialog } from \"../../../resources/styles\";\nimport type { HomeAssistant } from \"../../../types\";\nimport { showThingtalkDialog } from \"./thingtalk/show-dialog-thingtalk\";\n\n@customElement(\"ha-dialog-new-automation\")\nclass DialogNewAutomation extends LitElement implements HassDialog {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _opened = false;\n\n  public showDialog(): void {\n    this._opened = true;\n  }\n\n  public closeDialog(): void {\n    this._opened = false;\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  protected render(): TemplateResult {\n    if (!this._opened) {\n      return html``;\n    }\n    return html`\n      <ha-dialog\n        open\n        @closed=${this.closeDialog}\n        .heading=${createCloseHeading(\n          this.hass,\n          this.hass.localize(\"ui.panel.config.automation.dialog_new.header\")\n        )}\n      >\n        <div>\n          ${this.hass.localize(\"ui.panel.config.automation.dialog_new.how\")}\n          <div class=\"container\">\n            ${isComponentLoaded(this.hass, \"cloud\")\n              ? html`<ha-card outlined>\n                  <div>\n                    <h3>\n                      ${this.hass.localize(\n                        \"ui.panel.config.automation.dialog_new.thingtalk.header\"\n                      )}\n                    </h3>\n                    ${this.hass.localize(\n                      \"ui.panel.config.automation.dialog_new.thingtalk.intro\"\n                    )}\n                    <div class=\"side-by-side\">\n                      <paper-input\n                        id=\"input\"\n                        .label=${this.hass.localize(\n                          \"ui.panel.config.automation.dialog_new.thingtalk.input_label\"\n                        )}\n                      ></paper-input>\n                      <mwc-button @click=${this._thingTalk}\n                        >${this.hass.localize(\n                          \"ui.panel.config.automation.dialog_new.thingtalk.create\"\n                        )}</mwc-button\n                      >\n                    </div>\n                  </div>\n                </ha-card>`\n              : html``}\n            ${isComponentLoaded(this.hass, \"blueprint\")\n              ? html`<ha-card outlined>\n                  <div>\n                    <h3>\n                      ${this.hass.localize(\n                        \"ui.panel.config.automation.dialog_new.blueprint.use_blueprint\"\n                      )}\n                    </h3>\n                    <ha-blueprint-picker\n                      @value-changed=${this._blueprintPicked}\n                      .hass=${this.hass}\n                    ></ha-blueprint-picker>\n                  </div>\n                </ha-card>`\n              : html``}\n          </div>\n        </div>\n        <mwc-button slot=\"primaryAction\" @click=${this._blank}>\n          ${this.hass.localize(\n            \"ui.panel.config.automation.dialog_new.start_empty\"\n          )}\n        </mwc-button>\n      </ha-dialog>\n    `;\n  }\n\n  private _thingTalk() {\n    replaceDialog();\n    showThingtalkDialog(this, {\n      callback: (config: Partial<AutomationConfig> | undefined) =>\n        showAutomationEditor(config),\n      input: this.shadowRoot!.querySelector(\"paper-input\")!.value as string,\n    });\n    this.closeDialog();\n  }\n\n  private async _blueprintPicked(ev: CustomEvent) {\n    this.closeDialog();\n    await nextRender();\n    showAutomationEditor({ use_blueprint: { path: ev.detail.value } });\n  }\n\n  private async _blank() {\n    this.closeDialog();\n    await nextRender();\n    showAutomationEditor();\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      haStyleDialog,\n      css`\n        .container {\n          display: flex;\n        }\n        ha-card {\n          width: calc(50% - 8px);\n          margin: 4px;\n        }\n        ha-card div {\n          height: 100%;\n          display: flex;\n          flex-direction: column;\n          justify-content: space-between;\n        }\n        ha-card {\n          box-sizing: border-box;\n          padding: 8px;\n        }\n        ha-blueprint-picker {\n          width: 100%;\n        }\n        .side-by-side {\n          display: flex;\n          flex-direction: row;\n          align-items: flex-end;\n        }\n        @media all and (max-width: 500px) {\n          .container {\n            flex-direction: column;\n          }\n          ha-card {\n            width: 100%;\n          }\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog-new-automation\": DialogNewAutomation;\n  }\n}\n"],"names":[],"sourceRoot":""}