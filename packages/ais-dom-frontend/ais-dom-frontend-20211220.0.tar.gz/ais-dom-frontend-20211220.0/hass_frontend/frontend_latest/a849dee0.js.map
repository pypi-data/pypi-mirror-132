{"version":3,"file":"a849dee0.js","mappings":";;AAaA;;AAEA;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQA;ACGA;AACA;AAEA;AACA;AAEA;AACA;AAEA;;;;AAbA;;;;;;;;;;;;;;;;;;;;;AAPA;;;ACiCA;;AAEA;;AAMA;AAEA;;AAIA;;;;AAIA;AACA;;;;AAIA;AACA;;;;AAKA;;AAMA;AACA;AACA;;;;AAKA;AAEA;AAEA;AACA;;AAEA;;AAtDA;;;;AA3BA","sources":["webpack://home-assistant-frontend/./src/components/ha-dialog.ts","webpack://home-assistant-frontend/./src/panels/lovelace/components/hui-views-list.ts","webpack://home-assistant-frontend/./src/panels/lovelace/editor/select-view/hui-dialog-select-view.ts"],"sourcesContent":["import { Dialog } from \"@material/mwc-dialog\";\nimport { mdiClose } from \"@mdi/js\";\nimport { css, CSSResultGroup, html, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport { computeRTLDirection } from \"../common/util/compute_rtl\";\nimport type { HomeAssistant } from \"../types\";\nimport \"@material/mwc-icon-button/mwc-icon-button\";\nimport \"./ha-svg-icon\";\n\nexport const createCloseHeading = (\n  hass: HomeAssistant,\n  title: string | TemplateResult\n) => html`\n  <span class=\"header_title\">${title}</span>\n  <mwc-icon-button\n    aria-label=${hass.localize(\"ui.dialogs.generic.close\")}\n    dialogAction=\"close\"\n    class=\"header_button\"\n    dir=${computeRTLDirection(hass)}\n  >\n    <ha-svg-icon .path=${mdiClose}></ha-svg-icon>\n  </mwc-icon-button>\n`;\n\n@customElement(\"ha-dialog\")\n// @ts-expect-error\nexport class HaDialog extends Dialog {\n  public scrollToPos(x: number, y: number) {\n    this.contentElement.scrollTo(x, y);\n  }\n\n  protected renderHeading() {\n    return html`<slot name=\"heading\"> ${super.renderHeading()} </slot>`;\n  }\n\n  protected static get styles(): CSSResultGroup {\n    return [\n      Dialog.styles,\n      css`\n        .mdc-dialog {\n          --mdc-dialog-scroll-divider-color: var(--divider-color);\n          z-index: var(--dialog-z-index, 7);\n          backdrop-filter: var(--dialog-backdrop-filter, none);\n        }\n        .mdc-dialog__actions {\n          justify-content: var(--justify-action-buttons, flex-end);\n          padding-bottom: max(env(safe-area-inset-bottom), 8px);\n        }\n        .mdc-dialog__container {\n          align-items: var(--vertial-align-dialog, center);\n        }\n        .mdc-dialog__title::before {\n          display: block;\n          height: 20px;\n        }\n        .mdc-dialog .mdc-dialog__content {\n          position: var(--dialog-content-position, relative);\n          padding: var(--dialog-content-padding, 20px 24px);\n        }\n        :host([hideactions]) .mdc-dialog .mdc-dialog__content {\n          padding-bottom: max(\n            var(--dialog-content-padding, 20px),\n            env(safe-area-inset-bottom)\n          );\n        }\n        .mdc-dialog .mdc-dialog__surface {\n          position: var(--dialog-surface-position, relative);\n          top: var(--dialog-surface-top);\n          min-height: var(--mdc-dialog-min-height, auto);\n        }\n        :host([flexContent]) .mdc-dialog .mdc-dialog__content {\n          display: flex;\n          flex-direction: column;\n        }\n        .header_button {\n          position: absolute;\n          right: 16px;\n          top: 10px;\n          text-decoration: none;\n          color: inherit;\n        }\n        .header_title {\n          margin-right: 40px;\n        }\n        [dir=\"rtl\"].header_button {\n          right: auto;\n          left: 16px;\n        }\n        [dir=\"rtl\"].header_title {\n          margin-left: 40px;\n          margin-right: 0px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog\": HaDialog;\n  }\n}\n","import \"@polymer/paper-item/paper-icon-item\";\nimport \"@polymer/paper-listbox/paper-listbox\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport { toggleAttribute } from \"../../../common/dom/toggle_attribute\";\nimport \"../../../components/ha-icon\";\nimport { LovelaceConfig } from \"../../../data/lovelace\";\n\ndeclare global {\n  interface HASSDomEvents {\n    \"view-selected\": {\n      view: number;\n    };\n  }\n}\n\n@customElement(\"hui-views-list\")\nclass HuiViewsList extends LitElement {\n  @state() private lovelaceConfig?: LovelaceConfig | undefined;\n\n  @state() private selected?: number | undefined;\n\n  protected render(): TemplateResult {\n    if (!this.lovelaceConfig) {\n      return html``;\n    }\n\n    return html`\n      <paper-listbox attr-for-selected=\"data-index\" .selected=${this.selected}>\n        ${this.lovelaceConfig.views.map(\n          (view, index) => html`\n            <paper-icon-item @click=${this._handlePickView} data-index=${index}>\n              ${view.icon\n                ? html`\n                    <ha-icon .icon=${view.icon} slot=\"item-icon\"></ha-icon>\n                  `\n                : \"\"}\n              ${view.title || view.path || \"Unnamed view\"}\n            </paper-icon-item>\n          `\n        )}\n      </paper-listbox>\n    `;\n  }\n\n  protected updated(changedProps) {\n    super.updated(changedProps);\n    toggleAttribute(\n      this,\n      \"hide-icons\",\n      this.lovelaceConfig\n        ? !this.lovelaceConfig.views.some((view) => view.icon)\n        : true\n    );\n  }\n\n  private async _handlePickView(ev: Event) {\n    const view = Number((ev.currentTarget as any).getAttribute(\"data-index\"));\n    fireEvent(this, \"view-selected\", { view });\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      paper-listbox {\n        padding-top: 0;\n      }\n\n      paper-listbox ha-icon {\n        padding: 12px;\n        color: var(--secondary-text-color);\n      }\n\n      paper-icon-item {\n        cursor: pointer;\n      }\n\n      paper-icon-item[disabled] {\n        cursor: initial;\n      }\n\n      :host([hide-icons]) paper-icon-item {\n        --paper-item-icon-width: 0px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-views-list\": HuiViewsList;\n  }\n}\n","import \"@polymer/paper-item/paper-item\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport \"../../../../components/dialog/ha-paper-dialog\";\nimport { createCloseHeading } from \"../../../../components/ha-dialog\";\nimport \"../../../../components/ha-paper-dropdown-menu\";\nimport {\n  fetchConfig,\n  fetchDashboards,\n  LovelaceConfig,\n  LovelaceDashboard,\n} from \"../../../../data/lovelace\";\nimport { haStyleDialog } from \"../../../../resources/styles\";\nimport { HomeAssistant } from \"../../../../types\";\nimport \"../../components/hui-views-list\";\nimport type { SelectViewDialogParams } from \"./show-select-view-dialog\";\n\n@customElement(\"hui-dialog-select-view\")\nexport class HuiDialogSelectView extends LitElement {\n  public hass!: HomeAssistant;\n\n  @state() private _params?: SelectViewDialogParams;\n\n  @state() private _dashboards: LovelaceDashboard[] = [];\n\n  @state() private _urlPath?: string | null;\n\n  @state() private _config?: LovelaceConfig;\n\n  public showDialog(params: SelectViewDialogParams): void {\n    this._config = params.lovelaceConfig;\n    this._urlPath = params.urlPath;\n    this._params = params;\n    if (this._params.allowDashboardChange) {\n      this._getDashboards();\n    }\n  }\n\n  public closeDialog(): void {\n    this._params = undefined;\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  protected render(): TemplateResult {\n    if (!this._params) {\n      return html``;\n    }\n    return html`\n      <ha-dialog\n        open\n        @closed=${this.closeDialog}\n        hideActions\n        .heading=${createCloseHeading(\n          this.hass,\n          this._params.header ||\n            this.hass.localize(\"ui.panel.lovelace.editor.select_view.header\")\n        )}\n      >\n        ${this._params.allowDashboardChange\n          ? html`<ha-paper-dropdown-menu\n              .label=${this.hass.localize(\n                \"ui.panel.lovelace.editor.select_view.dashboard_label\"\n              )}\n              dynamic-align\n              .disabled=${!this._dashboards.length}\n            >\n              <paper-listbox\n                slot=\"dropdown-content\"\n                .selected=${this._urlPath || this.hass.defaultPanel}\n                @iron-select=${this._dashboardChanged}\n                attr-for-selected=\"url-path\"\n              >\n                <paper-item\n                  .urlPath=${\"lovelace\"}\n                  .disabled=${(this.hass.panels.lovelace?.config as any)\n                    ?.mode === \"yaml\"}\n                >\n                  Default\n                </paper-item>\n                ${this._dashboards.map((dashboard) => {\n                  if (!this.hass.user!.is_admin && dashboard.require_admin) {\n                    return \"\";\n                  }\n                  return html`\n                    <paper-item\n                      .disabled=${dashboard.mode !== \"storage\"}\n                      .urlPath=${dashboard.url_path}\n                      >${dashboard.title}</paper-item\n                    >\n                  `;\n                })}\n              </paper-listbox>\n            </ha-paper-dropdown-menu>`\n          : \"\"}\n        ${this._config\n          ? html` <hui-views-list\n              .lovelaceConfig=${this._config}\n              @view-selected=${this._selectView}\n            >\n            </hui-views-list>`\n          : html`<div>No config found.</div>`}\n      </ha-dialog>\n    `;\n  }\n\n  private async _getDashboards() {\n    this._dashboards =\n      this._params!.dashboards || (await fetchDashboards(this.hass));\n  }\n\n  private async _dashboardChanged(ev: CustomEvent) {\n    let urlPath: string | null = ev.detail.item.urlPath;\n    if (urlPath === this._urlPath) {\n      return;\n    }\n    if (urlPath === \"lovelace\") {\n      urlPath = null;\n    }\n    this._urlPath = urlPath;\n    try {\n      this._config = await fetchConfig(this.hass.connection, urlPath, false);\n    } catch (err: any) {\n      this._config = undefined;\n    }\n  }\n\n  private _selectView(e: CustomEvent): void {\n    const view: number = e.detail.view;\n    this._params!.viewSelectedCallback(this._urlPath!, this._config!, view);\n    this.closeDialog();\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyleDialog,\n      css`\n        ha-paper-dropdown-menu {\n          width: 100%;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-dialog-select-view\": HuiDialogSelectView;\n  }\n}\n"],"names":[],"sourceRoot":""}