{"version":3,"file":"747943e1.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2HA;;;ACrCA;;;AC3CA;;;;AAQA;;;AAKA;AACA;AACA;AACA;;;AAGA;AAEA;AAGA;AAEA;AAGA;AACA;;;;;;;AASA;;AAEA;;;AAKA;AACA;;;;AA1EA;;;;;;;;;;;;;AAAA","sources":["webpack://home-assistant-frontend/./node_modules/@polymer/paper-dialog-scrollable/paper-dialog-scrollable.js","webpack://home-assistant-frontend/./node_modules/@polymer/paper-dialog/paper-dialog.js","webpack://home-assistant-frontend/./src/panels/config/cloud/dialog-manage-cloudhook/dialog-manage-cloudhook.ts"],"sourcesContent":["/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\nimport '@polymer/iron-flex-layout/iron-flex-layout.js';\nimport '@polymer/paper-styles/default-theme.js';\n\nimport {PaperDialogBehaviorImpl} from '@polymer/paper-dialog-behavior/paper-dialog-behavior.js';\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\n\n/**\nMaterial design:\n[Dialogs](https://www.google.com/design/spec/components/dialogs.html)\n\n`paper-dialog-scrollable` implements a scrolling area used in a Material Design\ndialog. It shows a divider at the top and/or bottom indicating more content,\ndepending on scroll position. Use this together with elements implementing\n`Polymer.PaperDialogBehavior`.\n\n    <paper-dialog-impl>\n      <h2>Header</h2>\n      <paper-dialog-scrollable>\n        Lorem ipsum...\n      </paper-dialog-scrollable>\n      <div class=\"buttons\">\n        <paper-button>OK</paper-button>\n      </div>\n    </paper-dialog-impl>\n\nIt shows a top divider after scrolling if it is not the first child in its\nparent container, indicating there is more content above. It shows a bottom\ndivider if it is scrollable and it is not the last child in its parent\ncontainer, indicating there is more content below. The bottom divider is hidden\nif it is scrolled to the bottom.\n\nIf `paper-dialog-scrollable` is not a direct child of the element implementing\n`Polymer.PaperDialogBehavior`, remember to set the `dialogElement`:\n\n    <paper-dialog-impl id=\"myDialog\">\n      <h2>Header</h2>\n      <div class=\"my-content-wrapper\">\n        <h4>Sub-header</h4>\n        <paper-dialog-scrollable>\n          Lorem ipsum...\n        </paper-dialog-scrollable>\n      </div>\n      <div class=\"buttons\">\n        <paper-button>OK</paper-button>\n      </div>\n    </paper-dialog-impl>\n\n    <script>\n      var scrollable =\nPolymer.dom(myDialog).querySelector('paper-dialog-scrollable');\n      scrollable.dialogElement = myDialog;\n    </script>\n\n### Styling\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-dialog-scrollable` | Mixin for the scrollable content | {}\n\n@group Paper Elements\n@element paper-dialog-scrollable\n@demo demo/index.html\n@hero hero.svg\n*/\nPolymer({\n  _template: html`\n    <style>\n\n      :host {\n        display: block;\n        @apply --layout-relative;\n      }\n\n      :host(.is-scrolled:not(:first-child))::before {\n        content: '';\n        position: absolute;\n        top: 0;\n        left: 0;\n        right: 0;\n        height: 1px;\n        background: var(--divider-color);\n      }\n\n      :host(.can-scroll:not(.scrolled-to-bottom):not(:last-child))::after {\n        content: '';\n        position: absolute;\n        bottom: 0;\n        left: 0;\n        right: 0;\n        height: 1px;\n        background: var(--divider-color);\n      }\n\n      .scrollable {\n        padding: 0 24px;\n\n        @apply --layout-scroll;\n        @apply --paper-dialog-scrollable;\n      }\n\n      .fit {\n        @apply --layout-fit;\n      }\n    </style>\n\n    <div id=\"scrollable\" class=\"scrollable\" on-scroll=\"updateScrollState\">\n      <slot></slot>\n    </div>\n`,\n\n  is: 'paper-dialog-scrollable',\n\n  properties: {\n\n    /**\n     * The dialog element that implements `Polymer.PaperDialogBehavior`\n     * containing this element.\n     * @type {?Node}\n     */\n    dialogElement: {type: Object}\n\n  },\n\n  /**\n   * Returns the scrolling element.\n   */\n  get scrollTarget() {\n    return this.$.scrollable;\n  },\n\n  ready: function() {\n    this._ensureTarget();\n    this.classList.add('no-padding');\n  },\n\n  attached: function() {\n    this._ensureTarget();\n    requestAnimationFrame(this.updateScrollState.bind(this));\n  },\n\n  updateScrollState: function() {\n    this.toggleClass('is-scrolled', this.scrollTarget.scrollTop > 0);\n    this.toggleClass(\n        'can-scroll',\n        this.scrollTarget.offsetHeight < this.scrollTarget.scrollHeight);\n    this.toggleClass(\n        'scrolled-to-bottom',\n        this.scrollTarget.scrollTop + this.scrollTarget.offsetHeight >=\n            this.scrollTarget.scrollHeight);\n  },\n\n  _ensureTarget: function() {\n    // Read parentElement instead of parentNode in order to skip shadowRoots.\n    this.dialogElement = this.dialogElement || this.parentElement;\n    // Check if dialog implements paper-dialog-behavior. If not, fit\n    // scrollTarget to host.\n    if (this.dialogElement && this.dialogElement.behaviors &&\n        this.dialogElement.behaviors.indexOf(PaperDialogBehaviorImpl) >= 0) {\n      this.dialogElement.sizingTarget = this.scrollTarget;\n      this.scrollTarget.classList.remove('fit');\n    } else if (this.dialogElement) {\n      this.scrollTarget.classList.add('fit');\n    }\n  }\n});\n","/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\nimport '@polymer/paper-dialog-behavior/paper-dialog-shared-styles.js';\n\nimport {NeonAnimationRunnerBehavior} from '@polymer/neon-animation/neon-animation-runner-behavior.js';\nimport {PaperDialogBehavior} from '@polymer/paper-dialog-behavior/paper-dialog-behavior.js';\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\n\n/**\nMaterial design:\n[Dialogs](https://www.google.com/design/spec/components/dialogs.html)\n\n`<paper-dialog>` is a dialog with Material Design styling and optional\nanimations when it is opened or closed. It provides styles for a header, content\narea, and an action area for buttons. You can use the\n`<paper-dialog-scrollable>` element (in its own repository) if you need a\nscrolling content area. To autofocus a specific child element after opening the\ndialog, give it the `autofocus` attribute. See `Polymer.PaperDialogBehavior` and\n`Polymer.IronOverlayBehavior` for specifics.\n\nFor example, the following code implements a dialog with a header, scrolling\ncontent area and buttons. Focus will be given to the `dialog-confirm` button\nwhen the dialog is opened.\n\n    <paper-dialog>\n      <h2>Header</h2>\n      <paper-dialog-scrollable>\n        Lorem ipsum...\n      </paper-dialog-scrollable>\n      <div class=\"buttons\">\n        <paper-button dialog-dismiss>Cancel</paper-button>\n        <paper-button dialog-confirm autofocus>Accept</paper-button>\n      </div>\n    </paper-dialog>\n\n### Styling\n\nSee the docs for `Polymer.PaperDialogBehavior` for the custom properties\navailable for styling this element.\n\n### Animations\n\nSet the `entry-animation` and/or `exit-animation` attributes to add an animation\nwhen the dialog is opened or closed. See the documentation in\n[PolymerElements/neon-animation](https://github.com/PolymerElements/neon-animation)\nfor more info.\n\nFor example:\n\n    <script type=\"module\">\n      import '@polymer/neon-animation/animations/fade-out-animation.js';\n      import '@polymer/neon-animation/animations/scale-up-animation.js';\n    </script>\n\n    <paper-dialog entry-animation=\"scale-up-animation\"\n                  exit-animation=\"fade-out-animation\">\n      <h2>Header</h2>\n      <div>Dialog body</div>\n    </paper-dialog>\n\n### Accessibility\n\nSee the docs for `Polymer.PaperDialogBehavior` for accessibility features\nimplemented by this element.\n\n@group Paper Elements\n@element paper-dialog\n@hero hero.svg\n@demo demo/index.html\n*/\nPolymer({\n  _template: html`\n    <style include=\"paper-dialog-shared-styles\"></style>\n    <slot></slot>\n`,\n\n  is: 'paper-dialog',\n  behaviors: [PaperDialogBehavior, NeonAnimationRunnerBehavior],\n  listeners: {'neon-animation-finish': '_onNeonAnimationFinish'},\n\n  _renderOpened: function() {\n    this.cancelAnimation();\n    this.playAnimation('entry');\n  },\n\n  _renderClosed: function() {\n    this.cancelAnimation();\n    this.playAnimation('exit');\n  },\n\n  _onNeonAnimationFinish: function() {\n    if (this.opened) {\n      this._finishRenderOpened();\n    } else {\n      this._finishRenderClosed();\n    }\n  }\n});\n","import \"@material/mwc-button\";\nimport \"@polymer/paper-dialog-scrollable/paper-dialog-scrollable\";\nimport \"@polymer/paper-input/paper-input\";\nimport type { PaperInputElement } from \"@polymer/paper-input/paper-input\";\nimport { css, CSSResultGroup, html, LitElement } from \"lit\";\nimport { state } from \"lit/decorators\";\nimport \"../../../../components/dialog/ha-paper-dialog\";\nimport type { HaPaperDialog } from \"../../../../components/dialog/ha-paper-dialog\";\nimport { showConfirmationDialog } from \"../../../../dialogs/generic/show-dialog-box\";\nimport { haStyle } from \"../../../../resources/styles\";\nimport { HomeAssistant } from \"../../../../types\";\nimport { documentationUrl } from \"../../../../util/documentation-url\";\nimport { WebhookDialogParams } from \"./show-dialog-manage-cloudhook\";\n\nconst inputLabel = \"Public URL – Click to copy to clipboard\";\n\nexport class DialogManageCloudhook extends LitElement {\n  protected hass?: HomeAssistant;\n\n  @state() private _params?: WebhookDialogParams;\n\n  public async showDialog(params: WebhookDialogParams) {\n    this._params = params;\n    // Wait till dialog is rendered.\n    await this.updateComplete;\n    this._dialog.open();\n  }\n\n  protected render() {\n    if (!this._params) {\n      return html``;\n    }\n    const { webhook, cloudhook } = this._params;\n    const docsUrl =\n      webhook.domain === \"automation\"\n        ? documentationUrl(\n            this.hass!,\n            \"/docs/automation/trigger/#webhook-trigger\"\n          )\n        : documentationUrl(this.hass!, `/integrations/${webhook.domain}/`);\n    return html`\n      <ha-paper-dialog with-backdrop>\n        <h2>\n          ${this.hass!.localize(\n            \"ui.panel.config.cloud.dialog_cloudhook.webhook_for\",\n            \"name\",\n            webhook.name\n          )}\n        </h2>\n        <div>\n          <p>\n            ${this.hass!.localize(\n              \"ui.panel.config.cloud.dialog_cloudhook.available_at\"\n            )}\n          </p>\n          <paper-input\n            label=${inputLabel}\n            value=${cloudhook.cloudhook_url}\n            @click=${this._copyClipboard}\n            @blur=${this._restoreLabel}\n          ></paper-input>\n          <p>\n            ${cloudhook.managed\n              ? html`\n                  ${this.hass!.localize(\n                    \"ui.panel.config.cloud.dialog_cloudhook.managed_by_integration\"\n                  )}\n                `\n              : html`\n                  ${this.hass!.localize(\n                    \"ui.panel.config.cloud.dialog_cloudhook.info_disable_webhook\"\n                  )}\n                  <button class=\"link\" @click=${this._disableWebhook}>\n                    ${this.hass!.localize(\n                      \"ui.panel.config.cloud.dialog_cloudhook.link_disable_webhook\"\n                    )}</button\n                  >.\n                `}\n          </p>\n        </div>\n\n        <div class=\"paper-dialog-buttons\">\n          <a href=${docsUrl} target=\"_blank\" rel=\"noreferrer\">\n            <mwc-button\n              >${this.hass!.localize(\n                \"ui.panel.config.cloud.dialog_cloudhook.view_documentation\"\n              )}</mwc-button\n            >\n          </a>\n          <mwc-button @click=${this._closeDialog}\n            >${this.hass!.localize(\n              \"ui.panel.config.cloud.dialog_cloudhook.close\"\n            )}</mwc-button\n          >\n        </div>\n      </ha-paper-dialog>\n    `;\n  }\n\n  private get _dialog(): HaPaperDialog {\n    return this.shadowRoot!.querySelector(\"ha-paper-dialog\")!;\n  }\n\n  private get _paperInput(): PaperInputElement {\n    return this.shadowRoot!.querySelector(\"paper-input\")!;\n  }\n\n  private _closeDialog() {\n    this._dialog.close();\n  }\n\n  private async _disableWebhook() {\n    showConfirmationDialog(this, {\n      text: this.hass!.localize(\n        \"ui.panel.config.cloud.dialog_cloudhook.confirm_disable\"\n      ),\n      dismissText: this.hass!.localize(\"ui.common.cancel\"),\n      confirmText: this.hass!.localize(\"ui.common.disable\"),\n      confirm: () => {\n        this._params!.disableHook();\n        this._closeDialog();\n      },\n    });\n  }\n\n  private _copyClipboard(ev: FocusEvent) {\n    // paper-input -> iron-input -> input\n    const paperInput = ev.currentTarget as PaperInputElement;\n    const input = (paperInput.inputElement as any)\n      .inputElement as HTMLInputElement;\n    input.setSelectionRange(0, input.value.length);\n    try {\n      document.execCommand(\"copy\");\n      paperInput.label = this.hass!.localize(\n        \"ui.panel.config.cloud.dialog_cloudhook.copied_to_clipboard\"\n      );\n    } catch (err: any) {\n      // Copying failed. Oh no\n    }\n  }\n\n  private _restoreLabel() {\n    this._paperInput.label = inputLabel;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        ha-paper-dialog {\n          width: 650px;\n        }\n        paper-input {\n          margin-top: -8px;\n        }\n        button.link {\n          color: var(--primary-color);\n        }\n        .paper-dialog-buttons a {\n          text-decoration: none;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-manage-cloudhook\": DialogManageCloudhook;\n  }\n}\n\ncustomElements.define(\"dialog-manage-cloudhook\", DialogManageCloudhook);\n"],"names":[],"sourceRoot":""}