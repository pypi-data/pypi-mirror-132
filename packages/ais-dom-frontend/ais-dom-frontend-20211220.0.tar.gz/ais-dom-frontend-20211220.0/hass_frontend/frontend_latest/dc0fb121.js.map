{"version":3,"file":"dc0fb121.js","mappings":";;AA+BA;AAGA;AACA;;;;AAbA;AA6BA;;;;;AA7BA;;ACgGA;;AAEA;AAIA;;AAEA;AAGA;;;AAIA;;;;AAIA;;;;;;;;;AAUA;AACA;AACA;;;;;;;;;;;;;;;;;AAiBA;;AAIA;;AAEA;;AAEA;;;;;;AAMA;;AAEA;;AAEA;;;;;;;;AAQA;AACA;;;;AAIA;;AAEA;AACA;;;;;;;;AAQA;AACA;;;;;;;;AAQA;AACA;;;;;;AAMA;AAEA;;AAEA;AAAA;;;AAMA;;;;;;AAOA;;;;;;;;;;;AAlMA;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA","sources":["webpack://home-assistant-frontend/./src/components/ha-chip-set.ts","webpack://home-assistant-frontend/./src/components/media-player/hui-dialog-add-media-source-ais-dialog.ts"],"sourcesContent":["// @ts-ignore\nimport chipStyles from \"@material/chips/dist/mdc.chips.min.css\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  TemplateResult,\n  unsafeCSS,\n} from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport \"./ha-chip\";\n\ndeclare global {\n  // for fire event\n  interface HASSDomEvents {\n    \"chip-clicked\": { index: string };\n  }\n}\n\n@customElement(\"ha-chip-set\")\nexport class HaChipSet extends LitElement {\n  @property() public items = [];\n\n  protected render(): TemplateResult {\n    if (this.items.length === 0) {\n      return html``;\n    }\n    return html`\n      <div class=\"mdc-chip-set\">\n        ${this.items.map(\n          (item, idx) =>\n            html`\n              <ha-chip .index=${idx} @click=${this._handleClick}>\n                ${item}\n              </ha-chip>\n            `\n        )}\n      </div>\n    `;\n  }\n\n  private _handleClick(ev): void {\n    fireEvent(this, \"chip-clicked\", {\n      index: ev.currentTarget.index,\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ${unsafeCSS(chipStyles)}\n\n      ha-chip {\n        margin: 4px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-chip-set\": HaChipSet;\n  }\n}\n","import \"@material/mwc-button/mwc-button\";\nimport \"@material/mwc-list/mwc-list\";\nimport \"@material/mwc-list/mwc-list-item\";\nimport \"@polymer/paper-item/paper-item\";\nimport \"@polymer/paper-radio-group/paper-radio-group\";\nimport \"@polymer/paper-radio-button/paper-radio-button\";\nimport \"@polymer/paper-input/paper-input\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { property, customElement } from \"lit/decorators\";\nimport \"../ha-circular-progress\";\nimport \"../ha-chip-set\";\nimport \"../ha-switch\";\nimport { createCloseHeading } from \"../ha-dialog\";\nimport { haStyleDialog } from \"../../resources/styles\";\nimport type { HomeAssistant } from \"../../types\";\nimport { HassEntity } from \"home-assistant-js-websocket\";\nimport {\n  showAlertDialog,\n  showConfirmationDialog,\n} from \"../../dialogs/generic/show-dialog-box\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\n\nexport interface AisAnswer {\n  message: string;\n  error: boolean;\n}\n\nexport const AddMediaSourceAisWs = (\n  hass: HomeAssistant,\n  mediaCategory: string,\n  mediaName: string,\n  mediaType: string,\n  mediaStreamUrl: string,\n  mediaImageUrl: string,\n  mediaShare: boolean\n): Promise<AisAnswer> =>\n  hass.callWS<AisAnswer>({\n    type: \"ais_cloud/add_ais_media_source\",\n    mediaCategory,\n    mediaName,\n    mediaType,\n    mediaStreamUrl,\n    mediaImageUrl,\n    mediaShare,\n  });\n\n@customElement(\"hui-dialog-add-media-source-ais\")\nexport class HuiDialogAddMediaSourceAis extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false })\n  @property()\n  private _loading = false;\n\n  @property() private _opened = false;\n\n  @property() private mediaCategory = \"radio\";\n\n  @property() private mediaName = \"\";\n\n  @property() private mediaType = \"\";\n\n  @property() private mediaStreamUrl = \"\";\n\n  @property() private mediaImageUrl = \"\";\n\n  @property() private mediaShare = false;\n\n  @property() private mediaChips: string[] = [];\n\n  @property() private mediaNamePlaceholder =\n    \"Nazwa (komenda: Włącz radio nazwa)\";\n\n  @property() private mediaTypePlaceholder = \"Typ radia\";\n\n  @property() private mediaUrlPlaceholder = \"Adres URL Strumienia\";\n\n  private _aisMediaInfo?: HassEntity;\n\n  public showDialog(): void {\n    this._opened = true;\n    this._aisMediaInfo = this.hass.states[\n      \"media_player.wbudowany_glosnik\"\n    ] as HassEntity;\n    this.mediaCategory = \"radio\";\n    this.mediaName = \"\";\n    this.mediaType = \"\";\n    if (\n      this.hass.states[\"media_player.wbudowany_glosnik\"].attributes\n        .media_content_id\n    ) {\n      this.mediaStreamUrl = this.hass.states[\n        \"media_player.wbudowany_glosnik\"\n      ].attributes.media_content_id;\n    } else {\n      this.mediaStreamUrl = \"\";\n    }\n    this.mediaImageUrl = \"\";\n    this.mediaShare = false;\n\n    this.mediaChips = [];\n    const options = this.hass.states[\"input_select.radio_type\"].attributes\n      .options;\n    options.forEach((element: string) => {\n      if (!element.startsWith(\"Moje\") && !element.startsWith(\"Udostępnione\")) {\n        this.mediaChips.push(element || \"\");\n      }\n    });\n  }\n\n  public closeDialog() {\n    this._opened = false;\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <ha-dialog\n        .open=${this._opened}\n        hideActions\n        .heading=${createCloseHeading(\n          this.hass,\n          \"Dodaj nowe Multimedia do biblioteki\"\n        )}\n        @closed=${this.closeDialog}\n      >\n        ${this._loading\n          ? html`<ha-circular-progress active></ha-circular-progress>`\n          : html`<p>\n                ${this._isAudioPlaying() && !this._loading\n                  ? html`\n                  <span class=\"aisUrl\">\n                    Odtwarzasz z URL, <ha-icon icon=\"mdi:web\"></ha-icon>:\n                    <b></b>${this.hass.states[\"media_player.wbudowany_glosnik\"].attributes.media_content_id}</b>\n                    <br/>ten adres został wypełniony automatycznie - sprawdź czy się zgadza.\n                    </span\n                  >\n                  `\n                  : html`\n                      Obecnie na wbudowanym odtwarzaczu nie odtwarzasz żadnych\n                      mediów. Sugerujemy sprawdzenie działania mediów na\n                      odtwarzaczu przed ich dodaniem.\n                    `}\n              </p>\n\n              <label> Typ audio: </label>\n              <paper-radio-group\n                .selected=${this.mediaCategory}\n                .value=${this.mediaCategory}\n                @selected-changed=${this._mediaCategoryChanged}\n              >\n                <paper-radio-button name=\"radio\">\n                  <ha-icon icon=\"mdi:radio\"></ha-icon>\n                </paper-radio-button>\n\n                <paper-radio-button name=\"podcast\">\n                  <ha-icon icon=\"mdi:podcast\"></ha-icon>\n                </paper-radio-button>\n                <paper-radio-button name=\"audiobook\">\n                  <ha-icon icon=\"mdi:book-music\"></ha-icon>\n                </paper-radio-button>\n                <paper-radio-button name=\"music\">\n                  <ha-icon icon=\"mdi:music\"></ha-icon>\n                </paper-radio-button>\n              </paper-radio-group>\n              <br />\n              ${this.mediaCategory === \"radio\" ||\n              this.mediaCategory === \"podcast\"\n                ? html`\n                    <paper-input\n                      .placeholder=${this.mediaNamePlaceholder}\n                      type=\"text\"\n                      value=${this.mediaName}\n                      id=\"audio_name\"\n                      @value-changed=${this._mediaNameChanged}\n                    >\n                      <ha-icon icon=\"mdi:account-voice\" slot=\"suffix\"></ha-icon>\n                    </paper-input>\n\n                    <paper-input\n                      .placeholder=${this.mediaTypePlaceholder}\n                      type=\"text\"\n                      value=${this.mediaType}\n                      id=\"audio_category\"\n                      @value-changed=${this._mediaTypeChanged}\n                    >\n                      <ha-icon\n                        icon=\"mdi:format-list-bulleted-type\"\n                        slot=\"suffix\"\n                      ></ha-icon>\n                    </paper-input>\n                    <ha-chip-set\n                      @chip-clicked=${this._mediaTypePicket}\n                      .items=${this.mediaChips}\n                    >\n                    </ha-chip-set>\n                    <paper-input\n                      .placeholder=${this.mediaUrlPlaceholder}\n                      type=\"text\"\n                      value=${this.mediaStreamUrl}\n                      @value-changed=${this._mediaStreamUrlChanged}\n                    >\n                      <ha-icon icon=\"mdi:play-network\" slot=\"suffix\"></ha-icon>\n                    </paper-input>\n\n                    <paper-input\n                      placeholder=\"Adres URL Okładki\"\n                      type=\"text\"\n                      value=${this.mediaImageUrl}\n                      @value-changed=${this._mediaImageUrlChanged}\n                    >\n                      <ha-icon icon=\"mdi:image-edit\" slot=\"suffix\"></ha-icon>\n                    </paper-input>\n                    <br />\n                    <div style=\"text-align:center;\">\n                      <ha-icon icon=\"mdi:share-variant\"></ha-icon>\n                      <ha-switch\n                        .checked=${this.mediaShare}\n                        @change=${this._mediaShareChanged}\n                      >\n                      </ha-switch>\n                      Udostępnij dla wszystkich (po sprawdzeniu w AIS)\n                      <br /><br />\n                    </div>\n                    ${this._canSourceBeAdded()\n                      ? html` <div class=\"sourceCheckButton\">\n                            <mwc-button raised @click=${this._handleAddMedia}>\n                              <ha-icon icon=\"hass:music-note-plus\"></ha-icon>\n                              ${!this.mediaShare\n                                ? html` Dodaj do swojej biblioteki `\n                                : html`Dodaj do swojej biblioteki i udostępnij\n                                  dla wszystkich`}\n                            </mwc-button>\n                          </div>\n                          <br />`\n                      : html`\n                          <div style=\"text-align: center;\">\n                            <h2>Wypełnij wszsytkie wymagane pola.</h2>\n                          </div>\n                          <br />\n                        `}\n                  `\n                : html`<div class=\"WorkInProgress\">\n                      <img src=\"/static/ais_work_in_progress.png\" />\n                    </div>\n                    <div class=\"AisGithub\">\n                      <a href=\"https://github.com/sviete\" target=\"_blank\"\n                        ><ha-icon icon=\"hass:github\"></ha-icon> Join AI-Speaker\n                        on Github</a\n                      >\n                    </div>\n                    <br />`} `}\n      </ha-dialog>\n    `;\n  }\n\n  private async _addMediaToAis(): Promise<AisAnswer> {\n    this._loading = true;\n    let itemData: AisAnswer = { message: \"\", error: false };\n    try {\n      itemData = (await AddMediaSourceAisWs(\n        this.hass,\n        this.mediaCategory,\n        this.mediaName,\n        this.mediaType,\n        this.mediaStreamUrl,\n        this.mediaImageUrl,\n        this.mediaShare\n      )) as AisAnswer;\n    } catch {\n      this._loading = false;\n    }\n    this._loading = false;\n    return itemData;\n  }\n\n  private async _handleAddMedia(): Promise<void> {\n    //\n    const aisAnswer = await this._addMediaToAis();\n    if (aisAnswer.error) {\n      await showAlertDialog(this, {\n        title: \"AIS\",\n        text: aisAnswer.message,\n      });\n      return;\n    }\n\n    // the new url was found\n    const confirmed = await showConfirmationDialog(this, {\n      title: \"AIS\",\n      text: aisAnswer.message + \" Czy chcesz dodać kolejne media?\",\n      confirmText: \"TAK\",\n      dismissText: \"NIE\",\n    });\n\n    if (confirmed) {\n      // clear\n      this.mediaCategory = \"radio\";\n      this.mediaName = \"\";\n      this.mediaType = \"\";\n      this.mediaStreamUrl = \"\";\n      this.mediaImageUrl = \"\";\n      this.mediaShare = false;\n    } else {\n      // close and exit\n      this.closeDialog();\n    }\n  }\n\n  private _isAudioPlaying(): boolean {\n    if (this._aisMediaInfo?.attributes.media_content_id) {\n      return true;\n    }\n    return false;\n  }\n\n  private _canSourceBeAdded(): boolean {\n    if (this.mediaName.length < 3) {\n      return false;\n    }\n    if (this.mediaType.length < 3) {\n      return false;\n    }\n    if (this.mediaStreamUrl.length < 10) {\n      return false;\n    }\n    return true;\n  }\n\n  private _mediaCategoryChanged(ev): void {\n    const newVal = ev.detail.value;\n    if (newVal !== this.mediaCategory) {\n      this.mediaCategory = newVal;\n      if (newVal === \"radio\") {\n        this.mediaNamePlaceholder = \"Nazwa (komenda: Włącz radio nazwa)\";\n        this.mediaTypePlaceholder = \"Typ radia\";\n        this.mediaUrlPlaceholder = \"Adres URL Strumienia\";\n        this.mediaChips = [];\n        const options = this.hass.states[\"input_select.radio_type\"].attributes\n          .options;\n        options.forEach((element) => {\n          if (\n            !element.startsWith(\"Moje\") &&\n            !element.startsWith(\"Udostępnione\")\n          ) {\n            this.mediaChips.push(element);\n          }\n        });\n      } else if (newVal === \"podcast\") {\n        this.mediaNamePlaceholder = \"Nazwa (komenda: Włącz podcast nazwa)\";\n        this.mediaTypePlaceholder = \"Typ podcasta\";\n        this.mediaUrlPlaceholder = \"Adres URL Kanału RSS (rss feed)\";\n        this.mediaChips = [];\n        const options = this.hass.states[\"input_select.podcast_type\"].attributes\n          .options;\n        options.forEach((element) => {\n          if (\n            !element.startsWith(\"Moje\") &&\n            !element.startsWith(\"Udostępnione\")\n          ) {\n            this.mediaChips.push(element);\n          }\n        });\n      }\n    }\n  }\n\n  private _mediaTypeChanged(ev): void {\n    const newVal = ev.detail.value;\n    if (newVal !== this.mediaType) {\n      this.mediaType = newVal;\n    }\n  }\n\n  private _mediaTypePicket(ev): void {\n    const newIdx = ev.detail.index;\n    const newType = this.mediaChips[newIdx];\n    if (newType !== this.mediaType) {\n      this.mediaType = newType;\n    }\n  }\n\n  private _mediaStreamUrlChanged(ev): void {\n    const newVal = ev.detail.value;\n    if (newVal !== this.mediaStreamUrl) {\n      this.mediaStreamUrl = newVal;\n    }\n  }\n\n  private _mediaImageUrlChanged(ev): void {\n    const newVal = ev.detail.value;\n    if (newVal !== this.mediaImageUrl) {\n      this.mediaImageUrl = newVal;\n    }\n  }\n\n  private _mediaShareChanged(ev): void {\n    const newVal = ev.target.checked;\n    if (newVal !== this.mediaShare) {\n      this.mediaShare = newVal;\n    }\n  }\n\n  private _mediaNameChanged(ev): void {\n    const newVal = ev.detail.value;\n    if (newVal !== this.mediaName) {\n      this.mediaName = newVal;\n    }\n  }\n\n  static get styles(): CSSResultGroup[] {\n    return [\n      haStyleDialog,\n      css`\n        ha-dialog {\n          --dialog-content-padding: 0 24px 20px;\n        }\n        div.sourceCheckButton {\n          text-align: center;\n        }\n        div.WorkInProgress {\n          text-align: center;\n        }\n        div.AisGithub {\n          text-align: right;\n        }\n        img {\n          max-width: 500px;\n          max-height: 300px;\n        }\n        span.aisUrl {\n          word-wrap: break-word;\n        }\n        ha-circular-progress {\n          --mdc-theme-primary: var(--primary-color);\n          display: flex;\n          justify-content: center;\n          margin-top: 40px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-dialog-add-media-source-ais\": HuiDialogAddMediaSourceAis;\n  }\n}\n"],"names":[],"sourceRoot":""}