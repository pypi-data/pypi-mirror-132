{"version":3,"file":"072431de.js","mappings":";AAoBA;AACA;;AAfA;;;;;;;;;;;;;;;AAAA;;;ACiEA;AACA;AACA;AACA;AAGA;AAGA;;;;AAIA;AACA;AACA;AACA;;;AAKA;AACA;;AAEA;AACA;;;AAKA;AACA;;AAEA;AACA;;;AAKA;AACA;;AAEA;AACA;;AAIA;;AAGA;AACA;;AAEA;AACA;;;;AAMA;AACA;AACA;;;;AAIA;;;AAKA;;;;;;;;;;;;;;;;AAlIA;;;ACqCA;AACA;AACA;AACA;AAGA;AAGA;;;;AAIA;AACA;AACA;AACA;;;;;;;;;;AAvDA;;;ACkDA;AACA;AACA;AACA;AAGA;AAGA;;;;AAIA;AACA;AACA;AACA;;;AAKA;;;AAGA;AACA;;;AAGA;;;AAKA;;;AAKA;;;;;;;;;;;AAtFA;;;AC+DA;AACA;AACA;AACA;AAGA;AAGA;;;;AAIA;AACA;AACA;AACA;;;AAKA;AACA;;AAEA;AACA;;;AAKA;AACA;;AAEA;AACA;;AAIA;;AAGA;;AAIA;AACA;;;AAGA;;;AAKA;;;;;AAOA;AACA;;AAEA;AACA;;;;AAMA;AACA;AACA;AACA;;AAIA;;;;;;AA7IA;;;ACiDA;AACA;AACA;AACA;AAGA;AAGA;;;;AAIA;AACA;AACA;AACA;;AAIA;AAGA;;AAIA;;AAEA;AACA;AAGA;;;;AAIA;;AAIA;;;;;;;AASA;AAGA;;AAEA;AACA;;;;;;;;;;;;;;;;AArGA;;;ACkDA;AACA;AACA;AACA;AAGA;AAGA;;;;AAIA;AACA;AACA;AACA;;AAIA;;AAGA;AACA;;;;AAIA;AACA;;;AAKA;AACA;;;;AAIA;AACA;;;AAKA;;AAIA;AACA;;;AAGA;;;AAKA;;;;;AAOA;AACA;AACA;AACA;;AAIA;;;;;;;;;AA9HA;;;ACwCA;AACA;AACA;AACA;AAGA;AAGA;;;;AAIA;AACA;AACA;AACA;;;AAKA;AACA;AACA;AACA;;;;;;;AAnEA","sources":["webpack://home-assistant-frontend/./src/components/ha-icon-button.ts","webpack://home-assistant-frontend/./src/panels/config/helpers/forms/ha-counter-form.ts","webpack://home-assistant-frontend/./src/panels/config/helpers/forms/ha-input_boolean-form.ts","webpack://home-assistant-frontend/./src/panels/config/helpers/forms/ha-input_datetime-form.ts","webpack://home-assistant-frontend/./src/panels/config/helpers/forms/ha-input_number-form.ts","webpack://home-assistant-frontend/./src/panels/config/helpers/forms/ha-input_select-form.ts","webpack://home-assistant-frontend/./src/panels/config/helpers/forms/ha-input_text-form.ts","webpack://home-assistant-frontend/./src/panels/config/helpers/forms/ha-timer-form.ts"],"sourcesContent":["import \"@material/mwc-icon-button\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport \"./ha-icon\";\n\n@customElement(\"ha-icon-button\")\nexport class HaIconButton extends LitElement {\n  @property({ type: Boolean, reflect: true }) disabled = false;\n\n  @property({ type: String }) icon = \"\";\n\n  @property({ type: String }) label = \"\";\n\n  static shadowRootOptions: ShadowRootInit = {\n    mode: \"open\",\n    delegatesFocus: true,\n  };\n\n  protected render(): TemplateResult {\n    return html`\n      <mwc-icon-button .label=${this.label} .disabled=${this.disabled}>\n        <ha-icon .icon=${this.icon}></ha-icon>\n      </mwc-icon-button>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: inline-block;\n        outline: none;\n      }\n      :host([disabled]) {\n        pointer-events: none;\n      }\n      mwc-icon-button {\n        --mdc-theme-on-primary: currentColor;\n        --mdc-theme-text-disabled-on-light: var(--disabled-text-color);\n      }\n      ha-icon {\n        --ha-icon-display: inline;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-icon-button\": HaIconButton;\n  }\n}\n","import \"@polymer/paper-input/paper-input\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport \"../../../../components/ha-icon-input\";\nimport \"../../../../components/ha-switch\";\nimport type { HaSwitch } from \"../../../../components/ha-switch\";\nimport { Counter } from \"../../../../data/counter\";\nimport { haStyle } from \"../../../../resources/styles\";\nimport { HomeAssistant } from \"../../../../types\";\n\n@customElement(\"ha-counter-form\")\nclass HaCounterForm extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public new?: boolean;\n\n  private _item?: Partial<Counter>;\n\n  @state() private _name!: string;\n\n  @state() private _icon!: string;\n\n  @state() private _maximum?: number;\n\n  @state() private _minimum?: number;\n\n  @state() private _restore?: boolean;\n\n  @state() private _initial?: number;\n\n  @state() private _step?: number;\n\n  set item(item: Counter) {\n    this._item = item;\n    if (item) {\n      this._name = item.name || \"\";\n      this._icon = item.icon || \"\";\n      this._maximum = item.maximum ?? undefined;\n      this._minimum = item.minimum ?? undefined;\n      this._restore = item.restore ?? true;\n      this._step = item.step ?? 1;\n      this._initial = item.initial ?? 0;\n    } else {\n      this._name = \"\";\n      this._icon = \"\";\n      this._maximum = undefined;\n      this._minimum = undefined;\n      this._restore = true;\n      this._step = 1;\n      this._initial = 0;\n    }\n  }\n\n  public focus() {\n    this.updateComplete.then(() =>\n      (\n        this.shadowRoot?.querySelector(\"[dialogInitialFocus]\") as HTMLElement\n      )?.focus()\n    );\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass) {\n      return html``;\n    }\n    const nameInvalid = !this._name || this._name.trim() === \"\";\n\n    return html`\n      <div class=\"form\">\n        <paper-input\n          .value=${this._name}\n          .configValue=${\"name\"}\n          @value-changed=${this._valueChanged}\n          .label=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.generic.name\"\n          )}\n          .errorMessage=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.required_error_msg\"\n          )}\n          .invalid=${nameInvalid}\n          dialogInitialFocus\n        ></paper-input>\n        <ha-icon-input\n          .value=${this._icon}\n          .configValue=${\"icon\"}\n          @value-changed=${this._valueChanged}\n          .label=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.generic.icon\"\n          )}\n        ></ha-icon-input>\n        <paper-input\n          .value=${this._minimum}\n          .configValue=${\"minimum\"}\n          type=\"number\"\n          @value-changed=${this._valueChanged}\n          .label=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.counter.minimum\"\n          )}\n        ></paper-input>\n        <paper-input\n          .value=${this._maximum}\n          .configValue=${\"maximum\"}\n          type=\"number\"\n          @value-changed=${this._valueChanged}\n          .label=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.counter.maximum\"\n          )}\n        ></paper-input>\n        <paper-input\n          .value=${this._initial}\n          .configValue=${\"initial\"}\n          type=\"number\"\n          @value-changed=${this._valueChanged}\n          .label=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.counter.initial\"\n          )}\n        ></paper-input>\n        ${this.hass.userData?.showAdvanced\n          ? html`\n              <paper-input\n                .value=${this._step}\n                .configValue=${\"step\"}\n                type=\"number\"\n                @value-changed=${this._valueChanged}\n                .label=${this.hass!.localize(\n                  \"ui.dialogs.helper_settings.counter.step\"\n                )}\n              ></paper-input>\n              <div class=\"row\">\n                <ha-switch\n                  .checked=${this._restore}\n                  .configValue=${\"restore\"}\n                  @change=${this._valueChanged}\n                >\n                </ha-switch>\n                <div>\n                  ${this.hass.localize(\n                    \"ui.dialogs.helper_settings.counter.restore\"\n                  )}\n                </div>\n              </div>\n            `\n          : \"\"}\n      </div>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent) {\n    if (!this.new && !this._item) {\n      return;\n    }\n    ev.stopPropagation();\n    const target = ev.target as any;\n    const configValue = target.configValue;\n    const value =\n      target.type === \"number\"\n        ? ev.detail.value !== \"\"\n          ? Number(ev.detail.value)\n          : undefined\n        : target.localName === \"ha-switch\"\n        ? (ev.target as HaSwitch).checked\n        : ev.detail.value;\n    if (this[`_${configValue}`] === value) {\n      return;\n    }\n    const newValue = { ...this._item };\n    if (value === undefined || value === \"\") {\n      delete newValue[configValue];\n    } else {\n      newValue[configValue] = value;\n    }\n    fireEvent(this, \"value-changed\", {\n      value: newValue,\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        .form {\n          color: var(--primary-text-color);\n        }\n        .row {\n          margin-top: 12px;\n          margin-bottom: 12px;\n          color: var(--primary-text-color);\n          display: flex;\n          align-items: center;\n        }\n        .row div {\n          margin-left: 16px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-counter-form\": HaCounterForm;\n  }\n}\n","import \"@polymer/paper-input/paper-input\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport \"../../../../components/ha-icon-input\";\nimport { InputBoolean } from \"../../../../data/input_boolean\";\nimport { haStyle } from \"../../../../resources/styles\";\nimport { HomeAssistant } from \"../../../../types\";\n\n@customElement(\"ha-input_boolean-form\")\nclass HaInputBooleanForm extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public new?: boolean;\n\n  private _item?: InputBoolean;\n\n  @state() private _name!: string;\n\n  @state() private _icon!: string;\n\n  set item(item: InputBoolean) {\n    this._item = item;\n    if (item) {\n      this._name = item.name || \"\";\n      this._icon = item.icon || \"\";\n    } else {\n      this._name = \"\";\n      this._icon = \"\";\n    }\n  }\n\n  public focus() {\n    this.updateComplete.then(() =>\n      (\n        this.shadowRoot?.querySelector(\"[dialogInitialFocus]\") as HTMLElement\n      )?.focus()\n    );\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass) {\n      return html``;\n    }\n    const nameInvalid = !this._name || this._name.trim() === \"\";\n\n    return html`\n      <div class=\"form\">\n        <paper-input\n          .value=${this._name}\n          .configValue=${\"name\"}\n          @value-changed=${this._valueChanged}\n          .label=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.generic.name\"\n          )}\n          .errorMessage=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.required_error_msg\"\n          )}\n          .invalid=${nameInvalid}\n          dialogInitialFocus\n        ></paper-input>\n        <ha-icon-input\n          .value=${this._icon}\n          .configValue=${\"icon\"}\n          @value-changed=${this._valueChanged}\n          .label=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.generic.icon\"\n          )}\n        ></ha-icon-input>\n      </div>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent) {\n    if (!this.new && !this._item) {\n      return;\n    }\n    ev.stopPropagation();\n    const configValue = (ev.target as any).configValue;\n    const value = ev.detail.value;\n    if (this[`_${configValue}`] === value) {\n      return;\n    }\n    const newValue = { ...this._item };\n    if (!value) {\n      delete newValue[configValue];\n    } else {\n      newValue[configValue] = ev.detail.value;\n    }\n    fireEvent(this, \"value-changed\", {\n      value: newValue,\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        .form {\n          color: var(--primary-text-color);\n        }\n        .row {\n          padding: 16px 0;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-input_boolean-form\": HaInputBooleanForm;\n  }\n}\n","import \"@polymer/paper-input/paper-input\";\nimport \"@polymer/paper-radio-button/paper-radio-button\";\nimport \"@polymer/paper-radio-group/paper-radio-group\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport \"../../../../components/ha-icon-input\";\nimport { InputDateTime } from \"../../../../data/input_datetime\";\nimport { haStyle } from \"../../../../resources/styles\";\nimport { HomeAssistant } from \"../../../../types\";\n\n@customElement(\"ha-input_datetime-form\")\nclass HaInputDateTimeForm extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public new?: boolean;\n\n  private _item?: InputDateTime;\n\n  @state() private _name!: string;\n\n  @state() private _icon!: string;\n\n  @state() private _mode!: \"date\" | \"time\" | \"datetime\";\n\n  set item(item: InputDateTime) {\n    this._item = item;\n    if (item) {\n      this._name = item.name || \"\";\n      this._icon = item.icon || \"\";\n      this._mode =\n        item.has_time && item.has_date\n          ? \"datetime\"\n          : item.has_time\n          ? \"time\"\n          : \"date\";\n    } else {\n      this._name = \"\";\n      this._icon = \"\";\n      this._mode = \"date\";\n    }\n  }\n\n  public focus() {\n    this.updateComplete.then(() =>\n      (\n        this.shadowRoot?.querySelector(\"[dialogInitialFocus]\") as HTMLElement\n      )?.focus()\n    );\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass) {\n      return html``;\n    }\n    const nameInvalid = !this._name || this._name.trim() === \"\";\n\n    return html`\n      <div class=\"form\">\n        <paper-input\n          .value=${this._name}\n          .configValue=${\"name\"}\n          @value-changed=${this._valueChanged}\n          .label=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.generic.name\"\n          )}\n          .errorMessage=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.required_error_msg\"\n          )}\n          .invalid=${nameInvalid}\n          dialogInitialFocus\n        ></paper-input>\n        <ha-icon-input\n          .value=${this._icon}\n          .configValue=${\"icon\"}\n          @value-changed=${this._valueChanged}\n          .label=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.generic.icon\"\n          )}\n        ></ha-icon-input>\n        <br />\n        ${this.hass.localize(\"ui.dialogs.helper_settings.input_datetime.mode\")}:\n        <br />\n        <paper-radio-group\n          .selected=${this._mode}\n          @selected-changed=${this._modeChanged}\n        >\n          <paper-radio-button name=\"date\">\n            ${this.hass.localize(\n              \"ui.dialogs.helper_settings.input_datetime.date\"\n            )}\n          </paper-radio-button>\n          <paper-radio-button name=\"time\">\n            ${this.hass.localize(\n              \"ui.dialogs.helper_settings.input_datetime.time\"\n            )}\n          </paper-radio-button>\n          <paper-radio-button name=\"datetime\">\n            ${this.hass.localize(\n              \"ui.dialogs.helper_settings.input_datetime.datetime\"\n            )}\n          </paper-radio-button>\n        </paper-radio-group>\n      </div>\n    `;\n  }\n\n  private _modeChanged(ev: CustomEvent) {\n    const mode = ev.detail.value;\n    fireEvent(this, \"value-changed\", {\n      value: {\n        ...this._item,\n        has_time: [\"time\", \"datetime\"].includes(mode),\n        has_date: [\"date\", \"datetime\"].includes(mode),\n      },\n    });\n  }\n\n  private _valueChanged(ev: CustomEvent) {\n    if (!this.new && !this._item) {\n      return;\n    }\n    ev.stopPropagation();\n    const configValue = (ev.target as any).configValue;\n    const value = ev.detail.value;\n    if (this[`_${configValue}`] === value) {\n      return;\n    }\n    const newValue = { ...this._item };\n    if (!value) {\n      delete newValue[configValue];\n    } else {\n      newValue[configValue] = ev.detail.value;\n    }\n    fireEvent(this, \"value-changed\", {\n      value: newValue,\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        .form {\n          color: var(--primary-text-color);\n        }\n        .row {\n          padding: 16px 0;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-input_datetime-form\": HaInputDateTimeForm;\n  }\n}\n","import \"@polymer/paper-input/paper-input\";\nimport \"@polymer/paper-radio-button/paper-radio-button\";\nimport \"@polymer/paper-radio-group/paper-radio-group\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport \"../../../../components/ha-icon-input\";\nimport { InputNumber } from \"../../../../data/input_number\";\nimport { haStyle } from \"../../../../resources/styles\";\nimport { HomeAssistant } from \"../../../../types\";\n\n@customElement(\"ha-input_number-form\")\nclass HaInputNumberForm extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public new?: boolean;\n\n  private _item?: Partial<InputNumber>;\n\n  @state() private _name!: string;\n\n  @state() private _icon!: string;\n\n  @state() private _max?: number;\n\n  @state() private _min?: number;\n\n  @state() private _mode?: string;\n\n  @state() private _step?: number;\n\n  // eslint-disable-next-line: variable-name\n  @state() private _unit_of_measurement?: string;\n\n  set item(item: InputNumber) {\n    this._item = item;\n    if (item) {\n      this._name = item.name || \"\";\n      this._icon = item.icon || \"\";\n      this._max = item.max ?? 100;\n      this._min = item.min ?? 0;\n      this._mode = item.mode || \"slider\";\n      this._step = item.step ?? 1;\n      this._unit_of_measurement = item.unit_of_measurement;\n    } else {\n      this._item = {\n        min: 0,\n        max: 100,\n      };\n      this._name = \"\";\n      this._icon = \"\";\n      this._max = 100;\n      this._min = 0;\n      this._mode = \"slider\";\n      this._step = 1;\n    }\n  }\n\n  public focus() {\n    this.updateComplete.then(() =>\n      (\n        this.shadowRoot?.querySelector(\"[dialogInitialFocus]\") as HTMLElement\n      )?.focus()\n    );\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass) {\n      return html``;\n    }\n    const nameInvalid = !this._name || this._name.trim() === \"\";\n\n    return html`\n      <div class=\"form\">\n        <paper-input\n          .value=${this._name}\n          .configValue=${\"name\"}\n          @value-changed=${this._valueChanged}\n          .label=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.generic.name\"\n          )}\n          .errorMessage=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.required_error_msg\"\n          )}\n          .invalid=${nameInvalid}\n          dialogInitialFocus\n        ></paper-input>\n        <ha-icon-input\n          .value=${this._icon}\n          .configValue=${\"icon\"}\n          @value-changed=${this._valueChanged}\n          .label=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.generic.icon\"\n          )}\n        ></ha-icon-input>\n        <paper-input\n          .value=${this._min}\n          .configValue=${\"min\"}\n          type=\"number\"\n          @value-changed=${this._valueChanged}\n          .label=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.input_number.min\"\n          )}\n        ></paper-input>\n        <paper-input\n          .value=${this._max}\n          .configValue=${\"max\"}\n          type=\"number\"\n          @value-changed=${this._valueChanged}\n          .label=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.input_number.max\"\n          )}\n        ></paper-input>\n        ${this.hass.userData?.showAdvanced\n          ? html`\n              <div class=\"layout horizontal center justified\">\n                ${this.hass.localize(\n                  \"ui.dialogs.helper_settings.input_number.mode\"\n                )}\n                <paper-radio-group\n                  .selected=${this._mode}\n                  @selected-changed=${this._modeChanged}\n                >\n                  <paper-radio-button name=\"slider\">\n                    ${this.hass.localize(\n                      \"ui.dialogs.helper_settings.input_number.slider\"\n                    )}\n                  </paper-radio-button>\n                  <paper-radio-button name=\"box\">\n                    ${this.hass.localize(\n                      \"ui.dialogs.helper_settings.input_number.box\"\n                    )}\n                  </paper-radio-button>\n                </paper-radio-group>\n              </div>\n              <paper-input\n                .value=${this._step}\n                .configValue=${\"step\"}\n                type=\"number\"\n                @value-changed=${this._valueChanged}\n                .label=${this.hass!.localize(\n                  \"ui.dialogs.helper_settings.input_number.step\"\n                )}\n              ></paper-input>\n\n              <paper-input\n                .value=${this._unit_of_measurement}\n                .configValue=${\"unit_of_measurement\"}\n                @value-changed=${this._valueChanged}\n                .label=${this.hass!.localize(\n                  \"ui.dialogs.helper_settings.input_number.unit_of_measurement\"\n                )}\n              ></paper-input>\n            `\n          : \"\"}\n      </div>\n    `;\n  }\n\n  private _modeChanged(ev: CustomEvent) {\n    fireEvent(this, \"value-changed\", {\n      value: { ...this._item, mode: ev.detail.value },\n    });\n  }\n\n  private _valueChanged(ev: CustomEvent) {\n    if (!this.new && !this._item) {\n      return;\n    }\n    ev.stopPropagation();\n    const target = ev.target as any;\n    const configValue = target.configValue;\n    const value =\n      target.type === \"number\" ? Number(ev.detail.value) : ev.detail.value;\n    if (this[`_${configValue}`] === value) {\n      return;\n    }\n    const newValue = { ...this._item };\n    if (value === undefined || value === \"\") {\n      delete newValue[configValue];\n    } else {\n      newValue[configValue] = ev.detail.value;\n    }\n    fireEvent(this, \"value-changed\", {\n      value: newValue,\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        .form {\n          color: var(--primary-text-color);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-input_number-form\": HaInputNumberForm;\n  }\n}\n","import \"@material/mwc-button/mwc-button\";\nimport \"@polymer/paper-input/paper-input\";\nimport type { PaperInputElement } from \"@polymer/paper-input/paper-input\";\nimport \"@polymer/paper-item/paper-item\";\nimport \"@polymer/paper-item/paper-item-body\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state, query } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport \"../../../../components/ha-icon-button\";\nimport \"../../../../components/ha-icon-input\";\nimport type { InputSelect } from \"../../../../data/input_select\";\nimport { showConfirmationDialog } from \"../../../../dialogs/generic/show-dialog-box\";\nimport { haStyle } from \"../../../../resources/styles\";\nimport type { HomeAssistant } from \"../../../../types\";\n\n@customElement(\"ha-input_select-form\")\nclass HaInputSelectForm extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public new?: boolean;\n\n  private _item?: InputSelect;\n\n  @state() private _name!: string;\n\n  @state() private _icon!: string;\n\n  @state() private _options: string[] = [];\n\n  @query(\"#option_input\", true) private _optionInput?: PaperInputElement;\n\n  set item(item: InputSelect) {\n    this._item = item;\n    if (item) {\n      this._name = item.name || \"\";\n      this._icon = item.icon || \"\";\n      this._options = item.options || [];\n    } else {\n      this._name = \"\";\n      this._icon = \"\";\n      this._options = [];\n    }\n  }\n\n  public focus() {\n    this.updateComplete.then(() =>\n      (\n        this.shadowRoot?.querySelector(\"[dialogInitialFocus]\") as HTMLElement\n      )?.focus()\n    );\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass) {\n      return html``;\n    }\n    const nameInvalid = !this._name || this._name.trim() === \"\";\n\n    return html`\n      <div class=\"form\">\n        <paper-input\n          .value=${this._name}\n          .configValue=${\"name\"}\n          @value-changed=${this._valueChanged}\n          .label=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.generic.name\"\n          )}\n          .errorMessage=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.required_error_msg\"\n          )}\n          .invalid=${nameInvalid}\n          dialogInitialFocus\n        ></paper-input>\n        <ha-icon-input\n          .value=${this._icon}\n          .configValue=${\"icon\"}\n          @value-changed=${this._valueChanged}\n          .label=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.generic.icon\"\n          )}\n        ></ha-icon-input>\n        ${this.hass!.localize(\n          \"ui.dialogs.helper_settings.input_select.options\"\n        )}:\n        ${this._options.length\n          ? this._options.map(\n              (option, index) => html`\n                <paper-item class=\"option\">\n                  <paper-item-body> ${option} </paper-item-body>\n                  <ha-icon-button\n                    .index=${index}\n                    .title=${this.hass.localize(\n                      \"ui.dialogs.helper_settings.input_select.remove_option\"\n                    )}\n                    @click=${this._removeOption}\n                    icon=\"hass:delete\"\n                  ></ha-icon-button>\n                </paper-item>\n              `\n            )\n          : html`\n              <paper-item>\n                ${this.hass!.localize(\n                  \"ui.dialogs.helper_settings.input_select.no_options\"\n                )}\n              </paper-item>\n            `}\n        <div class=\"layout horizontal bottom\">\n          <paper-input\n            class=\"flex-auto\"\n            id=\"option_input\"\n            .label=${this.hass!.localize(\n              \"ui.dialogs.helper_settings.input_select.add_option\"\n            )}\n            @keydown=${this._handleKeyAdd}\n          ></paper-input>\n          <mwc-button @click=${this._addOption}\n            >${this.hass!.localize(\n              \"ui.dialogs.helper_settings.input_select.add\"\n            )}</mwc-button\n          >\n        </div>\n      </div>\n    `;\n  }\n\n  private _handleKeyAdd(ev: KeyboardEvent) {\n    ev.stopPropagation();\n    if (ev.keyCode !== 13) {\n      return;\n    }\n    this._addOption();\n  }\n\n  private _addOption() {\n    const input = this._optionInput;\n    if (!input || !input.value) {\n      return;\n    }\n    fireEvent(this, \"value-changed\", {\n      value: { ...this._item, options: [...this._options, input.value] },\n    });\n    input.value = \"\";\n  }\n\n  private async _removeOption(ev: Event) {\n    const index = (ev.target as any).index;\n    if (\n      !(await showConfirmationDialog(this, {\n        title: \"Delete this item?\",\n        text: \"Are you sure you want to delete this item?\",\n      }))\n    ) {\n      return;\n    }\n    const options = [...this._options];\n    options.splice(index, 1);\n    fireEvent(this, \"value-changed\", {\n      value: { ...this._item, options },\n    });\n  }\n\n  private _valueChanged(ev: CustomEvent) {\n    if (!this.new && !this._item) {\n      return;\n    }\n    ev.stopPropagation();\n    const configValue = (ev.target as any).configValue;\n    const value = ev.detail.value;\n    if (this[`_${configValue}`] === value) {\n      return;\n    }\n    const newValue = { ...this._item };\n    if (!value) {\n      delete newValue[configValue];\n    } else {\n      newValue[configValue] = ev.detail.value;\n    }\n    fireEvent(this, \"value-changed\", {\n      value: newValue,\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        .form {\n          color: var(--primary-text-color);\n        }\n        .option {\n          border: 1px solid var(--divider-color);\n          border-radius: 4px;\n          margin-top: 4px;\n        }\n        mwc-button {\n          margin-left: 8px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-input_select-form\": HaInputSelectForm;\n  }\n}\n","import \"@polymer/paper-input/paper-input\";\nimport \"@polymer/paper-radio-button/paper-radio-button\";\nimport \"@polymer/paper-radio-group/paper-radio-group\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport \"../../../../components/ha-icon-input\";\nimport { InputText } from \"../../../../data/input_text\";\nimport { haStyle } from \"../../../../resources/styles\";\nimport { HomeAssistant } from \"../../../../types\";\n\n@customElement(\"ha-input_text-form\")\nclass HaInputTextForm extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public new?: boolean;\n\n  private _item?: InputText;\n\n  @state() private _name!: string;\n\n  @state() private _icon!: string;\n\n  @state() private _max?: number;\n\n  @state() private _min?: number;\n\n  @state() private _mode?: string;\n\n  @state() private _pattern?: string;\n\n  set item(item: InputText) {\n    this._item = item;\n    if (item) {\n      this._name = item.name || \"\";\n      this._icon = item.icon || \"\";\n      this._max = item.max || 100;\n      this._min = item.min || 0;\n      this._mode = item.mode || \"text\";\n      this._pattern = item.pattern;\n    } else {\n      this._name = \"\";\n      this._icon = \"\";\n      this._max = 100;\n      this._min = 0;\n      this._mode = \"text\";\n    }\n  }\n\n  public focus() {\n    this.updateComplete.then(() =>\n      (\n        this.shadowRoot?.querySelector(\"[dialogInitialFocus]\") as HTMLElement\n      )?.focus()\n    );\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass) {\n      return html``;\n    }\n    const nameInvalid = !this._name || this._name.trim() === \"\";\n\n    return html`\n      <div class=\"form\">\n        <paper-input\n          .value=${this._name}\n          .configValue=${\"name\"}\n          @value-changed=${this._valueChanged}\n          .label=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.generic.name\"\n          )}\n          .errorMessage=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.required_error_msg\"\n          )}\n          .invalid=${nameInvalid}\n          dialogInitialFocus\n        ></paper-input>\n        <ha-icon-input\n          .value=${this._icon}\n          .configValue=${\"icon\"}\n          @value-changed=${this._valueChanged}\n          .label=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.generic.icon\"\n          )}\n        ></ha-icon-input>\n        ${this.hass.userData?.showAdvanced\n          ? html`\n              <paper-input\n                .value=${this._min}\n                .configValue=${\"min\"}\n                type=\"number\"\n                min=\"0\"\n                max=\"255\"\n                @value-changed=${this._valueChanged}\n                .label=${this.hass!.localize(\n                  \"ui.dialogs.helper_settings.input_text.min\"\n                )}\n              ></paper-input>\n              <paper-input\n                .value=${this._max}\n                .configValue=${\"max\"}\n                min=\"0\"\n                max=\"255\"\n                type=\"number\"\n                @value-changed=${this._valueChanged}\n                .label=${this.hass!.localize(\n                  \"ui.dialogs.helper_settings.input_text.max\"\n                )}\n              ></paper-input>\n              <div class=\"layout horizontal center justified\">\n                ${this.hass.localize(\n                  \"ui.dialogs.helper_settings.input_text.mode\"\n                )}\n                <paper-radio-group\n                  .selected=${this._mode}\n                  @selected-changed=${this._modeChanged}\n                >\n                  <paper-radio-button name=\"text\">\n                    ${this.hass.localize(\n                      \"ui.dialogs.helper_settings.input_text.text\"\n                    )}\n                  </paper-radio-button>\n                  <paper-radio-button name=\"password\">\n                    ${this.hass.localize(\n                      \"ui.dialogs.helper_settings.input_text.password\"\n                    )}\n                  </paper-radio-button>\n                </paper-radio-group>\n              </div>\n              <paper-input\n                .value=${this._pattern}\n                .configValue=${\"pattern\"}\n                @value-changed=${this._valueChanged}\n                .label=${this.hass!.localize(\n                  \"ui.dialogs.helper_settings.input_text.pattern\"\n                )}\n              ></paper-input>\n            `\n          : \"\"}\n      </div>\n    `;\n  }\n\n  private _modeChanged(ev: CustomEvent) {\n    fireEvent(this, \"value-changed\", {\n      value: { ...this._item, mode: ev.detail.value },\n    });\n  }\n\n  private _valueChanged(ev: CustomEvent) {\n    if (!this.new && !this._item) {\n      return;\n    }\n    ev.stopPropagation();\n    const configValue = (ev.target as any).configValue;\n    const value = ev.detail.value;\n    if (this[`_${configValue}`] === value) {\n      return;\n    }\n    const newValue = { ...this._item };\n    if (!value) {\n      delete newValue[configValue];\n    } else {\n      newValue[configValue] = ev.detail.value;\n    }\n    fireEvent(this, \"value-changed\", {\n      value: newValue,\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        .form {\n          color: var(--primary-text-color);\n        }\n        .row {\n          padding: 16px 0;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-input_text-form\": HaInputTextForm;\n  }\n}\n","import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport \"../../../../components/ha-icon-input\";\nimport { DurationDict, Timer } from \"../../../../data/timer\";\nimport { haStyle } from \"../../../../resources/styles\";\nimport { HomeAssistant } from \"../../../../types\";\n\n@customElement(\"ha-timer-form\")\nclass HaTimerForm extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public new?: boolean;\n\n  private _item?: Timer;\n\n  @state() private _name!: string;\n\n  @state() private _icon!: string;\n\n  @state() private _duration!: string | number | DurationDict;\n\n  set item(item: Timer) {\n    this._item = item;\n    if (item) {\n      this._name = item.name || \"\";\n      this._icon = item.icon || \"\";\n      this._duration = item.duration || \"\";\n    } else {\n      this._name = \"\";\n      this._icon = \"\";\n      this._duration = \"00:00:00\";\n    }\n  }\n\n  public focus() {\n    this.updateComplete.then(() =>\n      (\n        this.shadowRoot?.querySelector(\"[dialogInitialFocus]\") as HTMLElement\n      )?.focus()\n    );\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass) {\n      return html``;\n    }\n    const nameInvalid = !this._name || this._name.trim() === \"\";\n\n    return html`\n      <div class=\"form\">\n        <paper-input\n          .value=${this._name}\n          .configValue=${\"name\"}\n          @value-changed=${this._valueChanged}\n          .label=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.generic.name\"\n          )}\n          .errorMessage=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.required_error_msg\"\n          )}\n          .invalid=${nameInvalid}\n          dialogInitialFocus\n        ></paper-input>\n        <ha-icon-input\n          .value=${this._icon}\n          .configValue=${\"icon\"}\n          @value-changed=${this._valueChanged}\n          .label=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.generic.icon\"\n          )}\n        ></ha-icon-input>\n        <paper-input\n          .configValue=${\"duration\"}\n          .value=${this._duration}\n          @value-changed=${this._valueChanged}\n          .label=${this.hass.localize(\n            \"ui.dialogs.helper_settings.timer.duration\"\n          )}\n        ></paper-input>\n      </div>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent) {\n    if (!this.new && !this._item) {\n      return;\n    }\n    ev.stopPropagation();\n    const configValue = (ev.target as any).configValue;\n    const value = ev.detail.value;\n    if (this[`_${configValue}`] === value) {\n      return;\n    }\n    const newValue = { ...this._item };\n    if (!value) {\n      delete newValue[configValue];\n    } else {\n      newValue[configValue] = ev.detail.value;\n    }\n    fireEvent(this, \"value-changed\", {\n      value: newValue,\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        .form {\n          color: var(--primary-text-color);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-timer-form\": HaTimerForm;\n  }\n}\n"],"names":[],"sourceRoot":""}