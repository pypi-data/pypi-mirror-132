{"version":3,"file":"c066414a.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2HA;AC9GA;;AAEA;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQA;ACJA;;AAEA;AACA;;;;AAIA;;;;AAIA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAzBA;;;ACiDA;AACA;;;AAMA;AACA;;;;AAWA;;AAEA;;AAGA;;;AAKA;;AAIA;;;AAIA;AACA;;;;AAMA;;AAIA;AACA;;;;AAQA;;;AAMA;AAGA;;;;AAIA;;AAmBA;AACA;;AAEA;;;;AAIA;AACA;;AAEA;;;AAIA;AAGA;AAEA;AAtCA;;AAGA;AACA;;AAEA;;;AAIA;AAGA;AAEA;;;AA1FA","sources":["webpack://home-assistant-frontend/./node_modules/@polymer/paper-dialog-scrollable/paper-dialog-scrollable.js","webpack://home-assistant-frontend/./src/components/ha-dialog.ts","webpack://home-assistant-frontend/./src/components/ha-expansion-panel.ts","webpack://home-assistant-frontend/./src/panels/config/blueprint/dialog-import-blueprint.ts"],"sourcesContent":["/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\nimport '@polymer/iron-flex-layout/iron-flex-layout.js';\nimport '@polymer/paper-styles/default-theme.js';\n\nimport {PaperDialogBehaviorImpl} from '@polymer/paper-dialog-behavior/paper-dialog-behavior.js';\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\n\n/**\nMaterial design:\n[Dialogs](https://www.google.com/design/spec/components/dialogs.html)\n\n`paper-dialog-scrollable` implements a scrolling area used in a Material Design\ndialog. It shows a divider at the top and/or bottom indicating more content,\ndepending on scroll position. Use this together with elements implementing\n`Polymer.PaperDialogBehavior`.\n\n    <paper-dialog-impl>\n      <h2>Header</h2>\n      <paper-dialog-scrollable>\n        Lorem ipsum...\n      </paper-dialog-scrollable>\n      <div class=\"buttons\">\n        <paper-button>OK</paper-button>\n      </div>\n    </paper-dialog-impl>\n\nIt shows a top divider after scrolling if it is not the first child in its\nparent container, indicating there is more content above. It shows a bottom\ndivider if it is scrollable and it is not the last child in its parent\ncontainer, indicating there is more content below. The bottom divider is hidden\nif it is scrolled to the bottom.\n\nIf `paper-dialog-scrollable` is not a direct child of the element implementing\n`Polymer.PaperDialogBehavior`, remember to set the `dialogElement`:\n\n    <paper-dialog-impl id=\"myDialog\">\n      <h2>Header</h2>\n      <div class=\"my-content-wrapper\">\n        <h4>Sub-header</h4>\n        <paper-dialog-scrollable>\n          Lorem ipsum...\n        </paper-dialog-scrollable>\n      </div>\n      <div class=\"buttons\">\n        <paper-button>OK</paper-button>\n      </div>\n    </paper-dialog-impl>\n\n    <script>\n      var scrollable =\nPolymer.dom(myDialog).querySelector('paper-dialog-scrollable');\n      scrollable.dialogElement = myDialog;\n    </script>\n\n### Styling\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-dialog-scrollable` | Mixin for the scrollable content | {}\n\n@group Paper Elements\n@element paper-dialog-scrollable\n@demo demo/index.html\n@hero hero.svg\n*/\nPolymer({\n  _template: html`\n    <style>\n\n      :host {\n        display: block;\n        @apply --layout-relative;\n      }\n\n      :host(.is-scrolled:not(:first-child))::before {\n        content: '';\n        position: absolute;\n        top: 0;\n        left: 0;\n        right: 0;\n        height: 1px;\n        background: var(--divider-color);\n      }\n\n      :host(.can-scroll:not(.scrolled-to-bottom):not(:last-child))::after {\n        content: '';\n        position: absolute;\n        bottom: 0;\n        left: 0;\n        right: 0;\n        height: 1px;\n        background: var(--divider-color);\n      }\n\n      .scrollable {\n        padding: 0 24px;\n\n        @apply --layout-scroll;\n        @apply --paper-dialog-scrollable;\n      }\n\n      .fit {\n        @apply --layout-fit;\n      }\n    </style>\n\n    <div id=\"scrollable\" class=\"scrollable\" on-scroll=\"updateScrollState\">\n      <slot></slot>\n    </div>\n`,\n\n  is: 'paper-dialog-scrollable',\n\n  properties: {\n\n    /**\n     * The dialog element that implements `Polymer.PaperDialogBehavior`\n     * containing this element.\n     * @type {?Node}\n     */\n    dialogElement: {type: Object}\n\n  },\n\n  /**\n   * Returns the scrolling element.\n   */\n  get scrollTarget() {\n    return this.$.scrollable;\n  },\n\n  ready: function() {\n    this._ensureTarget();\n    this.classList.add('no-padding');\n  },\n\n  attached: function() {\n    this._ensureTarget();\n    requestAnimationFrame(this.updateScrollState.bind(this));\n  },\n\n  updateScrollState: function() {\n    this.toggleClass('is-scrolled', this.scrollTarget.scrollTop > 0);\n    this.toggleClass(\n        'can-scroll',\n        this.scrollTarget.offsetHeight < this.scrollTarget.scrollHeight);\n    this.toggleClass(\n        'scrolled-to-bottom',\n        this.scrollTarget.scrollTop + this.scrollTarget.offsetHeight >=\n            this.scrollTarget.scrollHeight);\n  },\n\n  _ensureTarget: function() {\n    // Read parentElement instead of parentNode in order to skip shadowRoots.\n    this.dialogElement = this.dialogElement || this.parentElement;\n    // Check if dialog implements paper-dialog-behavior. If not, fit\n    // scrollTarget to host.\n    if (this.dialogElement && this.dialogElement.behaviors &&\n        this.dialogElement.behaviors.indexOf(PaperDialogBehaviorImpl) >= 0) {\n      this.dialogElement.sizingTarget = this.scrollTarget;\n      this.scrollTarget.classList.remove('fit');\n    } else if (this.dialogElement) {\n      this.scrollTarget.classList.add('fit');\n    }\n  }\n});\n","import { Dialog } from \"@material/mwc-dialog\";\nimport { mdiClose } from \"@mdi/js\";\nimport { css, CSSResultGroup, html, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport { computeRTLDirection } from \"../common/util/compute_rtl\";\nimport type { HomeAssistant } from \"../types\";\nimport \"@material/mwc-icon-button/mwc-icon-button\";\nimport \"./ha-svg-icon\";\n\nexport const createCloseHeading = (\n  hass: HomeAssistant,\n  title: string | TemplateResult\n) => html`\n  <span class=\"header_title\">${title}</span>\n  <mwc-icon-button\n    aria-label=${hass.localize(\"ui.dialogs.generic.close\")}\n    dialogAction=\"close\"\n    class=\"header_button\"\n    dir=${computeRTLDirection(hass)}\n  >\n    <ha-svg-icon .path=${mdiClose}></ha-svg-icon>\n  </mwc-icon-button>\n`;\n\n@customElement(\"ha-dialog\")\n// @ts-expect-error\nexport class HaDialog extends Dialog {\n  public scrollToPos(x: number, y: number) {\n    this.contentElement.scrollTo(x, y);\n  }\n\n  protected renderHeading() {\n    return html`<slot name=\"heading\"> ${super.renderHeading()} </slot>`;\n  }\n\n  protected static get styles(): CSSResultGroup {\n    return [\n      Dialog.styles,\n      css`\n        .mdc-dialog {\n          --mdc-dialog-scroll-divider-color: var(--divider-color);\n          z-index: var(--dialog-z-index, 7);\n          backdrop-filter: var(--dialog-backdrop-filter, none);\n        }\n        .mdc-dialog__actions {\n          justify-content: var(--justify-action-buttons, flex-end);\n          padding-bottom: max(env(safe-area-inset-bottom), 8px);\n        }\n        .mdc-dialog__container {\n          align-items: var(--vertial-align-dialog, center);\n        }\n        .mdc-dialog__title::before {\n          display: block;\n          height: 20px;\n        }\n        .mdc-dialog .mdc-dialog__content {\n          position: var(--dialog-content-position, relative);\n          padding: var(--dialog-content-padding, 20px 24px);\n        }\n        :host([hideactions]) .mdc-dialog .mdc-dialog__content {\n          padding-bottom: max(\n            var(--dialog-content-padding, 20px),\n            env(safe-area-inset-bottom)\n          );\n        }\n        .mdc-dialog .mdc-dialog__surface {\n          position: var(--dialog-surface-position, relative);\n          top: var(--dialog-surface-top);\n          min-height: var(--mdc-dialog-min-height, auto);\n        }\n        :host([flexContent]) .mdc-dialog .mdc-dialog__content {\n          display: flex;\n          flex-direction: column;\n        }\n        .header_button {\n          position: absolute;\n          right: 16px;\n          top: 10px;\n          text-decoration: none;\n          color: inherit;\n        }\n        .header_title {\n          margin-right: 40px;\n        }\n        [dir=\"rtl\"].header_button {\n          right: auto;\n          left: 16px;\n        }\n        [dir=\"rtl\"].header_title {\n          margin-left: 40px;\n          margin-right: 0px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog\": HaDialog;\n  }\n}\n","import { mdiChevronDown } from \"@mdi/js\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { nextRender } from \"../common/util/render-status\";\nimport \"./ha-svg-icon\";\n\n@customElement(\"ha-expansion-panel\")\nclass HaExpansionPanel extends LitElement {\n  @property({ type: Boolean, reflect: true }) expanded = false;\n\n  @property({ type: Boolean, reflect: true }) outlined = false;\n\n  @property() header?: string;\n\n  @property() secondary?: string;\n\n  @query(\".container\") private _container!: HTMLDivElement;\n\n  protected render(): TemplateResult {\n    return html`\n      <div class=\"summary\" @click=${this._toggleContainer}>\n        <slot class=\"header\" name=\"header\">\n          ${this.header}\n          <slot class=\"secondary\" name=\"secondary\">${this.secondary}</slot>\n        </slot>\n        <ha-svg-icon\n          .path=${mdiChevronDown}\n          class=\"summary-icon ${classMap({ expanded: this.expanded })}\"\n        ></ha-svg-icon>\n      </div>\n      <div\n        class=\"container ${classMap({ expanded: this.expanded })}\"\n        @transitionend=${this._handleTransitionEnd}\n      >\n        <slot></slot>\n      </div>\n    `;\n  }\n\n  private _handleTransitionEnd() {\n    this._container.style.removeProperty(\"height\");\n  }\n\n  private async _toggleContainer(): Promise<void> {\n    const newExpanded = !this.expanded;\n    fireEvent(this, \"expanded-will-change\", { expanded: newExpanded });\n\n    if (newExpanded) {\n      // allow for dynamic content to be rendered\n      await nextRender();\n    }\n\n    const scrollHeight = this._container.scrollHeight;\n    this._container.style.height = `${scrollHeight}px`;\n\n    if (!newExpanded) {\n      setTimeout(() => {\n        this._container.style.height = \"0px\";\n      }, 0);\n    }\n\n    this.expanded = newExpanded;\n    fireEvent(this, \"expanded-changed\", { expanded: this.expanded });\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: block;\n      }\n\n      :host([outlined]) {\n        box-shadow: none;\n        border-width: 1px;\n        border-style: solid;\n        border-color: var(\n          --ha-card-border-color,\n          var(--divider-color, #e0e0e0)\n        );\n        border-radius: var(--ha-card-border-radius, 4px);\n        padding: 0 8px;\n      }\n\n      .summary {\n        display: flex;\n        padding: var(--expansion-panel-summary-padding, 0);\n        min-height: 48px;\n        align-items: center;\n        cursor: pointer;\n        overflow: hidden;\n        font-weight: 500;\n      }\n\n      .summary-icon {\n        transition: transform 150ms cubic-bezier(0.4, 0, 0.2, 1);\n        margin-left: auto;\n      }\n\n      .summary-icon.expanded {\n        transform: rotate(180deg);\n      }\n\n      .container {\n        overflow: hidden;\n        transition: height 300ms cubic-bezier(0.4, 0, 0.2, 1);\n        height: 0px;\n      }\n\n      .container.expanded {\n        height: auto;\n      }\n\n      .header {\n        display: block;\n      }\n\n      .secondary {\n        display: block;\n        color: var(--secondary-text-color);\n        font-size: 12px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-expansion-panel\": HaExpansionPanel;\n  }\n\n  // for fire event\n  interface HASSDomEvents {\n    \"expanded-changed\": {\n      expanded: boolean;\n    };\n    \"expanded-will-change\": {\n      expanded: boolean;\n    };\n  }\n}\n","import \"@material/mwc-button\";\nimport \"@polymer/paper-dialog-scrollable/paper-dialog-scrollable\";\nimport \"@polymer/paper-input/paper-input\";\nimport type { PaperInputElement } from \"@polymer/paper-input/paper-input\";\nimport { CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state, query } from \"lit/decorators\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport \"../../../components/ha-circular-progress\";\nimport { createCloseHeading } from \"../../../components/ha-dialog\";\nimport \"../../../components/ha-expansion-panel\";\nimport \"../../../components/ha-markdown\";\nimport {\n  BlueprintImportResult,\n  importBlueprint,\n  saveBlueprint,\n} from \"../../../data/blueprint\";\nimport { haStyleDialog } from \"../../../resources/styles\";\nimport type { HomeAssistant } from \"../../../types\";\n\n@customElement(\"ha-dialog-import-blueprint\")\nclass DialogImportBlueprint extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _params?;\n\n  @state() private _importing = false;\n\n  @state() private _saving = false;\n\n  @state() private _error?: string;\n\n  @state() private _result?: BlueprintImportResult;\n\n  @state() private _url?: string;\n\n  @query(\"#input\") private _input?: PaperInputElement;\n\n  public showDialog(params): void {\n    this._params = params;\n    this._error = undefined;\n    this._url = this._params.url;\n  }\n\n  public closeDialog(): void {\n    this._error = undefined;\n    this._result = undefined;\n    this._params = undefined;\n    this._url = undefined;\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  protected render(): TemplateResult {\n    if (!this._params) {\n      return html``;\n    }\n    return html`\n      <ha-dialog\n        open\n        @closed=${this.closeDialog}\n        .heading=${createCloseHeading(\n          this.hass,\n          this.hass.localize(\"ui.panel.config.blueprint.add.header\")\n        )}\n      >\n        <div>\n          ${this._error ? html` <div class=\"error\">${this._error}</div> ` : \"\"}\n          ${this._result\n            ? html`${this.hass.localize(\n                  \"ui.panel.config.blueprint.add.import_header\",\n                  \"name\",\n                  html`<b>${this._result.blueprint.metadata.name}</b>`,\n                  \"domain\",\n                  this._result.blueprint.metadata.domain\n                )}\n                <br />\n                <ha-markdown\n                  breaks\n                  .content=${this._result.blueprint.metadata.description}\n                ></ha-markdown>\n                ${this._result.validation_errors\n                  ? html`\n                      <p class=\"error\">\n                        ${this.hass.localize(\n                          \"ui.panel.config.blueprint.add.unsupported_blueprint\"\n                        )}\n                      </p>\n                      <ul class=\"error\">\n                        ${this._result.validation_errors.map(\n                          (error) => html`<li>${error}</li>`\n                        )}\n                      </ul>\n                    `\n                  : html`\n                      <paper-input\n                        id=\"input\"\n                        .value=${this._result.suggested_filename}\n                        .label=${this.hass.localize(\n                          \"ui.panel.config.blueprint.add.file_name\"\n                        )}\n                      ></paper-input>\n                    `}\n                <ha-expansion-panel\n                  .header=${this.hass.localize(\n                    \"ui.panel.config.blueprint.add.raw_blueprint\"\n                  )}\n                >\n                  <pre>${this._result.raw_data}</pre>\n                </ha-expansion-panel>`\n            : html`${this.hass.localize(\n                  \"ui.panel.config.blueprint.add.import_introduction_link\",\n                  \"community_link\",\n                  html`<a\n                    href=\"https://www.home-assistant.io/get-blueprints\"\n                    target=\"_blank\"\n                    rel=\"noreferrer noopener\"\n                    >${this.hass.localize(\n                      \"ui.panel.config.blueprint.add.community_forums\"\n                    )}</a\n                  >`\n                )}<paper-input\n                  id=\"input\"\n                  .label=${this.hass.localize(\n                    \"ui.panel.config.blueprint.add.url\"\n                  )}\n                  .value=${this._url}\n                  dialogInitialFocus\n                ></paper-input>`}\n        </div>\n        ${!this._result\n          ? html`<mwc-button\n              slot=\"primaryAction\"\n              @click=${this._import}\n              .disabled=${this._importing}\n            >\n              ${this._importing\n                ? html`<ha-circular-progress\n                    active\n                    size=\"small\"\n                    .title=${this.hass.localize(\n                      \"ui.panel.config.blueprint.add.importing\"\n                    )}\n                  ></ha-circular-progress>`\n                : \"\"}\n              ${this.hass.localize(\"ui.panel.config.blueprint.add.import_btn\")}\n            </mwc-button>`\n          : html`<mwc-button\n                slot=\"secondaryAction\"\n                @click=${this.closeDialog}\n                .disabled=${this._saving}\n              >\n                ${this.hass.localize(\"ui.common.cancel\")}\n              </mwc-button>\n              <mwc-button\n                slot=\"primaryAction\"\n                @click=${this._save}\n                .disabled=${this._saving || this._result.validation_errors}\n              >\n                ${this._saving\n                  ? html`<ha-circular-progress\n                      active\n                      size=\"small\"\n                      .title=${this.hass.localize(\n                        \"ui.panel.config.blueprint.add.saving\"\n                      )}\n                    ></ha-circular-progress>`\n                  : \"\"}\n                ${this.hass.localize(\"ui.panel.config.blueprint.add.save_btn\")}\n              </mwc-button>`}\n      </ha-dialog>\n    `;\n  }\n\n  private async _import() {\n    this._url = undefined;\n    this._importing = true;\n    this._error = undefined;\n    try {\n      const url = this._input?.value;\n      if (!url) {\n        this._error = this.hass.localize(\n          \"ui.panel.config.blueprint.add.error_no_url\"\n        );\n        return;\n      }\n      this._result = await importBlueprint(this.hass, url);\n    } catch (err: any) {\n      this._error = err.message;\n    } finally {\n      this._importing = false;\n    }\n  }\n\n  private async _save() {\n    this._saving = true;\n    try {\n      const filename = this._input?.value;\n      if (!filename) {\n        return;\n      }\n      await saveBlueprint(\n        this.hass,\n        this._result!.blueprint.metadata.domain,\n        filename,\n        this._result!.raw_data,\n        this._result!.blueprint.metadata.source_url\n      );\n      this._params.importedCallback();\n      this.closeDialog();\n    } catch (err: any) {\n      this._error = err.message;\n    } finally {\n      this._saving = false;\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return haStyleDialog;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog-import-blueprint\": DialogImportBlueprint;\n  }\n}\n"],"names":[],"sourceRoot":""}