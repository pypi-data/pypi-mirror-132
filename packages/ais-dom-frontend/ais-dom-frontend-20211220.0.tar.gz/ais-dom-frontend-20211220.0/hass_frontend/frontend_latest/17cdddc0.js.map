{"version":3,"file":"17cdddc0.js","mappings":";AAoBA;AACA;;AAfA;;;;;;;;;;;;;;;AAAA;;AC2GA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;;;;;;;AA3FA;;;;AAAA","sources":["webpack://home-assistant-frontend/./src/components/ha-icon-button.ts","webpack://home-assistant-frontend/./src/panels/config/integrations/integration-panels/zha/zha-groups-dashboard.ts"],"sourcesContent":["import \"@material/mwc-icon-button\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport \"./ha-icon\";\n\n@customElement(\"ha-icon-button\")\nexport class HaIconButton extends LitElement {\n  @property({ type: Boolean, reflect: true }) disabled = false;\n\n  @property({ type: String }) icon = \"\";\n\n  @property({ type: String }) label = \"\";\n\n  static shadowRootOptions: ShadowRootInit = {\n    mode: \"open\",\n    delegatesFocus: true,\n  };\n\n  protected render(): TemplateResult {\n    return html`\n      <mwc-icon-button .label=${this.label} .disabled=${this.disabled}>\n        <ha-icon .icon=${this.icon}></ha-icon>\n      </mwc-icon-button>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: inline-block;\n        outline: none;\n      }\n      :host([disabled]) {\n        pointer-events: none;\n      }\n      mwc-icon-button {\n        --mdc-theme-on-primary: currentColor;\n        --mdc-theme-text-disabled-on-light: var(--disabled-text-color);\n      }\n      ha-icon {\n        --ha-icon-display: inline;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-icon-button\": HaIconButton;\n  }\n}\n","import \"@material/mwc-button\";\nimport { mdiPlus } from \"@mdi/js\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { HASSDomEvent } from \"../../../../../common/dom/fire_event\";\nimport { navigate } from \"../../../../../common/navigate\";\nimport {\n  DataTableColumnContainer,\n  RowClickedEvent,\n} from \"../../../../../components/data-table/ha-data-table\";\nimport \"../../../../../components/ha-fab\";\nimport \"../../../../../components/ha-icon-button\";\nimport { fetchGroups, ZHADevice, ZHAGroup } from \"../../../../../data/zha\";\nimport \"../../../../../layouts/hass-tabs-subpage-data-table\";\nimport { haStyle } from \"../../../../../resources/styles\";\nimport { HomeAssistant, Route } from \"../../../../../types\";\nimport { formatAsPaddedHex, sortZHAGroups } from \"./functions\";\nimport { zhaTabs } from \"./zha-config-dashboard\";\n\nexport interface GroupRowData extends ZHAGroup {\n  group?: GroupRowData;\n  id?: string;\n}\n\n@customElement(\"zha-groups-dashboard\")\nexport class ZHAGroupsDashboard extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Object }) public route!: Route;\n\n  @property({ type: Boolean }) public narrow!: boolean;\n\n  @property({ type: Boolean }) public isWide!: boolean;\n\n  @property() public _groups: ZHAGroup[] = [];\n\n  private _firstUpdatedCalled = false;\n\n  public connectedCallback(): void {\n    super.connectedCallback();\n    if (this.hass && this._firstUpdatedCalled) {\n      this._fetchGroups();\n    }\n  }\n\n  protected firstUpdated(changedProperties: PropertyValues): void {\n    super.firstUpdated(changedProperties);\n    if (this.hass) {\n      this._fetchGroups();\n    }\n    this._firstUpdatedCalled = true;\n  }\n\n  private _formattedGroups = memoizeOne((groups: ZHAGroup[]) => {\n    let outputGroups: GroupRowData[] = groups;\n\n    outputGroups = outputGroups.map((group) => ({\n      ...group,\n      id: String(group.group_id),\n    }));\n\n    return outputGroups;\n  });\n\n  private _columns = memoizeOne(\n    (narrow: boolean): DataTableColumnContainer =>\n      narrow\n        ? {\n            name: {\n              title: \"Group\",\n              sortable: true,\n              filterable: true,\n              direction: \"asc\",\n              grows: true,\n            },\n          }\n        : {\n            name: {\n              title: this.hass.localize(\"ui.panel.config.zha.groups.groups\"),\n              sortable: true,\n              filterable: true,\n              direction: \"asc\",\n              grows: true,\n            },\n            group_id: {\n              title: this.hass.localize(\"ui.panel.config.zha.groups.group_id\"),\n              type: \"numeric\",\n              width: \"15%\",\n              template: (groupId: number) =>\n                html` ${formatAsPaddedHex(groupId)} `,\n              sortable: true,\n            },\n            members: {\n              title: this.hass.localize(\"ui.panel.config.zha.groups.members\"),\n              type: \"numeric\",\n              width: \"15%\",\n              template: (members: ZHADevice[]) => html` ${members.length} `,\n              sortable: true,\n            },\n          }\n  );\n\n  protected render(): TemplateResult {\n    return html`\n      <hass-tabs-subpage-data-table\n        .tabs=${zhaTabs}\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        .route=${this.route}\n        .columns=${this._columns(this.narrow)}\n        .data=${this._formattedGroups(this._groups)}\n        @row-click=${this._handleRowClicked}\n        clickable\n      >\n        <a href=\"/config/zha/group-add\" slot=\"fab\">\n          <ha-fab\n            .label=${this.hass!.localize(\n              \"ui.panel.config.zha.groups.add_group\"\n            )}\n            extended\n          >\n            <ha-svg-icon slot=\"icon\" .path=${mdiPlus}></ha-svg-icon>\n          </ha-fab>\n        </a>\n      </hass-tabs-subpage-data-table>\n    `;\n  }\n\n  private async _fetchGroups() {\n    this._groups = (await fetchGroups(this.hass!)).sort(sortZHAGroups);\n  }\n\n  private _handleRowClicked(ev: HASSDomEvent<RowClickedEvent>) {\n    const groupId = ev.detail.id;\n    navigate(`/config/zha/group/${groupId}`);\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        a {\n          color: var(--primary-color);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"zha-groups-dashboard\": ZHAGroupsDashboard;\n  }\n}\n"],"names":[],"sourceRoot":""}