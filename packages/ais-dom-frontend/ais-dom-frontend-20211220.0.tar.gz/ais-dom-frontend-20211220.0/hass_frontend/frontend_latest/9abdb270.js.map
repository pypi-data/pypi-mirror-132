{"version":3,"file":"9abdb270.js","mappings":";;;AAyDA;AACA;;AAEA;;;AAIA;AACA;AACA;AAOA;;;AAaA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAQA;;;AAIA;;AAQA;;;AAaA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;;AAKA;;;;ACpJA;ACOA;;AAEA;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQA;;;;;;;AC0BA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;;AApBA;;;;;;;;;;;;;;;;;;;;;;;AA5BA","sources":["webpack://home-assistant-frontend/mwc-circular-progress-base.ts","webpack://home-assistant-frontend/./src/components/ha-circular-progress.ts","webpack://home-assistant-frontend/./src/components/ha-dialog.ts","webpack://home-assistant-frontend/./src/components/media-player/dialog-media-player-browse.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\n\nimport {ariaProperty} from '@material/mwc-base/aria-property';\nimport {html, LitElement, property, TemplateResult} from 'lit-element';\nimport {classMap} from 'lit-html/directives/class-map.js';\nimport {ifDefined} from 'lit-html/directives/if-defined.js';\nimport {styleMap} from 'lit-html/directives/style-map.js';\n\n/** @soyCompatible */\nexport class CircularProgressBase extends LitElement {\n  @property({type: Boolean, reflect: true}) indeterminate = false;\n\n  @property({type: Number, reflect: true}) progress = 0;\n\n  @property({type: Number, reflect: true}) density = 0;\n\n  @property({type: Boolean, reflect: true}) closed = false;\n\n  /** @soyPrefixAttribute */\n  @ariaProperty\n  @property({type: String, attribute: 'aria-label'})\n  ariaLabel!: string\n\n  open() {\n    this.closed = false;\n  }\n\n  close() {\n    this.closed = true;\n  }\n\n  /**\n   * @soyTemplate\n   */\n  protected override render(): TemplateResult {\n    /** @classMap */\n    const classes = {\n      'mdc-circular-progress--closed': this.closed,\n      'mdc-circular-progress--indeterminate': this.indeterminate,\n    };\n\n    const containerSideLength = 48 + this.density * 4;\n    /** @styleMap */\n    const styles = {\n      'width': `${containerSideLength}px`,\n      'height': `${containerSideLength}px`,\n    };\n\n    return html`\n      <div\n        class=\"mdc-circular-progress ${classMap(classes)}\"\n        style=\"${styleMap(styles)}\"\n        role=\"progressbar\"\n        aria-label=\"${ifDefined(this.ariaLabel)}\"\n        aria-valuemin=\"0\"\n        aria-valuemax=\"1\"\n        aria-valuenow=\"${\n        ifDefined(this.indeterminate ? undefined : this.progress)}\">\n        ${this.renderDeterminateContainer()}\n        ${this.renderIndeterminateContainer()}\n      </div>`;\n  }\n\n  /**\n   * @soyTemplate\n   */\n  protected renderDeterminateContainer(): TemplateResult {\n    const sideLength = 48 + this.density * 4;\n    const center = sideLength / 2;\n    const circleRadius = this.density >= -3 ? 18 + this.density * 11 / 6 :\n                                              12.5 + (this.density + 3) * 5 / 4;\n    const circumference = 2 * 3.1415926 * circleRadius;\n    const determinateStrokeDashOffset = (1 - this.progress) * circumference;\n    const strokeWidth = this.density >= -3 ? 4 + this.density * (1 / 3) :\n                                             3 + (this.density + 3) * (1 / 6);\n\n    return html`\n      <div class=\"mdc-circular-progress__determinate-container\">\n        <svg class=\"mdc-circular-progress__determinate-circle-graphic\"\n             viewBox=\"0 0 ${sideLength} ${sideLength}\">\n          <circle class=\"mdc-circular-progress__determinate-track\"\n                  cx=\"${center}\" cy=\"${center}\" r=\"${circleRadius}\"\n                  stroke-width=\"${strokeWidth}\"></circle>\n          <circle class=\"mdc-circular-progress__determinate-circle\"\n                  cx=\"${center}\" cy=\"${center}\" r=\"${circleRadius}\"\n                  stroke-dasharray=\"${2 * 3.1415926 * circleRadius}\"\n                  stroke-dashoffset=\"${determinateStrokeDashOffset}\"\n                  stroke-width=\"${strokeWidth}\"></circle>\n        </svg>\n      </div>`;\n  }\n\n  /**\n   * @soyTemplate\n   */\n  protected renderIndeterminateContainer(): TemplateResult {\n    return html`\n      <div class=\"mdc-circular-progress__indeterminate-container\">\n        <div class=\"mdc-circular-progress__spinner-layer\">\n          ${this.renderIndeterminateSpinnerLayer()}\n        </div>\n      </div>`;\n  }\n\n  /**\n   * @soyTemplate\n   */\n  protected renderIndeterminateSpinnerLayer(): TemplateResult {\n    const sideLength = 48 + this.density * 4;\n    const center = sideLength / 2;\n    const circleRadius = this.density >= -3 ? 18 + this.density * 11 / 6 :\n                                              12.5 + (this.density + 3) * 5 / 4;\n    const circumference = 2 * 3.1415926 * circleRadius;\n    const halfCircumference = 0.5 * circumference;\n    const strokeWidth = this.density >= -3 ? 4 + this.density * (1 / 3) :\n                                             3 + (this.density + 3) * (1 / 6);\n\n    return html`\n        <div class=\"mdc-circular-progress__circle-clipper mdc-circular-progress__circle-left\">\n          <svg class=\"mdc-circular-progress__indeterminate-circle-graphic\"\n               viewBox=\"0 0 ${sideLength} ${sideLength}\">\n            <circle cx=\"${center}\" cy=\"${center}\" r=\"${circleRadius}\"\n                    stroke-dasharray=\"${circumference}\"\n                    stroke-dashoffset=\"${halfCircumference}\"\n                    stroke-width=\"${strokeWidth}\"></circle>\n          </svg>\n        </div>\n        <div class=\"mdc-circular-progress__gap-patch\">\n          <svg class=\"mdc-circular-progress__indeterminate-circle-graphic\"\n               viewBox=\"0 0 ${sideLength} ${sideLength}\">\n            <circle cx=\"${center}\" cy=\"${center}\" r=\"${circleRadius}\"\n                    stroke-dasharray=\"${circumference}\"\n                    stroke-dashoffset=\"${halfCircumference}\"\n                    stroke-width=\"${strokeWidth * 0.8}\"></circle>\n          </svg>\n        </div>\n        <div class=\"mdc-circular-progress__circle-clipper mdc-circular-progress__circle-right\">\n          <svg class=\"mdc-circular-progress__indeterminate-circle-graphic\"\n               viewBox=\"0 0 ${sideLength} ${sideLength}\">\n            <circle cx=\"${center}\" cy=\"${center}\" r=\"${circleRadius}\"\n                    stroke-dasharray=\"${circumference}\"\n                    stroke-dashoffset=\"${halfCircumference}\"\n                    stroke-width=\"${strokeWidth}\"></circle>\n          </svg>\n        </div>`;\n  }\n\n  override update(changedProperties: Map<string, string>) {\n    super.update(changedProperties);\n\n    // Bound progress value in interval [0, 1].\n    if (changedProperties.has('progress')) {\n      if (this.progress > 1) {\n        this.progress = 1;\n      }\n\n      if (this.progress < 0) {\n        this.progress = 0;\n      }\n    }\n  }\n}\n","import { CircularProgress } from \"@material/mwc-circular-progress\";\nimport { CSSResultGroup, css } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-circular-progress\")\n// @ts-ignore\nexport class HaCircularProgress extends CircularProgress {\n  @property({ type: Boolean })\n  public active = false;\n\n  @property()\n  public alt = \"Loading\";\n\n  @property()\n  public size: \"tiny\" | \"small\" | \"medium\" | \"large\" = \"medium\";\n\n  // @ts-ignore\n  public set density(_) {\n    // just a dummy\n  }\n\n  public get density() {\n    switch (this.size) {\n      case \"tiny\":\n        return -8;\n      case \"small\":\n        return -5;\n      case \"medium\":\n        return 0;\n      case \"large\":\n        return 5;\n      default:\n        return 0;\n    }\n  }\n\n  // @ts-ignore\n  public set indeterminate(_) {\n    // just a dummy\n  }\n\n  public get indeterminate() {\n    return this.active;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      super.styles,\n      css`\n        :host {\n          overflow: hidden;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-circular-progress\": HaCircularProgress;\n  }\n}\n","import { Dialog } from \"@material/mwc-dialog\";\nimport { mdiClose } from \"@mdi/js\";\nimport { css, CSSResultGroup, html, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport { computeRTLDirection } from \"../common/util/compute_rtl\";\nimport type { HomeAssistant } from \"../types\";\nimport \"@material/mwc-icon-button/mwc-icon-button\";\nimport \"./ha-svg-icon\";\n\nexport const createCloseHeading = (\n  hass: HomeAssistant,\n  title: string | TemplateResult\n) => html`\n  <span class=\"header_title\">${title}</span>\n  <mwc-icon-button\n    aria-label=${hass.localize(\"ui.dialogs.generic.close\")}\n    dialogAction=\"close\"\n    class=\"header_button\"\n    dir=${computeRTLDirection(hass)}\n  >\n    <ha-svg-icon .path=${mdiClose}></ha-svg-icon>\n  </mwc-icon-button>\n`;\n\n@customElement(\"ha-dialog\")\n// @ts-expect-error\nexport class HaDialog extends Dialog {\n  public scrollToPos(x: number, y: number) {\n    this.contentElement.scrollTo(x, y);\n  }\n\n  protected renderHeading() {\n    return html`<slot name=\"heading\"> ${super.renderHeading()} </slot>`;\n  }\n\n  protected static get styles(): CSSResultGroup {\n    return [\n      Dialog.styles,\n      css`\n        .mdc-dialog {\n          --mdc-dialog-scroll-divider-color: var(--divider-color);\n          z-index: var(--dialog-z-index, 7);\n          backdrop-filter: var(--dialog-backdrop-filter, none);\n        }\n        .mdc-dialog__actions {\n          justify-content: var(--justify-action-buttons, flex-end);\n          padding-bottom: max(env(safe-area-inset-bottom), 8px);\n        }\n        .mdc-dialog__container {\n          align-items: var(--vertial-align-dialog, center);\n        }\n        .mdc-dialog__title::before {\n          display: block;\n          height: 20px;\n        }\n        .mdc-dialog .mdc-dialog__content {\n          position: var(--dialog-content-position, relative);\n          padding: var(--dialog-content-padding, 20px 24px);\n        }\n        :host([hideactions]) .mdc-dialog .mdc-dialog__content {\n          padding-bottom: max(\n            var(--dialog-content-padding, 20px),\n            env(safe-area-inset-bottom)\n          );\n        }\n        .mdc-dialog .mdc-dialog__surface {\n          position: var(--dialog-surface-position, relative);\n          top: var(--dialog-surface-top);\n          min-height: var(--mdc-dialog-min-height, auto);\n        }\n        :host([flexContent]) .mdc-dialog .mdc-dialog__content {\n          display: flex;\n          flex-direction: column;\n        }\n        .header_button {\n          position: absolute;\n          right: 16px;\n          top: 10px;\n          text-decoration: none;\n          color: inherit;\n        }\n        .header_title {\n          margin-right: 40px;\n        }\n        [dir=\"rtl\"].header_button {\n          right: auto;\n          left: 16px;\n        }\n        [dir=\"rtl\"].header_title {\n          margin-left: 40px;\n          margin-right: 0px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog\": HaDialog;\n  }\n}\n","import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent, HASSDomEvent } from \"../../common/dom/fire_event\";\nimport type {\n  MediaPickedEvent,\n  MediaPlayerBrowseAction,\n} from \"../../data/media-player\";\nimport { haStyleDialog } from \"../../resources/styles\";\nimport type { HomeAssistant } from \"../../types\";\nimport \"../ha-dialog\";\nimport \"./ha-media-player-browse\";\nimport { MediaPlayerBrowseDialogParams } from \"./show-media-browser-dialog\";\n\n@customElement(\"dialog-media-player-browse\")\nclass DialogMediaPlayerBrowse extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _entityId!: string;\n\n  @state() private _mediaContentId?: string;\n\n  @state() private _mediaContentType?: string;\n\n  @state() private _action?: MediaPlayerBrowseAction;\n\n  @state() private _params?: MediaPlayerBrowseDialogParams;\n\n  public showDialog(params: MediaPlayerBrowseDialogParams): void {\n    this._params = params;\n    this._entityId = this._params.entityId;\n    this._mediaContentId = this._params.mediaContentId;\n    this._mediaContentType = this._params.mediaContentType;\n    this._action = this._params.action || \"play\";\n  }\n\n  public closeDialog() {\n    this._params = undefined;\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  protected render(): TemplateResult {\n    if (!this._params) {\n      return html``;\n    }\n\n    return html`\n      <ha-dialog\n        open\n        scrimClickAction\n        escapeKeyAction\n        hideActions\n        flexContent\n        @closed=${this.closeDialog}\n      >\n        <ha-media-player-browse\n          dialog\n          .hass=${this.hass}\n          .entityId=${this._entityId}\n          .action=${this._action!}\n          .mediaContentId=${this._mediaContentId}\n          .mediaContentType=${this._mediaContentType}\n          @close-dialog=${this.closeDialog}\n          @media-picked=${this._mediaPicked}\n        ></ha-media-player-browse>\n      </ha-dialog>\n    `;\n  }\n\n  private _mediaPicked(ev: HASSDomEvent<MediaPickedEvent>): void {\n    this._params!.mediaPickedCallback(ev.detail);\n    if (this._action !== \"play\") {\n      this.closeDialog();\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyleDialog,\n      css`\n        ha-dialog {\n          --dialog-z-index: 8;\n          --dialog-content-padding: 0;\n        }\n\n        ha-media-player-browse {\n          --media-browser-max-height: 100vh;\n        }\n\n        @media (min-width: 800px) {\n          ha-dialog {\n            --mdc-dialog-max-width: 800px;\n            --dialog-surface-position: fixed;\n            --dialog-surface-top: 40px;\n            --mdc-dialog-max-height: calc(100vh - 72px);\n          }\n          ha-media-player-browse {\n            position: initial;\n            --media-browser-max-height: 100vh - 72px;\n            width: 700px;\n          }\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-media-player-browse\": DialogMediaPlayerBrowse;\n  }\n}\n"],"names":[],"sourceRoot":""}