{"version":3,"file":"307f34d5.js","mappings":";;;;;;;;;;;;;;;;;;;;;;AA+GA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3GA;AAoEA;;AApEA;ACgBA;AACA;;AAfA;;;;;;;;;;;;;;;AAAA;;AC6GA;AACA;;AAKA;;AAQA;AACA;AACA;AACA;;AAEA;;;;;AAKA;AACA;;;;AAIA;;AAGA;;;;;AAMA;AACA;AAIA;;;AAGA;;;;;AAKA;;AAIA;;;;;AAOA;AAGA;;AAKA;AACA;;;AAGA;;;;AAIA;;AAIA;;;;;;AAQA;;AAGA;AAGA;;;AAOA;;;AAOA;;;AAGA;;;;;AAKA;;AAGA;;;;AAOA;;AAKA;;;;AAMA;;;AAIA;;AAGA;AAGA;;;AAOA;;;AAOA;;;AAGA;;;;;AAKA;;AAGA;;;;AAOA;;AAKA;;;;AAMA;AAEA;;AAGA;AAGA;;AAMA;;;;AAIA;;;;;AAKA;;AAKA;;;;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AApTA;;ACkGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AAUA;;;;AAIA;;AAIA;;;;;AA7HA;AAkJA;;AAEA;;;AAGA;;AAvJA;;;;;AAAA;;ACpBA;;;;AAMA;;;;;;AAdA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA","sources":["webpack://home-assistant-frontend/./node_modules/@polymer/iron-icon/iron-icon.js","webpack://home-assistant-frontend/./src/components/ha-card.ts","webpack://home-assistant-frontend/./src/components/ha-icon-button.ts","webpack://home-assistant-frontend/./src/panels/config/areas/ha-config-area-page.ts","webpack://home-assistant-frontend/./src/panels/config/areas/ha-config-areas-dashboard.ts","webpack://home-assistant-frontend/./src/panels/config/ha-config-section.ts"],"sourcesContent":["/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/iron-flex-layout/iron-flex-layout.js';\n\nimport {IronMeta} from '@polymer/iron-meta/iron-meta.js';\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {dom} from '@polymer/polymer/lib/legacy/polymer.dom.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\nimport {Base} from '@polymer/polymer/polymer-legacy.js';\n\n/**\n\nThe `iron-icon` element displays an icon. By default an icon renders as a 24px\nsquare.\n\nExample using src:\n\n    <iron-icon src=\"star.png\"></iron-icon>\n\nExample setting size to 32px x 32px:\n\n    <iron-icon class=\"big\" src=\"big_star.png\"></iron-icon>\n\n    <style is=\"custom-style\">\n      .big {\n        --iron-icon-height: 32px;\n        --iron-icon-width: 32px;\n      }\n    </style>\n\nThe iron elements include several sets of icons. To use the default set of\nicons, import `iron-icons.js` and use the `icon` attribute to specify an icon:\n\n    <script type=\"module\">\n      import \"@polymer/iron-icons/iron-icons.js\";\n    </script>\n\n    <iron-icon icon=\"menu\"></iron-icon>\n\nTo use a different built-in set of icons, import the specific\n`iron-icons/<iconset>-icons.js`, and specify the icon as `<iconset>:<icon>`.\nFor example, to use a communication icon, you would use:\n\n    <script type=\"module\">\n      import \"@polymer/iron-icons/communication-icons.js\";\n    </script>\n\n    <iron-icon icon=\"communication:email\"></iron-icon>\n\nYou can also create custom icon sets of bitmap or SVG icons.\n\nExample of using an icon named `cherry` from a custom iconset with the ID\n`fruit`:\n\n    <iron-icon icon=\"fruit:cherry\"></iron-icon>\n\nSee `<iron-iconset>` and `<iron-iconset-svg>` for more information about how to\ncreate a custom iconset.\n\nSee the `iron-icons` demo to see the icons available in the various iconsets.\n\n### Styling\n\nThe following custom properties are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--iron-icon` | Mixin applied to the icon | {}\n`--iron-icon-width` | Width of the icon | `24px`\n`--iron-icon-height` | Height of the icon | `24px`\n`--iron-icon-fill-color` | Fill color of the svg icon | `currentcolor`\n`--iron-icon-stroke-color` | Stroke color of the svg icon | none\n\n@group Iron Elements\n@element iron-icon\n@demo demo/index.html\n@hero hero.svg\n@homepage polymer.github.io\n*/\nPolymer({\n  _template: html`\n    <style>\n      :host {\n        @apply --layout-inline;\n        @apply --layout-center-center;\n        position: relative;\n\n        vertical-align: middle;\n\n        fill: var(--iron-icon-fill-color, currentcolor);\n        stroke: var(--iron-icon-stroke-color, none);\n\n        width: var(--iron-icon-width, 24px);\n        height: var(--iron-icon-height, 24px);\n        @apply --iron-icon;\n      }\n\n      :host([hidden]) {\n        display: none;\n      }\n    </style>\n`,\n\n  is: 'iron-icon',\n\n  properties: {\n\n    /**\n     * The name of the icon to use. The name should be of the form:\n     * `iconset_name:icon_name`.\n     */\n    icon: {type: String},\n\n    /**\n     * The name of the theme to used, if one is specified by the\n     * iconset.\n     */\n    theme: {type: String},\n\n    /**\n     * If using iron-icon without an iconset, you can set the src to be\n     * the URL of an individual icon image file. Note that this will take\n     * precedence over a given icon attribute.\n     */\n    src: {type: String},\n\n    /**\n     * @type {!IronMeta}\n     */\n    _meta: {value: Base.create('iron-meta', {type: 'iconset'})}\n\n  },\n\n  observers: [\n    '_updateIcon(_meta, isAttached)',\n    '_updateIcon(theme, isAttached)',\n    '_srcChanged(src, isAttached)',\n    '_iconChanged(icon, isAttached)'\n  ],\n\n  _DEFAULT_ICONSET: 'icons',\n\n  _iconChanged: function(icon) {\n    var parts = (icon || '').split(':');\n    this._iconName = parts.pop();\n    this._iconsetName = parts.pop() || this._DEFAULT_ICONSET;\n    this._updateIcon();\n  },\n\n  _srcChanged: function(src) {\n    this._updateIcon();\n  },\n\n  _usesIconset: function() {\n    return this.icon || !this.src;\n  },\n\n  /** @suppress {visibility} */\n  _updateIcon: function() {\n    if (this._usesIconset()) {\n      if (this._img && this._img.parentNode) {\n        dom(this.root).removeChild(this._img);\n      }\n      if (this._iconName === '') {\n        if (this._iconset) {\n          this._iconset.removeIcon(this);\n        }\n      } else if (this._iconsetName && this._meta) {\n        this._iconset = /** @type {?Polymer.Iconset} */ (\n            this._meta.byKey(this._iconsetName));\n        if (this._iconset) {\n          this._iconset.applyIcon(this, this._iconName, this.theme);\n          this.unlisten(window, 'iron-iconset-added', '_updateIcon');\n        } else {\n          this.listen(window, 'iron-iconset-added', '_updateIcon');\n        }\n      }\n    } else {\n      if (this._iconset) {\n        this._iconset.removeIcon(this);\n      }\n      if (!this._img) {\n        this._img = document.createElement('img');\n        this._img.style.width = '100%';\n        this._img.style.height = '100%';\n        this._img.draggable = false;\n      }\n      this._img.src = this.src;\n      dom(this.root).appendChild(this._img);\n    }\n  }\n});\n","import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-card\")\nexport class HaCard extends LitElement {\n  @property() public header?: string;\n\n  @property({ type: Boolean, reflect: true }) public outlined = false;\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        background: var(\n          --ha-card-background,\n          var(--card-background-color, white)\n        );\n        border-radius: var(--ha-card-border-radius, 4px);\n        box-shadow: var(\n          --ha-card-box-shadow,\n          0px 2px 1px -1px rgba(0, 0, 0, 0.2),\n          0px 1px 1px 0px rgba(0, 0, 0, 0.14),\n          0px 1px 3px 0px rgba(0, 0, 0, 0.12)\n        );\n        color: var(--primary-text-color);\n        display: block;\n        transition: all 0.3s ease-out;\n        position: relative;\n      }\n\n      :host([outlined]) {\n        box-shadow: none;\n        border-width: var(--ha-card-border-width, 1px);\n        border-style: solid;\n        border-color: var(\n          --ha-card-border-color,\n          var(--divider-color, #e0e0e0)\n        );\n      }\n\n      .card-header,\n      :host ::slotted(.card-header) {\n        color: var(--ha-card-header-color, --primary-text-color);\n        font-family: var(--ha-card-header-font-family, inherit);\n        font-size: var(--ha-card-header-font-size, 24px);\n        letter-spacing: -0.012em;\n        line-height: 48px;\n        padding: 12px 16px 16px;\n        display: block;\n        margin-block-start: 0px;\n        margin-block-end: 0px;\n        font-weight: normal;\n      }\n\n      :host ::slotted(.card-content:not(:first-child)),\n      slot:not(:first-child)::slotted(.card-content) {\n        padding-top: 0px;\n        margin-top: -8px;\n      }\n\n      :host ::slotted(.card-content) {\n        padding: 16px;\n      }\n\n      :host ::slotted(.card-actions) {\n        border-top: 1px solid var(--divider-color, #e8e8e8);\n        padding: 5px 16px;\n      }\n    `;\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      ${this.header\n        ? html`<h1 class=\"card-header\">${this.header}</h1>`\n        : html``}\n      <slot></slot>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-card\": HaCard;\n  }\n}\n","import \"@material/mwc-icon-button\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport \"./ha-icon\";\n\n@customElement(\"ha-icon-button\")\nexport class HaIconButton extends LitElement {\n  @property({ type: Boolean, reflect: true }) disabled = false;\n\n  @property({ type: String }) icon = \"\";\n\n  @property({ type: String }) label = \"\";\n\n  static shadowRootOptions: ShadowRootInit = {\n    mode: \"open\",\n    delegatesFocus: true,\n  };\n\n  protected render(): TemplateResult {\n    return html`\n      <mwc-icon-button .label=${this.label} .disabled=${this.disabled}>\n        <ha-icon .icon=${this.icon}></ha-icon>\n      </mwc-icon-button>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: inline-block;\n        outline: none;\n      }\n      :host([disabled]) {\n        pointer-events: none;\n      }\n      mwc-icon-button {\n        --mdc-theme-on-primary: currentColor;\n        --mdc-theme-text-disabled-on-light: var(--disabled-text-color);\n      }\n      ha-icon {\n        --ha-icon-display: inline;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-icon-button\": HaIconButton;\n  }\n}\n","import \"@material/mwc-button\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { ifDefined } from \"lit/directives/if-defined\";\nimport memoizeOne from \"memoize-one\";\nimport { isComponentLoaded } from \"../../../common/config/is_component_loaded\";\nimport { computeStateName } from \"../../../common/entity/compute_state_name\";\nimport \"../../../components/ha-card\";\nimport {\n  AreaRegistryEntry,\n  deleteAreaRegistryEntry,\n  updateAreaRegistryEntry,\n} from \"../../../data/area_registry\";\nimport {\n  computeDeviceName,\n  DeviceRegistryEntry,\n} from \"../../../data/device_registry\";\nimport {\n  computeEntityRegistryName,\n  EntityRegistryEntry,\n} from \"../../../data/entity_registry\";\nimport { findRelated, RelatedResult } from \"../../../data/search\";\nimport { showConfirmationDialog } from \"../../../dialogs/generic/show-dialog-box\";\nimport { haStyle } from \"../../../resources/styles\";\nimport { HomeAssistant, Route } from \"../../../types\";\nimport { showEntityEditorDialog } from \"../entities/show-dialog-entity-editor\";\nimport { configSections } from \"../ha-panel-config\";\nimport {\n  loadAreaRegistryDetailDialog,\n  showAreaRegistryDetailDialog,\n} from \"./show-dialog-area-registry-detail\";\n\n@customElement(\"ha-config-area-page\")\nclass HaConfigAreaPage extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public areaId!: string;\n\n  @property() public areas!: AreaRegistryEntry[];\n\n  @property() public devices!: DeviceRegistryEntry[];\n\n  @property() public entities!: EntityRegistryEntry[];\n\n  @property({ type: Boolean, reflect: true }) public narrow!: boolean;\n\n  @property() public isWide!: boolean;\n\n  @property() public showAdvanced!: boolean;\n\n  @property() public route!: Route;\n\n  @state() private _related?: RelatedResult;\n\n  private _area = memoizeOne(\n    (\n      areaId: string,\n      areas: AreaRegistryEntry[]\n    ): AreaRegistryEntry | undefined =>\n      areas.find((area) => area.area_id === areaId)\n  );\n\n  private _memberships = memoizeOne(\n    (\n      areaId: string,\n      registryDevices: DeviceRegistryEntry[],\n      registryEntities: EntityRegistryEntry[]\n    ) => {\n      const devices = new Map();\n\n      for (const device of registryDevices) {\n        if (device.area_id === areaId) {\n          devices.set(device.id, device);\n        }\n      }\n\n      const entities: EntityRegistryEntry[] = [];\n      const indirectEntities: EntityRegistryEntry[] = [];\n\n      for (const entity of registryEntities) {\n        if (entity.area_id) {\n          if (entity.area_id === areaId) {\n            entities.push(entity);\n          }\n        } else if (devices.has(entity.device_id)) {\n          indirectEntities.push(entity);\n        }\n      }\n\n      return {\n        devices: Array.from(devices.values()),\n        entities,\n        indirectEntities,\n      };\n    }\n  );\n\n  protected firstUpdated(changedProps) {\n    super.firstUpdated(changedProps);\n    loadAreaRegistryDetailDialog();\n  }\n\n  protected updated(changedProps) {\n    super.updated(changedProps);\n    if (changedProps.has(\"areaId\")) {\n      this._findRelated();\n    }\n  }\n\n  protected render(): TemplateResult {\n    const area = this._area(this.areaId, this.areas);\n\n    if (!area) {\n      return html`\n        <hass-error-screen\n          .hass=${this.hass}\n          .error=${this.hass.localize(\"ui.panel.config.areas.area_not_found\")}\n        ></hass-error-screen>\n      `;\n    }\n\n    const { devices, entities } = this._memberships(\n      this.areaId,\n      this.devices,\n      this.entities\n    );\n\n    return html`\n      <hass-tabs-subpage\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        .tabs=${configSections.integrations}\n        .route=${this.route}\n      >\n        ${this.narrow ? html` <span slot=\"header\"> ${area.name} </span> ` : \"\"}\n\n        <ha-icon-button\n          slot=\"toolbar-icon\"\n          icon=\"hass:cog\"\n          .entry=${area}\n          @click=${this._showSettings}\n        ></ha-icon-button>\n\n        <div class=\"container\">\n          ${!this.narrow\n            ? html`\n                <div class=\"fullwidth\">\n                  <h1>${area.name}</h1>\n                </div>\n              `\n            : \"\"}\n          <div class=\"column\">\n            <ha-card\n              .header=${this.hass.localize(\"ui.panel.config.devices.caption\")}\n              >${devices.length\n                ? devices.map(\n                    (device) =>\n                      html`\n                        <a href=\"/config/devices/device/${device.id}\">\n                          <paper-item>\n                            <paper-item-body>\n                              ${computeDeviceName(device, this.hass)}\n                            </paper-item-body>\n                            <ha-icon-next></ha-icon-next>\n                          </paper-item>\n                        </a>\n                      `\n                  )\n                : html`\n                    <paper-item class=\"no-link\"\n                      >${this.hass.localize(\n                        \"ui.panel.config.devices.no_devices\"\n                      )}</paper-item\n                    >\n                  `}\n            </ha-card>\n            <ha-card\n              .header=${this.hass.localize(\n                \"ui.panel.config.areas.editor.linked_entities_caption\"\n              )}\n              >${entities.length\n                ? entities.map(\n                    (entity) =>\n                      html`\n                        <paper-item\n                          @click=${this._openEntity}\n                          .entity=${entity}\n                        >\n                          <paper-item-body>\n                            ${computeEntityRegistryName(this.hass, entity)}\n                          </paper-item-body>\n                          <ha-icon-next></ha-icon-next>\n                        </paper-item>\n                      `\n                  )\n                : html`\n                    <paper-item class=\"no-link\"\n                      >${this.hass.localize(\n                        \"ui.panel.config.areas.editor.no_linked_entities\"\n                      )}</paper-item\n                    >\n                  `}\n            </ha-card>\n          </div>\n          <div class=\"column\">\n            ${isComponentLoaded(this.hass, \"automation\")\n              ? html`\n                  <ha-card\n                    .header=${this.hass.localize(\n                      \"ui.panel.config.devices.automation.automations\"\n                    )}\n                    >${this._related?.automation?.length\n                      ? this._related.automation.map((automation) => {\n                          const entityState = this.hass.states[automation];\n                          return entityState\n                            ? html`\n                                <div>\n                                  <a\n                                    href=${ifDefined(\n                                      entityState.attributes.id\n                                        ? `/config/automation/edit/${entityState.attributes.id}`\n                                        : undefined\n                                    )}\n                                  >\n                                    <paper-item\n                                      .disabled=${!entityState.attributes.id}\n                                    >\n                                      <paper-item-body>\n                                        ${computeStateName(entityState)}\n                                      </paper-item-body>\n                                      <ha-icon-next></ha-icon-next>\n                                    </paper-item>\n                                  </a>\n                                  ${!entityState.attributes.id\n                                    ? html`\n                                        <paper-tooltip animation-delay=\"0\">\n                                          ${this.hass.localize(\n                                            \"ui.panel.config.devices.cant_edit\"\n                                          )}\n                                        </paper-tooltip>\n                                      `\n                                    : \"\"}\n                                </div>\n                              `\n                            : \"\";\n                        })\n                      : html`\n                          <paper-item class=\"no-link\"\n                            >${this.hass.localize(\n                              \"ui.panel.config.devices.automation.no_automations\"\n                            )}</paper-item\n                          >\n                        `}\n                  </ha-card>\n                `\n              : \"\"}\n          </div>\n          <div class=\"column\">\n            ${isComponentLoaded(this.hass, \"scene\")\n              ? html`\n                  <ha-card\n                    .header=${this.hass.localize(\n                      \"ui.panel.config.devices.scene.scenes\"\n                    )}\n                    >${this._related?.scene?.length\n                      ? this._related.scene.map((scene) => {\n                          const entityState = this.hass.states[scene];\n                          return entityState\n                            ? html`\n                                <div>\n                                  <a\n                                    href=${ifDefined(\n                                      entityState.attributes.id\n                                        ? `/config/scene/edit/${entityState.attributes.id}`\n                                        : undefined\n                                    )}\n                                  >\n                                    <paper-item\n                                      .disabled=${!entityState.attributes.id}\n                                    >\n                                      <paper-item-body>\n                                        ${computeStateName(entityState)}\n                                      </paper-item-body>\n                                      <ha-icon-next></ha-icon-next>\n                                    </paper-item>\n                                  </a>\n                                  ${!entityState.attributes.id\n                                    ? html`\n                                        <paper-tooltip animation-delay=\"0\">\n                                          ${this.hass.localize(\n                                            \"ui.panel.config.devices.cant_edit\"\n                                          )}\n                                        </paper-tooltip>\n                                      `\n                                    : \"\"}\n                                </div>\n                              `\n                            : \"\";\n                        })\n                      : html`\n                          <paper-item class=\"no-link\"\n                            >${this.hass.localize(\n                              \"ui.panel.config.devices.scene.no_scenes\"\n                            )}</paper-item\n                          >\n                        `}\n                  </ha-card>\n                `\n              : \"\"}\n            ${isComponentLoaded(this.hass, \"script\")\n              ? html`\n                  <ha-card\n                    .header=${this.hass.localize(\n                      \"ui.panel.config.devices.script.scripts\"\n                    )}\n                    >${this._related?.script?.length\n                      ? this._related.script.map((script) => {\n                          const entityState = this.hass.states[script];\n                          return entityState\n                            ? html`\n                                <a\n                                  href=${`/config/script/edit/${entityState.entity_id}`}\n                                >\n                                  <paper-item>\n                                    <paper-item-body>\n                                      ${computeStateName(entityState)}\n                                    </paper-item-body>\n                                    <ha-icon-next></ha-icon-next>\n                                  </paper-item>\n                                </a>\n                              `\n                            : \"\";\n                        })\n                      : html`\n                          <paper-item class=\"no-link\">\n                            ${this.hass.localize(\n                              \"ui.panel.config.devices.script.no_scripts\"\n                            )}</paper-item\n                          >\n                        `}\n                  </ha-card>\n                `\n              : \"\"}\n          </div>\n        </div>\n      </hass-tabs-subpage>\n    `;\n  }\n\n  private async _findRelated() {\n    this._related = await findRelated(this.hass, \"area\", this.areaId);\n  }\n\n  private _showSettings(ev: MouseEvent) {\n    const entry: AreaRegistryEntry = (ev.currentTarget! as any).entry;\n    this._openDialog(entry);\n  }\n\n  private _openEntity(ev) {\n    const entry: EntityRegistryEntry = (ev.currentTarget as any).entity;\n    showEntityEditorDialog(this, {\n      entity_id: entry.entity_id,\n      entry,\n    });\n  }\n\n  private _openDialog(entry?: AreaRegistryEntry) {\n    showAreaRegistryDetailDialog(this, {\n      entry,\n      updateEntry: async (values) =>\n        updateAreaRegistryEntry(this.hass!, entry!.area_id, values),\n      removeEntry: async () => {\n        if (\n          !(await showConfirmationDialog(this, {\n            title: this.hass.localize(\n              \"ui.panel.config.areas.delete.confirmation_title\"\n            ),\n            text: this.hass.localize(\n              \"ui.panel.config.areas.delete.confirmation_text\"\n            ),\n            dismissText: this.hass.localize(\"ui.common.cancel\"),\n            confirmText: this.hass.localize(\"ui.common.delete\"),\n          }))\n        ) {\n          return false;\n        }\n\n        try {\n          await deleteAreaRegistryEntry(this.hass!, entry!.area_id);\n          return true;\n        } catch (err: any) {\n          return false;\n        }\n      },\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        h1 {\n          margin-top: 0;\n          font-family: var(--paper-font-headline_-_font-family);\n          -webkit-font-smoothing: var(\n            --paper-font-headline_-_-webkit-font-smoothing\n          );\n          font-size: var(--paper-font-headline_-_font-size);\n          font-weight: var(--paper-font-headline_-_font-weight);\n          letter-spacing: var(--paper-font-headline_-_letter-spacing);\n          line-height: var(--paper-font-headline_-_line-height);\n          opacity: var(--dark-primary-opacity);\n        }\n\n        .container {\n          display: flex;\n          flex-wrap: wrap;\n          margin: auto;\n          max-width: 1000px;\n          margin-top: 32px;\n          margin-bottom: 32px;\n        }\n        .column {\n          padding: 8px;\n          box-sizing: border-box;\n          width: 33%;\n          flex-grow: 1;\n        }\n        .fullwidth {\n          padding: 8px;\n          width: 100%;\n        }\n        .column > *:not(:first-child) {\n          margin-top: 16px;\n        }\n\n        :host([narrow]) .column {\n          width: 100%;\n        }\n\n        :host([narrow]) .container {\n          margin-top: 0;\n        }\n\n        paper-item {\n          cursor: pointer;\n          font-size: var(--paper-font-body1_-_font-size);\n        }\n\n        a {\n          text-decoration: none;\n          color: var(--primary-text-color);\n        }\n\n        paper-item.no-link {\n          cursor: default;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-config-area-page\": HaConfigAreaPage;\n  }\n}\n","import { mdiPlus } from \"@mdi/js\";\nimport \"@polymer/paper-item/paper-item\";\nimport \"@polymer/paper-item/paper-item-body\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { HASSDomEvent } from \"../../../common/dom/fire_event\";\nimport { navigate } from \"../../../common/navigate\";\nimport {\n  DataTableColumnContainer,\n  RowClickedEvent,\n} from \"../../../components/data-table/ha-data-table\";\nimport \"../../../components/ha-fab\";\nimport \"../../../components/ha-icon-button\";\nimport \"../../../components/ha-svg-icon\";\nimport {\n  AreaRegistryEntry,\n  createAreaRegistryEntry,\n} from \"../../../data/area_registry\";\nimport type { DeviceRegistryEntry } from \"../../../data/device_registry\";\nimport type { EntityRegistryEntry } from \"../../../data/entity_registry\";\nimport { showAlertDialog } from \"../../../dialogs/generic/show-dialog-box\";\nimport \"../../../layouts/hass-loading-screen\";\nimport \"../../../layouts/hass-tabs-subpage-data-table\";\nimport { HomeAssistant, Route } from \"../../../types\";\nimport \"../ha-config-section\";\nimport { configSections } from \"../ha-panel-config\";\nimport {\n  loadAreaRegistryDetailDialog,\n  showAreaRegistryDetailDialog,\n} from \"./show-dialog-area-registry-detail\";\n\n@customElement(\"ha-config-areas-dashboard\")\nexport class HaConfigAreasDashboard extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public isWide?: boolean;\n\n  @property() public narrow!: boolean;\n\n  @property() public route!: Route;\n\n  @property() public areas!: AreaRegistryEntry[];\n\n  @property() public devices!: DeviceRegistryEntry[];\n\n  @property() public entities!: EntityRegistryEntry[];\n\n  private _areas = memoizeOne(\n    (\n      areas: AreaRegistryEntry[],\n      devices: DeviceRegistryEntry[],\n      entities: EntityRegistryEntry[]\n    ) =>\n      areas.map((area) => {\n        const devicesInArea = new Set();\n\n        for (const device of devices) {\n          if (device.area_id === area.area_id) {\n            devicesInArea.add(device.id);\n          }\n        }\n\n        let entitiesInArea = 0;\n\n        for (const entity of entities) {\n          if (\n            entity.area_id\n              ? entity.area_id === area.area_id\n              : devicesInArea.has(entity.device_id)\n          ) {\n            entitiesInArea++;\n          }\n        }\n\n        return {\n          ...area,\n          devices: devicesInArea.size,\n          entities: entitiesInArea,\n        };\n      })\n  );\n\n  private _columns = memoizeOne(\n    (narrow: boolean): DataTableColumnContainer =>\n      narrow\n        ? {\n            name: {\n              title: this.hass.localize(\n                \"ui.panel.config.areas.data_table.area\"\n              ),\n              sortable: true,\n              filterable: true,\n              grows: true,\n              direction: \"asc\",\n            },\n          }\n        : {\n            name: {\n              title: this.hass.localize(\n                \"ui.panel.config.areas.data_table.area\"\n              ),\n              sortable: true,\n              filterable: true,\n              grows: true,\n              direction: \"asc\",\n            },\n            devices: {\n              title: this.hass.localize(\n                \"ui.panel.config.areas.data_table.devices\"\n              ),\n              sortable: true,\n              type: \"numeric\",\n              width: \"20%\",\n              direction: \"asc\",\n            },\n            entities: {\n              title: this.hass.localize(\n                \"ui.panel.config.areas.data_table.entities\"\n              ),\n              sortable: true,\n              type: \"numeric\",\n              width: \"20%\",\n              direction: \"asc\",\n            },\n          }\n  );\n\n  protected render(): TemplateResult {\n    return html`\n      <hass-tabs-subpage-data-table\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        .isWide=${this.isWide}\n        back-path=\"/config\"\n        .tabs=${configSections.integrations}\n        .route=${this.route}\n        .columns=${this._columns(this.narrow)}\n        .data=${this._areas(this.areas, this.devices, this.entities)}\n        @row-click=${this._handleRowClicked}\n        .noDataText=${this.hass.localize(\n          \"ui.panel.config.areas.picker.no_areas\"\n        )}\n        id=\"area_id\"\n        hasFab\n        clickable\n      >\n        <ha-icon-button\n          slot=\"toolbar-icon\"\n          icon=\"hass:help-circle\"\n          @click=${this._showHelp}\n        ></ha-icon-button>\n        <ha-fab\n          slot=\"fab\"\n          .label=${this.hass.localize(\n            \"ui.panel.config.areas.picker.create_area\"\n          )}\n          extended\n          @click=${this._createArea}\n        >\n          <ha-svg-icon slot=\"icon\" .path=${mdiPlus}></ha-svg-icon>\n        </ha-fab>\n      </hass-tabs-subpage-data-table>\n    `;\n  }\n\n  protected firstUpdated(changedProps) {\n    super.firstUpdated(changedProps);\n    loadAreaRegistryDetailDialog();\n  }\n\n  private _createArea() {\n    this._openDialog();\n  }\n\n  private _showHelp() {\n    showAlertDialog(this, {\n      title: this.hass.localize(\"ui.panel.config.areas.caption\"),\n      text: html`\n        ${this.hass.localize(\"ui.panel.config.areas.picker.introduction\")}\n        <p>\n          ${this.hass.localize(\"ui.panel.config.areas.picker.introduction2\")}\n        </p>\n        <a href=\"/config/integrations/dashboard\">\n          ${this.hass.localize(\n            \"ui.panel.config.areas.picker.integrations_page\"\n          )}\n        </a>\n      `,\n    });\n  }\n\n  private _handleRowClicked(ev: HASSDomEvent<RowClickedEvent>) {\n    const areaId = ev.detail.id;\n    navigate(`/config/areas/area/${areaId}`);\n  }\n\n  private _openDialog(entry?: AreaRegistryEntry) {\n    showAreaRegistryDetailDialog(this, {\n      entry,\n      createEntry: async (values) =>\n        createAreaRegistryEntry(this.hass!, values),\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      hass-loading-screen {\n        --app-header-background-color: var(--sidebar-background-color);\n        --app-header-text-color: var(--sidebar-text-color);\n      }\n    `;\n  }\n}\n","import { css, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\n\n@customElement(\"ha-config-section\")\nexport class HaConfigSection extends LitElement {\n  @property() public isWide = false;\n\n  @property({ type: Boolean }) public vertical = false;\n\n  protected render() {\n    return html`\n      <div\n        class=\"content ${classMap({\n          narrow: !this.isWide,\n        })}\"\n      >\n        <div class=\"header\"><slot name=\"header\"></slot></div>\n        <div\n          class=\"together layout ${classMap({\n            narrow: !this.isWide,\n            vertical: this.vertical || !this.isWide,\n            horizontal: !this.vertical && this.isWide,\n          })}\"\n        >\n          <div class=\"intro\"><slot name=\"introduction\"></slot></div>\n          <div class=\"panel flex-auto\"><slot></slot></div>\n        </div>\n      </div>\n    `;\n  }\n\n  static get styles() {\n    return css`\n      :host {\n        display: block;\n      }\n      .content {\n        padding: 28px 20px 0;\n        max-width: 1040px;\n        margin: 0 auto;\n      }\n\n      .layout {\n        display: flex;\n      }\n\n      .horizontal {\n        flex-direction: row;\n      }\n\n      .vertical {\n        flex-direction: column;\n      }\n\n      .flex-auto {\n        flex: 1 1 auto;\n      }\n\n      .header {\n        font-family: var(--paper-font-headline_-_font-family);\n        -webkit-font-smoothing: var(\n          --paper-font-headline_-_-webkit-font-smoothing\n        );\n        font-size: var(--paper-font-headline_-_font-size);\n        font-weight: var(--paper-font-headline_-_font-weight);\n        letter-spacing: var(--paper-font-headline_-_letter-spacing);\n        line-height: var(--paper-font-headline_-_line-height);\n        opacity: var(--dark-primary-opacity);\n      }\n\n      .together {\n        margin-top: 32px;\n      }\n\n      .intro {\n        font-family: var(--paper-font-subhead_-_font-family);\n        -webkit-font-smoothing: var(\n          --paper-font-subhead_-_-webkit-font-smoothing\n        );\n        font-weight: var(--paper-font-subhead_-_font-weight);\n        line-height: var(--paper-font-subhead_-_line-height);\n        width: 100%;\n        opacity: var(--dark-primary-opacity);\n        font-size: 14px;\n        padding-bottom: 20px;\n      }\n\n      .horizontal .intro {\n        max-width: 400px;\n        margin-right: 40px;\n      }\n\n      .panel {\n        margin-top: -24px;\n      }\n\n      .panel ::slotted(*) {\n        margin-top: 24px;\n        display: block;\n      }\n\n      .narrow.content {\n        max-width: 640px;\n      }\n      .narrow .together {\n        margin-top: 20px;\n      }\n      .narrow .intro {\n        padding-bottom: 20px;\n        margin-right: 0;\n        max-width: 500px;\n      }\n    `;\n  }\n}\n"],"names":[],"sourceRoot":""}