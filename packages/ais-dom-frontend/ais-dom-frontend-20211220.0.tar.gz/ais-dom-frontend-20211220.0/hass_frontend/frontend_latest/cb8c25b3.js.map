{"version":3,"file":"cb8c25b3.js","mappings":";;AAqBA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AAEA;;AAEA;;AA3BA;;;;;;AAAA;;;AC4EA;AAKA;AACA;AACA;AACA;;;;;AAKA;AAKA;AACA;AACA;;;AAGA;AAKA;AACA;AAEA;AACA;;;;;AAKA;AACA;AACA;AAKA;AACA;AACA;;;AAGA;AAKA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;;;;AAIA;;;AAKA;AACA;AACA;;;;;;AAjFA","sources":["webpack://home-assistant-frontend/./src/components/ha-icon-input.ts","webpack://home-assistant-frontend/./src/panels/lovelace/editor/config-elements/hui-entity-card-editor.ts"],"sourcesContent":["import \"@polymer/paper-input/paper-input\";\nimport { css, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport \"./ha-icon\";\n\n@customElement(\"ha-icon-input\")\nexport class HaIconInput extends LitElement {\n  @property() public value?: string;\n\n  @property() public label?: string;\n\n  @property() public placeholder?: string;\n\n  @property({ attribute: \"error-message\" }) public errorMessage?: string;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  protected render(): TemplateResult {\n    return html`\n      <paper-input\n        .value=${this.value}\n        .label=${this.label}\n        .placeholder=${this.placeholder}\n        @value-changed=${this._valueChanged}\n        .disabled=${this.disabled}\n        auto-validate\n        .errorMessage=${this.errorMessage}\n        pattern=\"^\\\\S+:\\\\S+$\"\n      >\n        ${this.value || this.placeholder\n          ? html`\n              <ha-icon .icon=${this.value || this.placeholder} slot=\"suffix\">\n              </ha-icon>\n            `\n          : \"\"}\n      </paper-input>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent) {\n    this.value = ev.detail.value;\n    fireEvent(\n      this,\n      \"value-changed\",\n      { value: ev.detail.value },\n      {\n        bubbles: false,\n        composed: false,\n      }\n    );\n  }\n\n  static get styles() {\n    return css`\n      ha-icon {\n        position: absolute;\n        bottom: 2px;\n        right: 0;\n      }\n    `;\n  }\n}\n","import \"@polymer/paper-input/paper-input\";\nimport { CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { assert, assign, boolean, object, optional, string } from \"superstruct\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { stateIcon } from \"../../../../common/entity/state_icon\";\nimport \"../../../../components/entity/ha-entity-attribute-picker\";\nimport \"../../../../components/ha-icon-input\";\nimport { HomeAssistant } from \"../../../../types\";\nimport { EntityCardConfig } from \"../../cards/types\";\nimport \"../../components/hui-action-editor\";\nimport \"../../components/hui-entity-editor\";\nimport \"../../components/hui-theme-select-editor\";\nimport { headerFooterConfigStructs } from \"../../header-footer/structs\";\nimport { LovelaceCardEditor } from \"../../types\";\nimport { baseLovelaceCardConfig } from \"../structs/base-card-struct\";\nimport { EditorTarget, EntitiesEditorEvent } from \"../types\";\nimport { configElementStyle } from \"./config-elements-style\";\n\nconst cardConfigStruct = assign(\n  baseLovelaceCardConfig,\n  object({\n    entity: optional(string()),\n    name: optional(string()),\n    icon: optional(string()),\n    attribute: optional(string()),\n    unit: optional(string()),\n    theme: optional(string()),\n    state_color: optional(boolean()),\n    footer: optional(headerFooterConfigStructs),\n  })\n);\n\n@customElement(\"hui-entity-card-editor\")\nexport class HuiEntityCardEditor\n  extends LitElement\n  implements LovelaceCardEditor\n{\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _config?: EntityCardConfig;\n\n  public setConfig(config: EntityCardConfig): void {\n    assert(config, cardConfigStruct);\n    this._config = config;\n  }\n\n  get _entity(): string {\n    return this._config!.entity || \"\";\n  }\n\n  get _name(): string {\n    return this._config!.name || \"\";\n  }\n\n  get _icon(): string {\n    return this._config!.icon || \"\";\n  }\n\n  get _attribute(): string {\n    return this._config!.attribute || \"\";\n  }\n\n  get _unit(): string {\n    return this._config!.unit || \"\";\n  }\n\n  get _state_color(): boolean {\n    return this._config!.state_color ?? false;\n  }\n\n  get _theme(): string {\n    return this._config!.theme || \"\";\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass || !this._config) {\n      return html``;\n    }\n\n    return html`\n      <div class=\"card-config\">\n        <ha-entity-picker\n          .label=\"${this.hass.localize(\n            \"ui.panel.lovelace.editor.card.generic.entity\"\n          )} (${this.hass.localize(\n            \"ui.panel.lovelace.editor.card.config.required\"\n          )})\"\n          .hass=${this.hass}\n          .value=${this._entity}\n          .configValue=${\"entity\"}\n          @change=${this._valueChanged}\n          allow-custom-entity\n        ></ha-entity-picker>\n        <div class=\"side-by-side\">\n          <paper-input\n            .label=\"${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.generic.name\"\n            )} (${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.config.optional\"\n            )})\"\n            .value=${this._name}\n            .configValue=${\"name\"}\n            @value-changed=${this._valueChanged}\n          ></paper-input>\n          <ha-icon-input\n            .label=\"${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.generic.icon\"\n            )} (${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.config.optional\"\n            )})\"\n            .value=${this._icon}\n            .placeholder=${this._icon ||\n            stateIcon(this.hass.states[this._entity])}\n            .configValue=${\"icon\"}\n            @value-changed=${this._valueChanged}\n          ></ha-icon-input>\n        </div>\n        <div class=\"side-by-side\">\n          <ha-entity-attribute-picker\n            .hass=${this.hass}\n            .entityId=${this._entity}\n            .label=\"${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.generic.attribute\"\n            )} (${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.config.optional\"\n            )})\"\n            .value=${this._attribute}\n            .configValue=${\"attribute\"}\n            @value-changed=${this._valueChanged}\n          ></ha-entity-attribute-picker>\n          <paper-input\n            .label=\"${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.generic.unit\"\n            )} (${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.config.optional\"\n            )})\"\n            .value=${this._unit}\n            .configValue=${\"unit\"}\n            @value-changed=${this._valueChanged}\n          ></paper-input>\n        </div>\n        <div class=\"side-by-side\">\n          <hui-theme-select-editor\n            .hass=${this.hass}\n            .value=${this._theme}\n            .configValue=${\"theme\"}\n            @value-changed=${this._valueChanged}\n          >\n          </hui-theme-select-editor>\n          <ha-formfield\n            .label=${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.generic.state_color\"\n            )}\n          >\n            <ha-switch\n              .checked=${this._config!.state_color}\n              .configValue=${\"state_color\"}\n              @change=${this._valueChanged}\n            >\n            </ha-switch>\n          </ha-formfield>\n        </div>\n      </div>\n    `;\n  }\n\n  private _valueChanged(ev: EntitiesEditorEvent): void {\n    if (!this._config || !this.hass) {\n      return;\n    }\n    const target = ev.target! as EditorTarget;\n\n    if (\n      this[`_${target.configValue}`] === target.value ||\n      this[`_${target.configValue}`] === target.config\n    ) {\n      return;\n    }\n    if (target.configValue) {\n      if (target.value === \"\") {\n        this._config = { ...this._config };\n        delete this._config[target.configValue!];\n      } else {\n        let newValue: string | undefined;\n        if (\n          target.configValue === \"icon_height\" &&\n          !isNaN(Number(target.value))\n        ) {\n          newValue = `${String(target.value)}px`;\n        }\n        this._config = {\n          ...this._config,\n          [target.configValue!]:\n            target.checked !== undefined\n              ? target.checked\n              : newValue !== undefined\n              ? newValue\n              : target.value\n              ? target.value\n              : target.config,\n        };\n      }\n    }\n    fireEvent(this, \"config-changed\", { config: this._config });\n  }\n\n  static get styles(): CSSResultGroup {\n    return configElementStyle;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-entity-card-editor\": HuiEntityCardEditor;\n  }\n}\n"],"names":[],"sourceRoot":""}