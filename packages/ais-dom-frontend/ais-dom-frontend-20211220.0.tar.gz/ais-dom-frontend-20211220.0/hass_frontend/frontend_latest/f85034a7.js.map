{"version":3,"file":"f85034a7.js","mappings":";;AAyCA;AACA;AACA;AACA;AACA;;;;;AAKA;;;AAIA;;;;;;;;;;;;;;;;;;AArCA","sources":["webpack://home-assistant-frontend/./src/common/search/search-input.ts"],"sourcesContent":["import \"@material/mwc-icon-button/mwc-icon-button\";\nimport { mdiClose, mdiMagnify } from \"@mdi/js\";\nimport \"@polymer/paper-input/paper-input\";\nimport type { PaperInputElement } from \"@polymer/paper-input/paper-input\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\nimport \"../../components/ha-svg-icon\";\nimport { fireEvent } from \"../dom/fire_event\";\n\n@customElement(\"search-input\")\nclass SearchInput extends LitElement {\n  @property() public filter?: string;\n\n  @property({ type: Boolean, attribute: \"no-label-float\" })\n  public noLabelFloat? = false;\n\n  @property({ type: Boolean, attribute: \"no-underline\" })\n  public noUnderline = false;\n\n  @property({ type: Boolean })\n  public autofocus = false;\n\n  @property({ type: String })\n  public label?: string;\n\n  public focus() {\n    this.shadowRoot!.querySelector(\"paper-input\")!.focus();\n  }\n\n  @query(\"paper-input\", true) private _input!: PaperInputElement;\n\n  protected render(): TemplateResult {\n    return html`\n      <paper-input\n        .autofocus=${this.autofocus}\n        .label=${this.label || \"Search\"}\n        .value=${this.filter}\n        @value-changed=${this._filterInputChanged}\n        .noLabelFloat=${this.noLabelFloat}\n      >\n        <slot name=\"prefix\" slot=\"prefix\">\n          <ha-svg-icon class=\"prefix\" .path=${mdiMagnify}></ha-svg-icon>\n        </slot>\n        ${this.filter &&\n        html`\n          <mwc-icon-button\n            slot=\"suffix\"\n            @click=${this._clearSearch}\n            title=\"Clear\"\n          >\n            <ha-svg-icon .path=${mdiClose}></ha-svg-icon>\n          </mwc-icon-button>\n        `}\n      </paper-input>\n    `;\n  }\n\n  protected updated(changedProps: PropertyValues) {\n    if (\n      changedProps.has(\"noUnderline\") &&\n      (this.noUnderline || changedProps.get(\"noUnderline\") !== undefined)\n    ) {\n      (\n        this._input.inputElement!.parentElement!.shadowRoot!.querySelector(\n          \"div.unfocused-line\"\n        ) as HTMLElement\n      ).style.display = this.noUnderline ? \"none\" : \"block\";\n    }\n  }\n\n  private async _filterChanged(value: string) {\n    fireEvent(this, \"value-changed\", { value: String(value) });\n  }\n\n  private async _filterInputChanged(e) {\n    this._filterChanged(e.target.value);\n  }\n\n  private async _clearSearch() {\n    this._filterChanged(\"\");\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-svg-icon,\n      mwc-icon-button {\n        color: var(--primary-text-color);\n      }\n      mwc-icon-button {\n        --mdc-icon-button-size: 24px;\n      }\n      ha-svg-icon.prefix {\n        margin: 8px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"search-input\": SearchInput;\n  }\n}\n"],"names":[],"sourceRoot":""}