{"version":3,"file":"de84290e.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuMA;;ACzFA;AACA;;;;;;AAQA;AAGA;;;;;;AAMA;AAGA;;;;;AAKA;AAGA;;;;AAIA;;AAGA;;AAMA;AAEA;;;;AAKA;;;;;;AAQA;AAGA;;;;AAIA;;;;AAQA;AACA;AACA;;;;AAIA;AACA;AACA;;;;AAKA;;AA1FA;AAkGA;AAKA;;;AAGA;AACA;AACA;;;;AAIA;AACA;AACA;;AAEA;;AAGA;;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAnMA","sources":["webpack://home-assistant-frontend/./node_modules/@polymer/paper-checkbox/paper-checkbox.js","webpack://home-assistant-frontend/./src/panels/lovelace/cards/hui-shopping-list-card.ts"],"sourcesContent":["/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\nimport '@polymer/paper-styles/default-theme.js';\n\nimport {PaperCheckedElementBehavior} from '@polymer/paper-behaviors/paper-checked-element-behavior.js';\nimport {PaperInkyFocusBehaviorImpl} from '@polymer/paper-behaviors/paper-inky-focus-behavior.js';\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\nimport {afterNextRender} from '@polymer/polymer/lib/utils/render-status.js';\n\nconst template = html`<style>\n  :host {\n    display: inline-block;\n    white-space: nowrap;\n    cursor: pointer;\n    --calculated-paper-checkbox-size: var(--paper-checkbox-size, 18px);\n    /* -1px is a sentinel for the default and is replaced in \\`attached\\`. */\n    --calculated-paper-checkbox-ink-size: var(--paper-checkbox-ink-size, -1px);\n    @apply --paper-font-common-base;\n    line-height: 0;\n    -webkit-tap-highlight-color: transparent;\n  }\n\n  :host([hidden]) {\n    display: none !important;\n  }\n\n  :host(:focus) {\n    outline: none;\n  }\n\n  .hidden {\n    display: none;\n  }\n\n  #checkboxContainer {\n    display: inline-block;\n    position: relative;\n    width: var(--calculated-paper-checkbox-size);\n    height: var(--calculated-paper-checkbox-size);\n    min-width: var(--calculated-paper-checkbox-size);\n    margin: var(--paper-checkbox-margin, initial);\n    vertical-align: var(--paper-checkbox-vertical-align, middle);\n    background-color: var(--paper-checkbox-unchecked-background-color, transparent);\n  }\n\n  #ink {\n    position: absolute;\n\n    /* Center the ripple in the checkbox by negative offsetting it by\n     * (inkWidth - rippleWidth) / 2 */\n    top: calc(0px - (var(--calculated-paper-checkbox-ink-size) - var(--calculated-paper-checkbox-size)) / 2);\n    left: calc(0px - (var(--calculated-paper-checkbox-ink-size) - var(--calculated-paper-checkbox-size)) / 2);\n    width: var(--calculated-paper-checkbox-ink-size);\n    height: var(--calculated-paper-checkbox-ink-size);\n    color: var(--paper-checkbox-unchecked-ink-color, var(--primary-text-color));\n    opacity: 0.6;\n    pointer-events: none;\n  }\n\n  #ink:dir(rtl) {\n    right: calc(0px - (var(--calculated-paper-checkbox-ink-size) - var(--calculated-paper-checkbox-size)) / 2);\n    left: auto;\n  }\n\n  #ink[checked] {\n    color: var(--paper-checkbox-checked-ink-color, var(--primary-color));\n  }\n\n  #checkbox {\n    position: relative;\n    box-sizing: border-box;\n    height: 100%;\n    border: solid 2px;\n    border-color: var(--paper-checkbox-unchecked-color, var(--primary-text-color));\n    border-radius: 2px;\n    pointer-events: none;\n    -webkit-transition: background-color 140ms, border-color 140ms;\n    transition: background-color 140ms, border-color 140ms;\n\n    -webkit-transition-duration: var(--paper-checkbox-animation-duration, 140ms);\n    transition-duration: var(--paper-checkbox-animation-duration, 140ms);\n  }\n\n  /* checkbox checked animations */\n  #checkbox.checked #checkmark {\n    -webkit-animation: checkmark-expand 140ms ease-out forwards;\n    animation: checkmark-expand 140ms ease-out forwards;\n\n    -webkit-animation-duration: var(--paper-checkbox-animation-duration, 140ms);\n    animation-duration: var(--paper-checkbox-animation-duration, 140ms);\n  }\n\n  @-webkit-keyframes checkmark-expand {\n    0% {\n      -webkit-transform: scale(0, 0) rotate(45deg);\n    }\n    100% {\n      -webkit-transform: scale(1, 1) rotate(45deg);\n    }\n  }\n\n  @keyframes checkmark-expand {\n    0% {\n      transform: scale(0, 0) rotate(45deg);\n    }\n    100% {\n      transform: scale(1, 1) rotate(45deg);\n    }\n  }\n\n  #checkbox.checked {\n    background-color: var(--paper-checkbox-checked-color, var(--primary-color));\n    border-color: var(--paper-checkbox-checked-color, var(--primary-color));\n  }\n\n  #checkmark {\n    position: absolute;\n    width: 36%;\n    height: 70%;\n    border-style: solid;\n    border-top: none;\n    border-left: none;\n    border-right-width: calc(2/15 * var(--calculated-paper-checkbox-size));\n    border-bottom-width: calc(2/15 * var(--calculated-paper-checkbox-size));\n    border-color: var(--paper-checkbox-checkmark-color, white);\n    -webkit-transform-origin: 97% 86%;\n    transform-origin: 97% 86%;\n    box-sizing: content-box; /* protect against page-level box-sizing */\n  }\n\n  #checkmark:dir(rtl) {\n    -webkit-transform-origin: 50% 14%;\n    transform-origin: 50% 14%;\n  }\n\n  /* label */\n  #checkboxLabel {\n    position: relative;\n    display: inline-block;\n    vertical-align: middle;\n    padding-left: var(--paper-checkbox-label-spacing, 8px);\n    white-space: normal;\n    line-height: normal;\n    color: var(--paper-checkbox-label-color, var(--primary-text-color));\n    @apply --paper-checkbox-label;\n  }\n\n  :host([checked]) #checkboxLabel {\n    color: var(--paper-checkbox-label-checked-color, var(--paper-checkbox-label-color, var(--primary-text-color)));\n    @apply --paper-checkbox-label-checked;\n  }\n\n  #checkboxLabel:dir(rtl) {\n    padding-right: var(--paper-checkbox-label-spacing, 8px);\n    padding-left: 0;\n  }\n\n  #checkboxLabel[hidden] {\n    display: none;\n  }\n\n  /* disabled state */\n\n  :host([disabled]) #checkbox {\n    opacity: 0.5;\n    border-color: var(--paper-checkbox-unchecked-color, var(--primary-text-color));\n  }\n\n  :host([disabled][checked]) #checkbox {\n    background-color: var(--paper-checkbox-unchecked-color, var(--primary-text-color));\n    opacity: 0.5;\n  }\n\n  :host([disabled]) #checkboxLabel  {\n    opacity: 0.65;\n  }\n\n  /* invalid state */\n  #checkbox.invalid:not(.checked) {\n    border-color: var(--paper-checkbox-error-color, var(--error-color));\n  }\n</style>\n\n<div id=\"checkboxContainer\">\n  <div id=\"checkbox\" class$=\"[[_computeCheckboxClass(checked, invalid)]]\">\n    <div id=\"checkmark\" class$=\"[[_computeCheckmarkClass(checked)]]\"></div>\n  </div>\n</div>\n\n<div id=\"checkboxLabel\"><slot></slot></div>`;\ntemplate.setAttribute('strip-whitespace', '');\n\n/**\nMaterial design:\n[Checkbox](https://www.google.com/design/spec/components/selection-controls.html#selection-controls-checkbox)\n\n`paper-checkbox` is a button that can be either checked or unchecked. User can\ntap the checkbox to check or uncheck it. Usually you use checkboxes to allow\nuser to select multiple options from a set. If you have a single ON/OFF option,\navoid using a single checkbox and use `paper-toggle-button` instead.\n\nExample:\n\n    <paper-checkbox>label</paper-checkbox>\n\n    <paper-checkbox checked> label</paper-checkbox>\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-checkbox-unchecked-background-color` | Checkbox background color when the input is not checked | `transparent`\n`--paper-checkbox-unchecked-color` | Checkbox border color when the input is not checked | `--primary-text-color`\n`--paper-checkbox-unchecked-ink-color` | Selected/focus ripple color when the input is not checked | `--primary-text-color`\n`--paper-checkbox-checked-color` | Checkbox color when the input is checked | `--primary-color`\n`--paper-checkbox-checked-ink-color` | Selected/focus ripple color when the input is checked | `--primary-color`\n`--paper-checkbox-checkmark-color` | Checkmark color | `white`\n`--paper-checkbox-label-color` | Label color | `--primary-text-color`\n`--paper-checkbox-label-checked-color` | Label color when the input is checked | `--paper-checkbox-label-color`\n`--paper-checkbox-label-spacing` | Spacing between the label and the checkbox | `8px`\n`--paper-checkbox-label` | Mixin applied to the label | `{}`\n`--paper-checkbox-label-checked` | Mixin applied to the label when the input is checked | `{}`\n`--paper-checkbox-error-color` | Checkbox color when invalid | `--error-color`\n`--paper-checkbox-size` | Size of the checkbox | `18px`\n`--paper-checkbox-ink-size` | Size of the ripple | `48px`\n`--paper-checkbox-margin` | Margin around the checkbox container | `initial`\n`--paper-checkbox-vertical-align` | Vertical alignment of the checkbox container | `middle`\n\nThis element applies the mixin `--paper-font-common-base` but does not import\n`paper-styles/typography.html`. In order to apply the `Roboto` font to this\nelement, make sure you've imported `paper-styles/typography.html`.\n\n@demo demo/index.html\n*/\nPolymer({\n  _template: template,\n\n  is: 'paper-checkbox',\n\n  behaviors: [PaperCheckedElementBehavior],\n\n  /** @private */\n  hostAttributes: {role: 'checkbox', 'aria-checked': false, tabindex: 0},\n\n  properties: {\n    /**\n     * Fired when the checked state changes due to user interaction.\n     *\n     * @event change\n     */\n\n    /**\n     * Fired when the checked state changes.\n     *\n     * @event iron-change\n     */\n    ariaActiveAttribute: {type: String, value: 'aria-checked'}\n  },\n\n  attached: function() {\n    // Wait until styles have resolved to check for the default sentinel.\n    // See polymer#4009 for more details.\n    afterNextRender(this, function() {\n      var inkSize =\n          this.getComputedStyleValue('--calculated-paper-checkbox-ink-size')\n              .trim();\n      // If unset, compute and set the default `--paper-checkbox-ink-size`.\n      if (inkSize === '-1px') {\n        var checkboxSizeText =\n            this.getComputedStyleValue('--calculated-paper-checkbox-size')\n                .trim();\n\n        var units = 'px';\n        var unitsMatches = checkboxSizeText.match(/[A-Za-z]+$/);\n        if (unitsMatches !== null) {\n          units = unitsMatches[0];\n        }\n\n        var checkboxSize = parseFloat(checkboxSizeText);\n        var defaultInkSize = (8 / 3) * checkboxSize;\n\n        if (units === 'px') {\n          defaultInkSize = Math.floor(defaultInkSize);\n\n          // The checkbox and ripple need to have the same parity so that their\n          // centers align.\n          if (defaultInkSize % 2 !== checkboxSize % 2) {\n            defaultInkSize++;\n          }\n        }\n\n        this.updateStyles({\n          '--paper-checkbox-ink-size': defaultInkSize + units,\n        });\n      }\n    });\n  },\n\n  _computeCheckboxClass: function(checked, invalid) {\n    var className = '';\n    if (checked) {\n      className += 'checked ';\n    }\n    if (invalid) {\n      className += 'invalid';\n    }\n    return className;\n  },\n\n  _computeCheckmarkClass: function(checked) {\n    return checked ? '' : 'hidden';\n  },\n\n  // create ripple inside the checkboxContainer\n  _createRipple: function() {\n    this._rippleContainer = this.$.checkboxContainer;\n    return PaperInkyFocusBehaviorImpl._createRipple.call(this);\n  }\n\n});\n","import { mdiDrag, mdiNotificationClearAll, mdiPlus, mdiSort } from \"@mdi/js\";\nimport \"@polymer/paper-checkbox/paper-checkbox\";\nimport { PaperInputElement } from \"@polymer/paper-input/paper-input\";\nimport { UnsubscribeFunc } from \"home-assistant-js-websocket\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state, query } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { guard } from \"lit/directives/guard\";\nimport { repeat } from \"lit/directives/repeat\";\nimport { applyThemesOnElement } from \"../../../common/dom/apply_themes_on_element\";\nimport \"../../../components/ha-card\";\nimport \"../../../components/ha-icon\";\nimport {\n  addItem,\n  clearItems,\n  fetchItems,\n  reorderItems,\n  ShoppingListItem,\n  updateItem,\n} from \"../../../data/shopping-list\";\nimport { SubscribeMixin } from \"../../../mixins/subscribe-mixin\";\nimport { HomeAssistant } from \"../../../types\";\nimport { LovelaceCard, LovelaceCardEditor } from \"../types\";\nimport { SensorCardConfig, ShoppingListCardConfig } from \"./types\";\n\nlet Sortable;\n\n@customElement(\"hui-shopping-list-card\")\nclass HuiShoppingListCard\n  extends SubscribeMixin(LitElement)\n  implements LovelaceCard\n{\n  public static async getConfigElement(): Promise<LovelaceCardEditor> {\n    await import(\"../editor/config-elements/hui-shopping-list-editor\");\n    return document.createElement(\"hui-shopping-list-card-editor\");\n  }\n\n  public static getStubConfig(): ShoppingListCardConfig {\n    return { type: \"shopping-list\" };\n  }\n\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _config?: ShoppingListCardConfig;\n\n  @state() private _uncheckedItems?: ShoppingListItem[];\n\n  @state() private _checkedItems?: ShoppingListItem[];\n\n  @state() private _reordering = false;\n\n  @state() private _renderEmptySortable = false;\n\n  private _sortable?;\n\n  @query(\"#sortable\") private _sortableEl?: HTMLElement;\n\n  public getCardSize(): number {\n    return (this._config ? (this._config.title ? 2 : 0) : 0) + 3;\n  }\n\n  public setConfig(config: ShoppingListCardConfig): void {\n    this._config = config;\n    this._uncheckedItems = [];\n    this._checkedItems = [];\n  }\n\n  public hassSubscribe(): Promise<UnsubscribeFunc>[] {\n    this._fetchData();\n    return [\n      this.hass!.connection.subscribeEvents(\n        () => this._fetchData(),\n        \"shopping_list_updated\"\n      ),\n    ];\n  }\n\n  protected updated(changedProps: PropertyValues): void {\n    super.updated(changedProps);\n    if (!this._config || !this.hass) {\n      return;\n    }\n\n    const oldHass = changedProps.get(\"hass\") as HomeAssistant | undefined;\n    const oldConfig = changedProps.get(\"_config\") as\n      | SensorCardConfig\n      | undefined;\n\n    if (\n      (changedProps.has(\"hass\") && oldHass?.themes !== this.hass.themes) ||\n      (changedProps.has(\"_config\") && oldConfig?.theme !== this._config.theme)\n    ) {\n      applyThemesOnElement(this, this.hass.themes, this._config.theme);\n    }\n  }\n\n  protected render(): TemplateResult {\n    if (!this._config || !this.hass) {\n      return html``;\n    }\n\n    return html`\n      <ha-card\n        .header=${this._config.title}\n        class=${classMap({\n          \"has-header\": \"title\" in this._config,\n        })}\n      >\n        <div class=\"addRow\">\n          <ha-svg-icon\n            class=\"addButton\"\n            .path=${mdiPlus}\n            .title=${this.hass!.localize(\n              \"ui.panel.lovelace.cards.shopping-list.add_item\"\n            )}\n            @click=${this._addItem}\n          >\n          </ha-svg-icon>\n          <paper-input\n            no-label-float\n            class=\"addBox\"\n            placeholder=${this.hass!.localize(\n              \"ui.panel.lovelace.cards.shopping-list.add_item\"\n            )}\n            @keydown=${this._addKeyPress}\n          ></paper-input>\n          <ha-svg-icon\n            class=\"reorderButton\"\n            .path=${mdiSort}\n            .title=${this.hass!.localize(\n              \"ui.panel.lovelace.cards.shopping-list.reorder_items\"\n            )}\n            @click=${this._toggleReorder}\n          >\n          </ha-svg-icon>\n        </div>\n        ${this._reordering\n          ? html`\n              <div id=\"sortable\">\n                ${guard([this._uncheckedItems, this._renderEmptySortable], () =>\n                  this._renderEmptySortable\n                    ? \"\"\n                    : this._renderItems(this._uncheckedItems!)\n                )}\n              </div>\n            `\n          : this._renderItems(this._uncheckedItems!)}\n        ${this._checkedItems!.length > 0\n          ? html`\n              <div class=\"divider\"></div>\n              <div class=\"checked\">\n                <span>\n                  ${this.hass!.localize(\n                    \"ui.panel.lovelace.cards.shopping-list.checked_items\"\n                  )}\n                </span>\n                <ha-svg-icon\n                  class=\"clearall\"\n                  tabindex=\"0\"\n                  .path=${mdiNotificationClearAll}\n                  .title=${this.hass!.localize(\n                    \"ui.panel.lovelace.cards.shopping-list.clear_items\"\n                  )}\n                  @click=${this._clearItems}\n                >\n                </ha-svg-icon>\n              </div>\n              ${repeat(\n                this._checkedItems!,\n                (item) => item.id,\n                (item) =>\n                  html`\n                    <div class=\"editRow\">\n                      <paper-checkbox\n                        tabindex=\"0\"\n                        ?checked=${item.complete}\n                        .itemId=${item.id}\n                        @click=${this._completeItem}\n                      ></paper-checkbox>\n                      <paper-input\n                        no-label-float\n                        .value=${item.name}\n                        .itemId=${item.id}\n                        @change=${this._saveEdit}\n                      ></paper-input>\n                    </div>\n                  `\n              )}\n            `\n          : \"\"}\n      </ha-card>\n    `;\n  }\n\n  private _renderItems(items: ShoppingListItem[]) {\n    return html`\n      ${repeat(\n        items,\n        (item) => item.id,\n        (item) =>\n          html`\n            <div class=\"editRow\" item-id=${item.id}>\n              <paper-checkbox\n                tabindex=\"0\"\n                ?checked=${item.complete}\n                .itemId=${item.id}\n                @click=${this._completeItem}\n              ></paper-checkbox>\n              <paper-input\n                no-label-float\n                .value=${item.name}\n                .itemId=${item.id}\n                @change=${this._saveEdit}\n              ></paper-input>\n              ${this._reordering\n                ? html`\n                    <ha-svg-icon\n                      .title=${this.hass!.localize(\n                        \"ui.panel.lovelace.cards.shopping-list.drag_and_drop\"\n                      )}\n                      class=\"reorderButton\"\n                      .path=${mdiDrag}\n                    >\n                    </ha-svg-icon>\n                  `\n                : \"\"}\n            </div>\n          `\n      )}\n    `;\n  }\n\n  private async _fetchData(): Promise<void> {\n    if (!this.hass) {\n      return;\n    }\n    const checkedItems: ShoppingListItem[] = [];\n    const uncheckedItems: ShoppingListItem[] = [];\n    const items = await fetchItems(this.hass);\n    for (const key in items) {\n      if (items[key].complete) {\n        checkedItems.push(items[key]);\n      } else {\n        uncheckedItems.push(items[key]);\n      }\n    }\n    this._checkedItems = checkedItems;\n    this._uncheckedItems = uncheckedItems;\n  }\n\n  private _completeItem(ev): void {\n    updateItem(this.hass!, ev.target.itemId, {\n      complete: ev.target.checked,\n    }).catch(() => this._fetchData());\n  }\n\n  private _saveEdit(ev): void {\n    updateItem(this.hass!, ev.target.itemId, {\n      name: ev.target.value,\n    }).catch(() => this._fetchData());\n\n    ev.target.blur();\n  }\n\n  private _clearItems(): void {\n    if (this.hass) {\n      clearItems(this.hass).catch(() => this._fetchData());\n    }\n  }\n\n  private get _newItem(): PaperInputElement {\n    return this.shadowRoot!.querySelector(\".addBox\") as PaperInputElement;\n  }\n\n  private _addItem(ev): void {\n    const newItem = this._newItem;\n\n    if (newItem.value!.length > 0) {\n      addItem(this.hass!, newItem.value!).catch(() => this._fetchData());\n    }\n\n    newItem.value = \"\";\n    if (ev) {\n      newItem.focus();\n    }\n  }\n\n  private _addKeyPress(ev): void {\n    if (ev.keyCode === 13) {\n      this._addItem(null);\n    }\n  }\n\n  private async _toggleReorder() {\n    if (!Sortable) {\n      const sortableImport = await import(\n        \"sortablejs/modular/sortable.core.esm\"\n      );\n      Sortable = sortableImport.Sortable;\n    }\n    this._reordering = !this._reordering;\n    await this.updateComplete;\n    if (this._reordering) {\n      this._createSortable();\n    } else {\n      this._sortable?.destroy();\n      this._sortable = undefined;\n    }\n  }\n\n  private _createSortable() {\n    const sortableEl = this._sortableEl;\n    this._sortable = new Sortable(sortableEl, {\n      animation: 150,\n      fallbackClass: \"sortable-fallback\",\n      dataIdAttr: \"item-id\",\n      handle: \"ha-svg-icon\",\n      onEnd: async (evt) => {\n        // Since this is `onEnd` event, it's possible that\n        // an item wa dragged away and was put back to its original position.\n        if (evt.oldIndex !== evt.newIndex) {\n          reorderItems(this.hass!, this._sortable.toArray()).catch(() =>\n            this._fetchData()\n          );\n          // Move the shopping list item in memory.\n          this._uncheckedItems!.splice(\n            evt.newIndex,\n            0,\n            this._uncheckedItems!.splice(evt.oldIndex, 1)[0]\n          );\n        }\n        this._renderEmptySortable = true;\n        await this.updateComplete;\n        while (sortableEl?.lastElementChild) {\n          sortableEl.removeChild(sortableEl.lastElementChild);\n        }\n        this._renderEmptySortable = false;\n      },\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-card {\n        padding: 16px;\n        height: 100%;\n        box-sizing: border-box;\n      }\n\n      .has-header {\n        padding-top: 0;\n      }\n\n      .editRow,\n      .addRow,\n      .checked {\n        display: flex;\n        flex-direction: row;\n        align-items: center;\n      }\n\n      .addRow ha-icon {\n        color: var(--secondary-text-color);\n        --mdc-icon-size: 26px;\n      }\n\n      .addButton {\n        padding-right: 16px;\n        cursor: pointer;\n      }\n\n      .reorderButton {\n        padding-left: 16px;\n        cursor: pointer;\n      }\n\n      paper-checkbox {\n        padding-left: 4px;\n        padding-right: 20px;\n        --paper-checkbox-label-spacing: 0px;\n      }\n\n      paper-input {\n        flex-grow: 1;\n      }\n\n      .checked {\n        margin: 12px 0;\n        justify-content: space-between;\n      }\n\n      .checked span {\n        color: var(--primary-text-color);\n        font-weight: 500;\n      }\n\n      .divider {\n        height: 1px;\n        background-color: var(--divider-color);\n        margin: 10px 0;\n      }\n\n      .clearall {\n        cursor: pointer;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-shopping-list-card\": HuiShoppingListCard;\n  }\n}\n"],"names":[],"sourceRoot":""}