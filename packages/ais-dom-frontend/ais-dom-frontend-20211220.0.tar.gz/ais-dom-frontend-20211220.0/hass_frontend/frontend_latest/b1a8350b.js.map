{"version":3,"file":"b1a8350b.js","mappings":";;;AAyDA;AACA;;AAEA;;;AAIA;AACA;AACA;AAOA;;;AAaA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAQA;;;AAIA;;AAQA;;;AAaA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;;AAKA;;;;ACpJA;;ACmPA;AACA;AACA;AACA;;;AAMA;;;AAGA;AAKA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;;;AAIA;AAGA;;;AAGA;AACA;AACA;;;;AAIA;AAGA;;;AAGA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;;AA9EA;;;;;;;;;;;AA5BA;;;AC5LA;AAGA;;;;AAQA;;AAcA;;AAIA;;;;;AAKA;;AAIA;;;;AA3BA;;AAGA;;AAIA;;;;;;AA/BA;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;ACkDA;;;AAQA;;;AAOA;;;;AAKA;;;AAKA;;;;AAMA;;;;AAKA;AACA;AACA;AACA;;;;AAIA;;AAIA;AACA;;;;;AAKA;;AAIA;AACA;;;;;;;;AAUA;AACA;;AA1EA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAzBA;;;ACKA;;;;AAIA;;;;;AAOA;AACA;;AAEA;;;AAOA;;;AAIA;AACA;AACA;AACA;;AAEA;;;AAKA;AACA;AACA;AACA;;AAEA;AAzDA;;;;;;;;;;;AAAA","sources":["webpack://home-assistant-frontend/mwc-circular-progress-base.ts","webpack://home-assistant-frontend/./src/components/ha-circular-progress.ts","webpack://home-assistant-frontend/./src/panels/lovelace/editor/config-elements/hui-entities-card-editor.ts","webpack://home-assistant-frontend/./src/panels/lovelace/editor/header-footer-editor/hui-header-footer-editor.ts","webpack://home-assistant-frontend/./src/panels/lovelace/editor/hui-entities-card-row-editor.ts","webpack://home-assistant-frontend/./src/panels/lovelace/editor/hui-sub-element-editor.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\n\nimport {ariaProperty} from '@material/mwc-base/aria-property';\nimport {html, LitElement, property, TemplateResult} from 'lit-element';\nimport {classMap} from 'lit-html/directives/class-map.js';\nimport {ifDefined} from 'lit-html/directives/if-defined.js';\nimport {styleMap} from 'lit-html/directives/style-map.js';\n\n/** @soyCompatible */\nexport class CircularProgressBase extends LitElement {\n  @property({type: Boolean, reflect: true}) indeterminate = false;\n\n  @property({type: Number, reflect: true}) progress = 0;\n\n  @property({type: Number, reflect: true}) density = 0;\n\n  @property({type: Boolean, reflect: true}) closed = false;\n\n  /** @soyPrefixAttribute */\n  @ariaProperty\n  @property({type: String, attribute: 'aria-label'})\n  ariaLabel!: string\n\n  open() {\n    this.closed = false;\n  }\n\n  close() {\n    this.closed = true;\n  }\n\n  /**\n   * @soyTemplate\n   */\n  protected override render(): TemplateResult {\n    /** @classMap */\n    const classes = {\n      'mdc-circular-progress--closed': this.closed,\n      'mdc-circular-progress--indeterminate': this.indeterminate,\n    };\n\n    const containerSideLength = 48 + this.density * 4;\n    /** @styleMap */\n    const styles = {\n      'width': `${containerSideLength}px`,\n      'height': `${containerSideLength}px`,\n    };\n\n    return html`\n      <div\n        class=\"mdc-circular-progress ${classMap(classes)}\"\n        style=\"${styleMap(styles)}\"\n        role=\"progressbar\"\n        aria-label=\"${ifDefined(this.ariaLabel)}\"\n        aria-valuemin=\"0\"\n        aria-valuemax=\"1\"\n        aria-valuenow=\"${\n        ifDefined(this.indeterminate ? undefined : this.progress)}\">\n        ${this.renderDeterminateContainer()}\n        ${this.renderIndeterminateContainer()}\n      </div>`;\n  }\n\n  /**\n   * @soyTemplate\n   */\n  protected renderDeterminateContainer(): TemplateResult {\n    const sideLength = 48 + this.density * 4;\n    const center = sideLength / 2;\n    const circleRadius = this.density >= -3 ? 18 + this.density * 11 / 6 :\n                                              12.5 + (this.density + 3) * 5 / 4;\n    const circumference = 2 * 3.1415926 * circleRadius;\n    const determinateStrokeDashOffset = (1 - this.progress) * circumference;\n    const strokeWidth = this.density >= -3 ? 4 + this.density * (1 / 3) :\n                                             3 + (this.density + 3) * (1 / 6);\n\n    return html`\n      <div class=\"mdc-circular-progress__determinate-container\">\n        <svg class=\"mdc-circular-progress__determinate-circle-graphic\"\n             viewBox=\"0 0 ${sideLength} ${sideLength}\">\n          <circle class=\"mdc-circular-progress__determinate-track\"\n                  cx=\"${center}\" cy=\"${center}\" r=\"${circleRadius}\"\n                  stroke-width=\"${strokeWidth}\"></circle>\n          <circle class=\"mdc-circular-progress__determinate-circle\"\n                  cx=\"${center}\" cy=\"${center}\" r=\"${circleRadius}\"\n                  stroke-dasharray=\"${2 * 3.1415926 * circleRadius}\"\n                  stroke-dashoffset=\"${determinateStrokeDashOffset}\"\n                  stroke-width=\"${strokeWidth}\"></circle>\n        </svg>\n      </div>`;\n  }\n\n  /**\n   * @soyTemplate\n   */\n  protected renderIndeterminateContainer(): TemplateResult {\n    return html`\n      <div class=\"mdc-circular-progress__indeterminate-container\">\n        <div class=\"mdc-circular-progress__spinner-layer\">\n          ${this.renderIndeterminateSpinnerLayer()}\n        </div>\n      </div>`;\n  }\n\n  /**\n   * @soyTemplate\n   */\n  protected renderIndeterminateSpinnerLayer(): TemplateResult {\n    const sideLength = 48 + this.density * 4;\n    const center = sideLength / 2;\n    const circleRadius = this.density >= -3 ? 18 + this.density * 11 / 6 :\n                                              12.5 + (this.density + 3) * 5 / 4;\n    const circumference = 2 * 3.1415926 * circleRadius;\n    const halfCircumference = 0.5 * circumference;\n    const strokeWidth = this.density >= -3 ? 4 + this.density * (1 / 3) :\n                                             3 + (this.density + 3) * (1 / 6);\n\n    return html`\n        <div class=\"mdc-circular-progress__circle-clipper mdc-circular-progress__circle-left\">\n          <svg class=\"mdc-circular-progress__indeterminate-circle-graphic\"\n               viewBox=\"0 0 ${sideLength} ${sideLength}\">\n            <circle cx=\"${center}\" cy=\"${center}\" r=\"${circleRadius}\"\n                    stroke-dasharray=\"${circumference}\"\n                    stroke-dashoffset=\"${halfCircumference}\"\n                    stroke-width=\"${strokeWidth}\"></circle>\n          </svg>\n        </div>\n        <div class=\"mdc-circular-progress__gap-patch\">\n          <svg class=\"mdc-circular-progress__indeterminate-circle-graphic\"\n               viewBox=\"0 0 ${sideLength} ${sideLength}\">\n            <circle cx=\"${center}\" cy=\"${center}\" r=\"${circleRadius}\"\n                    stroke-dasharray=\"${circumference}\"\n                    stroke-dashoffset=\"${halfCircumference}\"\n                    stroke-width=\"${strokeWidth * 0.8}\"></circle>\n          </svg>\n        </div>\n        <div class=\"mdc-circular-progress__circle-clipper mdc-circular-progress__circle-right\">\n          <svg class=\"mdc-circular-progress__indeterminate-circle-graphic\"\n               viewBox=\"0 0 ${sideLength} ${sideLength}\">\n            <circle cx=\"${center}\" cy=\"${center}\" r=\"${circleRadius}\"\n                    stroke-dasharray=\"${circumference}\"\n                    stroke-dashoffset=\"${halfCircumference}\"\n                    stroke-width=\"${strokeWidth}\"></circle>\n          </svg>\n        </div>`;\n  }\n\n  override update(changedProperties: Map<string, string>) {\n    super.update(changedProperties);\n\n    // Bound progress value in interval [0, 1].\n    if (changedProperties.has('progress')) {\n      if (this.progress > 1) {\n        this.progress = 1;\n      }\n\n      if (this.progress < 0) {\n        this.progress = 0;\n      }\n    }\n  }\n}\n","import { CircularProgress } from \"@material/mwc-circular-progress\";\nimport { CSSResultGroup, css } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-circular-progress\")\n// @ts-ignore\nexport class HaCircularProgress extends CircularProgress {\n  @property({ type: Boolean })\n  public active = false;\n\n  @property()\n  public alt = \"Loading\";\n\n  @property()\n  public size: \"tiny\" | \"small\" | \"medium\" | \"large\" = \"medium\";\n\n  // @ts-ignore\n  public set density(_) {\n    // just a dummy\n  }\n\n  public get density() {\n    switch (this.size) {\n      case \"tiny\":\n        return -8;\n      case \"small\":\n        return -5;\n      case \"medium\":\n        return 0;\n      case \"large\":\n        return 5;\n      default:\n        return 0;\n    }\n  }\n\n  // @ts-ignore\n  public set indeterminate(_) {\n    // just a dummy\n  }\n\n  public get indeterminate() {\n    return this.active;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      super.styles,\n      css`\n        :host {\n          overflow: hidden;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-circular-progress\": HaCircularProgress;\n  }\n}\n","import \"@polymer/paper-dropdown-menu/paper-dropdown-menu\";\nimport \"@polymer/paper-input/paper-input\";\nimport \"@polymer/paper-item/paper-item\";\nimport \"@polymer/paper-listbox/paper-listbox\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport {\n  any,\n  array,\n  assert,\n  assign,\n  boolean,\n  dynamic,\n  enums,\n  literal,\n  number,\n  object,\n  optional,\n  string,\n  type,\n  union,\n} from \"superstruct\";\nimport { fireEvent, HASSDomEvent } from \"../../../../common/dom/fire_event\";\nimport {\n  customType,\n  isCustomType,\n} from \"../../../../common/structs/is-custom-type\";\nimport { entityId } from \"../../../../common/structs/is-entity-id\";\nimport { computeRTLDirection } from \"../../../../common/util/compute_rtl\";\nimport \"../../../../components/entity/state-badge\";\nimport \"../../../../components/ha-card\";\nimport \"../../../../components/ha-formfield\";\nimport \"../../../../components/ha-icon\";\nimport \"../../../../components/ha-switch\";\nimport type { HomeAssistant } from \"../../../../types\";\nimport type { EntitiesCardConfig } from \"../../cards/types\";\nimport \"../../components/hui-theme-select-editor\";\nimport { TIMESTAMP_RENDERING_FORMATS } from \"../../components/types\";\nimport type { LovelaceRowConfig } from \"../../entity-rows/types\";\nimport { headerFooterConfigStructs } from \"../../header-footer/structs\";\nimport type { LovelaceCardEditor } from \"../../types\";\nimport \"../header-footer-editor/hui-header-footer-editor\";\nimport \"../hui-entities-card-row-editor\";\nimport \"../hui-sub-element-editor\";\nimport { processEditorEntities } from \"../process-editor-entities\";\nimport { actionConfigStruct } from \"../structs/action-struct\";\nimport { baseLovelaceCardConfig } from \"../structs/base-card-struct\";\nimport { entitiesConfigStruct } from \"../structs/entities-struct\";\nimport {\n  EditorTarget,\n  EditSubElementEvent,\n  SubElementEditorConfig,\n} from \"../types\";\nimport { configElementStyle } from \"./config-elements-style\";\n\nconst buttonEntitiesRowConfigStruct = object({\n  type: literal(\"button\"),\n  entity: optional(string()),\n  name: optional(string()),\n  icon: optional(string()),\n  action_name: optional(string()),\n  tap_action: actionConfigStruct,\n  hold_action: optional(actionConfigStruct),\n  double_tap_action: optional(actionConfigStruct),\n});\n\nconst castEntitiesRowConfigStruct = object({\n  type: literal(\"cast\"),\n  view: union([string(), number()]),\n  dashboard: optional(string()),\n  name: optional(string()),\n  icon: optional(string()),\n  hide_if_unavailable: optional(boolean()),\n});\n\nconst callServiceEntitiesRowConfigStruct = object({\n  type: literal(\"call-service\"),\n  name: string(),\n  service: string(),\n  icon: optional(string()),\n  action_name: optional(string()),\n  service_data: optional(any()),\n});\n\nconst conditionalEntitiesRowConfigStruct = object({\n  type: literal(\"conditional\"),\n  row: any(),\n  conditions: array(\n    object({\n      entity: string(),\n      state: optional(string()),\n      state_not: optional(string()),\n    })\n  ),\n});\n\nconst dividerEntitiesRowConfigStruct = object({\n  type: literal(\"divider\"),\n  style: optional(any()),\n});\n\nconst sectionEntitiesRowConfigStruct = object({\n  type: literal(\"section\"),\n  label: optional(string()),\n});\n\nconst webLinkEntitiesRowConfigStruct = object({\n  type: literal(\"weblink\"),\n  url: string(),\n  name: optional(string()),\n  icon: optional(string()),\n});\n\nconst buttonsEntitiesRowConfigStruct = object({\n  type: literal(\"buttons\"),\n  entities: array(\n    union([\n      object({\n        entity: string(),\n        name: optional(string()),\n        icon: optional(string()),\n        image: optional(string()),\n        show_name: optional(boolean()),\n        show_icon: optional(boolean()),\n        tap_action: optional(actionConfigStruct),\n        hold_action: optional(actionConfigStruct),\n        double_tap_action: optional(actionConfigStruct),\n      }),\n      string(),\n    ])\n  ),\n});\n\nconst attributeEntitiesRowConfigStruct = object({\n  type: literal(\"attribute\"),\n  entity: string(),\n  attribute: string(),\n  prefix: optional(string()),\n  suffix: optional(string()),\n  name: optional(string()),\n  icon: optional(string()),\n  format: optional(enums(TIMESTAMP_RENDERING_FORMATS)),\n});\n\nconst textEntitiesRowConfigStruct = object({\n  type: literal(\"text\"),\n  name: string(),\n  text: string(),\n  icon: optional(string()),\n});\n\nconst customEntitiesRowConfigStruct = type({\n  type: customType(),\n});\n\nconst entitiesRowConfigStruct = dynamic<any>((value) => {\n  if (value && typeof value === \"object\" && \"type\" in value) {\n    if (isCustomType((value as LovelaceRowConfig).type!)) {\n      return customEntitiesRowConfigStruct;\n    }\n\n    switch ((value as LovelaceRowConfig).type!) {\n      case \"attribute\": {\n        return attributeEntitiesRowConfigStruct;\n      }\n      case \"button\": {\n        return buttonEntitiesRowConfigStruct;\n      }\n      case \"buttons\": {\n        return buttonsEntitiesRowConfigStruct;\n      }\n      case \"call-service\": {\n        return callServiceEntitiesRowConfigStruct;\n      }\n      case \"cast\": {\n        return castEntitiesRowConfigStruct;\n      }\n      case \"conditional\": {\n        return conditionalEntitiesRowConfigStruct;\n      }\n      case \"divider\": {\n        return dividerEntitiesRowConfigStruct;\n      }\n      case \"section\": {\n        return sectionEntitiesRowConfigStruct;\n      }\n      case \"text\": {\n        return textEntitiesRowConfigStruct;\n      }\n      case \"weblink\": {\n        return webLinkEntitiesRowConfigStruct;\n      }\n    }\n  }\n\n  // No \"type\" property => has to be the default entity row config struct\n  return entitiesConfigStruct;\n});\n\nconst cardConfigStruct = assign(\n  baseLovelaceCardConfig,\n  object({\n    title: optional(union([string(), boolean()])),\n    entity: optional(entityId()),\n    theme: optional(string()),\n    icon: optional(string()),\n    show_header_toggle: optional(boolean()),\n    state_color: optional(boolean()),\n    entities: array(entitiesRowConfigStruct),\n    header: optional(headerFooterConfigStructs),\n    footer: optional(headerFooterConfigStructs),\n  })\n);\n\n@customElement(\"hui-entities-card-editor\")\nexport class HuiEntitiesCardEditor\n  extends LitElement\n  implements LovelaceCardEditor\n{\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _config?: EntitiesCardConfig;\n\n  @state() private _configEntities?: LovelaceRowConfig[];\n\n  @state() private _subElementEditorConfig?: SubElementEditorConfig;\n\n  public setConfig(config: EntitiesCardConfig): void {\n    assert(config, cardConfigStruct);\n    this._config = config;\n    this._configEntities = processEditorEntities(config.entities);\n  }\n\n  get _title(): string {\n    return this._config!.title || \"\";\n  }\n\n  get _theme(): string {\n    return this._config!.theme || \"\";\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass || !this._config) {\n      return html``;\n    }\n\n    if (this._subElementEditorConfig) {\n      return html`\n        <hui-sub-element-editor\n          .hass=${this.hass}\n          .config=${this._subElementEditorConfig}\n          @go-back=${this._goBack}\n          @config-changed=${this._handleSubElementChanged}\n        >\n        </hui-sub-element-editor>\n      `;\n    }\n\n    return html`\n      <div class=\"card-config\">\n        <paper-input\n          .label=\"${this.hass.localize(\n            \"ui.panel.lovelace.editor.card.generic.title\"\n          )} (${this.hass.localize(\n            \"ui.panel.lovelace.editor.card.config.optional\"\n          )})\"\n          .value=${this._title}\n          .configValue=${\"title\"}\n          @value-changed=${this._valueChanged}\n        ></paper-input>\n        <hui-theme-select-editor\n          .hass=${this.hass}\n          .value=${this._theme}\n          .configValue=${\"theme\"}\n          @value-changed=${this._valueChanged}\n        ></hui-theme-select-editor>\n        <div class=\"side-by-side\">\n          <ha-formfield\n            .label=${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.entities.show_header_toggle\"\n            )}\n            .dir=${computeRTLDirection(this.hass)}\n          >\n            <ha-switch\n              .checked=${this._config!.show_header_toggle !== false}\n              .configValue=${\"show_header_toggle\"}\n              @change=${this._valueChanged}\n            ></ha-switch>\n          </ha-formfield>\n          <ha-formfield\n            .label=${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.generic.state_color\"\n            )}\n            .dir=${computeRTLDirection(this.hass)}\n          >\n            <ha-switch\n              .checked=${this._config!.state_color}\n              .configValue=${\"state_color\"}\n              @change=${this._valueChanged}\n            ></ha-switch>\n          </ha-formfield>\n        </div>\n        <hui-header-footer-editor\n          .hass=${this.hass}\n          .configValue=${\"header\"}\n          .config=${this._config.header}\n          @value-changed=${this._valueChanged}\n          @edit-detail-element=${this._editDetailElement}\n        ></hui-header-footer-editor>\n        <hui-header-footer-editor\n          .hass=${this.hass}\n          .configValue=${\"footer\"}\n          .config=${this._config.footer}\n          @value-changed=${this._valueChanged}\n          @edit-detail-element=${this._editDetailElement}\n        ></hui-header-footer-editor>\n      </div>\n      <hui-entities-card-row-editor\n        .hass=${this.hass}\n        .entities=${this._configEntities}\n        @entities-changed=${this._valueChanged}\n        @edit-detail-element=${this._editDetailElement}\n      ></hui-entities-card-row-editor>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    ev.stopPropagation();\n    if (!this._config || !this.hass) {\n      return;\n    }\n\n    const target = ev.target! as EditorTarget;\n    const configValue =\n      target.configValue || this._subElementEditorConfig?.type;\n    const value =\n      target.checked !== undefined\n        ? target.checked\n        : target.value || ev.detail.config || ev.detail.value;\n\n    if (\n      (configValue! === \"title\" && target.value === this._title) ||\n      (configValue! === \"theme\" && target.value === this._theme)\n    ) {\n      return;\n    }\n\n    if (configValue === \"row\" || (ev.detail && ev.detail.entities)) {\n      const newConfigEntities =\n        ev.detail.entities || this._configEntities!.concat();\n      if (configValue === \"row\") {\n        if (!value) {\n          newConfigEntities.splice(this._subElementEditorConfig!.index!, 1);\n          this._goBack();\n        } else {\n          newConfigEntities[this._subElementEditorConfig!.index!] = value;\n        }\n\n        this._subElementEditorConfig!.elementConfig = value;\n      }\n\n      this._config = { ...this._config!, entities: newConfigEntities };\n      this._configEntities = processEditorEntities(this._config!.entities);\n    } else if (configValue) {\n      if (value === \"\") {\n        this._config = { ...this._config };\n        delete this._config[configValue!];\n      } else {\n        this._config = {\n          ...this._config,\n          [configValue]: value,\n        };\n      }\n    }\n\n    fireEvent(this, \"config-changed\", { config: this._config });\n  }\n\n  private _handleSubElementChanged(ev: CustomEvent): void {\n    ev.stopPropagation();\n    if (!this._config || !this.hass) {\n      return;\n    }\n\n    const configValue = this._subElementEditorConfig?.type;\n    const value = ev.detail.config;\n\n    if (configValue === \"row\") {\n      const newConfigEntities = this._configEntities!.concat();\n      if (!value) {\n        newConfigEntities.splice(this._subElementEditorConfig!.index!, 1);\n        this._goBack();\n      } else {\n        newConfigEntities[this._subElementEditorConfig!.index!] = value;\n      }\n\n      this._config = { ...this._config!, entities: newConfigEntities };\n      this._configEntities = processEditorEntities(this._config!.entities);\n    } else if (configValue) {\n      if (value === \"\") {\n        this._config = { ...this._config };\n        delete this._config[configValue!];\n      } else {\n        this._config = {\n          ...this._config,\n          [configValue]: value,\n        };\n      }\n    }\n\n    this._subElementEditorConfig = {\n      ...this._subElementEditorConfig!,\n      elementConfig: value,\n    };\n\n    fireEvent(this, \"config-changed\", { config: this._config });\n  }\n\n  private _editDetailElement(ev: HASSDomEvent<EditSubElementEvent>): void {\n    this._subElementEditorConfig = ev.detail.subElementConfig;\n  }\n\n  private _goBack(): void {\n    this._subElementEditorConfig = undefined;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      configElementStyle,\n      css`\n        .edit-entity-row-header {\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n          font-size: 18px;\n        }\n\n        hui-header-footer-editor {\n          padding-top: 4px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-entities-card-editor\": HuiEntitiesCardEditor;\n  }\n}\n","import \"@material/mwc-icon-button/mwc-icon-button\";\nimport { mdiClose, mdiPencil, mdiPlus } from \"@mdi/js\";\nimport \"@polymer/paper-item/paper-item\";\nimport \"@polymer/paper-listbox/paper-listbox\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport \"../../../../components/ha-svg-icon\";\nimport type { LovelaceConfig } from \"../../../../data/lovelace\";\nimport type { HomeAssistant } from \"../../../../types\";\nimport type { LovelaceHeaderFooterConfig } from \"../../header-footer/types\";\nimport { showCreateHeaderFooterDialog } from \"./show-create-headerfooter-dialog\";\n\n@customElement(\"hui-header-footer-editor\")\nexport class HuiHeaderFooterEditor extends LitElement {\n  public hass!: HomeAssistant;\n\n  public lovelaceConfig!: LovelaceConfig;\n\n  @property({ attribute: false }) public config?: LovelaceHeaderFooterConfig;\n\n  @property() public configValue!: \"header\" | \"footer\";\n\n  protected render(): TemplateResult {\n    return html`\n      <div>\n        <span>\n          ${this.hass.localize(\n            `ui.panel.lovelace.editor.header-footer.${this.configValue}`\n          )}:\n          ${!this.config?.type\n            ? this.hass!.localize(\"ui.panel.lovelace.editor.common.none\")\n            : this.hass!.localize(\n                `ui.panel.lovelace.editor.header-footer.types.${this.config?.type}.name`\n              )}\n        </span>\n      </div>\n      <div>\n        ${!this.config?.type\n          ? html`\n              <mwc-icon-button\n                aria-label=${this.hass!.localize(\n                  \"ui.panel.lovelace.editor.common.add\"\n                )}\n                class=\"add-icon\"\n                @click=${this._add}\n              >\n                <ha-svg-icon .path=${mdiPlus}></ha-svg-icon>\n              </mwc-icon-button>\n            `\n          : html`\n              <mwc-icon-button\n                aria-label=${this.hass!.localize(\n                  \"ui.panel.lovelace.editor.common.clear\"\n                )}\n                class=\"remove-icon\"\n                @click=${this._delete}\n              >\n                <ha-svg-icon .path=${mdiClose}></ha-svg-icon>\n              </mwc-icon-button>\n              <mwc-icon-button\n                aria-label=${this.hass!.localize(\n                  \"ui.panel.lovelace.editor.common.edit\"\n                )}\n                class=\"edit-icon\"\n                @click=${this._edit}\n              >\n                <ha-svg-icon .path=${mdiPencil}></ha-svg-icon>\n              </mwc-icon-button>\n            `}\n      </div>\n    `;\n  }\n\n  private _edit(): void {\n    fireEvent(this, \"edit-detail-element\", {\n      subElementConfig: {\n        elementConfig: this.config,\n        type: this.configValue,\n      },\n    });\n  }\n\n  private _add(): void {\n    showCreateHeaderFooterDialog(this, {\n      pickHeaderFooter: (config) => this._elementPicked(config),\n      type: this.configValue,\n    });\n  }\n\n  private _elementPicked(config: LovelaceHeaderFooterConfig): void {\n    fireEvent(this, \"value-changed\", { value: config });\n    fireEvent(this, \"edit-detail-element\", {\n      subElementConfig: {\n        elementConfig: config,\n        type: this.configValue,\n      },\n    });\n  }\n\n  private _delete(): void {\n    fireEvent(this, \"value-changed\", { value: \"\" });\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        font-size: 16px;\n        display: flex;\n        flex-wrap: wrap;\n        justify-content: space-between;\n        align-items: center;\n        padding-bottom: 12px;\n      }\n\n      :host > div {\n        display: flex;\n        align-items: center;\n      }\n\n      mwc-icon-button,\n      .header-footer-icon {\n        --mdc-icon-button-size: 36px;\n        color: var(--secondary-text-color);\n      }\n\n      .header-footer-icon {\n        padding-right: 8px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-header-footer-editor\": HuiHeaderFooterEditor;\n  }\n}\n","import \"@material/mwc-icon-button\";\nimport { mdiClose, mdiDrag, mdiPencil } from \"@mdi/js\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { guard } from \"lit/directives/guard\";\nimport type { SortableEvent } from \"sortablejs\";\nimport Sortable, {\n  AutoScroll,\n  OnSpill,\n} from \"sortablejs/modular/sortable.core.esm\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport \"../../../components/entity/ha-entity-picker\";\nimport type { HaEntityPicker } from \"../../../components/entity/ha-entity-picker\";\nimport \"../../../components/ha-svg-icon\";\nimport { sortableStyles } from \"../../../resources/ha-sortable-style\";\nimport { HomeAssistant } from \"../../../types\";\nimport { EntityConfig, LovelaceRowConfig } from \"../entity-rows/types\";\n\ndeclare global {\n  interface HASSDomEvents {\n    \"entities-changed\": {\n      entities: LovelaceRowConfig[];\n    };\n  }\n}\n\n@customElement(\"hui-entities-card-row-editor\")\nexport class HuiEntitiesCardRowEditor extends LitElement {\n  @property({ attribute: false }) protected hass?: HomeAssistant;\n\n  @property({ attribute: false }) protected entities?: LovelaceRowConfig[];\n\n  @property() protected label?: string;\n\n  @state() private _attached = false;\n\n  @state() private _renderEmptySortable = false;\n\n  private _sortable?: Sortable;\n\n  public connectedCallback() {\n    super.connectedCallback();\n    this._attached = true;\n  }\n\n  public disconnectedCallback() {\n    super.disconnectedCallback();\n    this._attached = false;\n  }\n\n  protected render(): TemplateResult {\n    if (!this.entities || !this.hass) {\n      return html``;\n    }\n\n    return html`\n      <h3>\n        ${this.label ||\n        `${this.hass!.localize(\n          \"ui.panel.lovelace.editor.card.generic.entities\"\n        )} (${this.hass!.localize(\n          \"ui.panel.lovelace.editor.card.config.required\"\n        )})`}\n      </h3>\n      <div class=\"entities\">\n        ${guard([this.entities, this._renderEmptySortable], () =>\n          this._renderEmptySortable\n            ? \"\"\n            : this.entities!.map(\n                (entityConf, index) => html`\n                  <div class=\"entity\">\n                    <ha-svg-icon class=\"handle\" .path=${mdiDrag}></ha-svg-icon>\n                    ${entityConf.type\n                      ? html`\n                          <div class=\"special-row\">\n                            <div>\n                              <span>\n                                ${this.hass!.localize(\n                                  `ui.panel.lovelace.editor.card.entities.entity_row.${entityConf.type}`\n                                )}\n                              </span>\n                              <span class=\"secondary\"\n                                >${this.hass!.localize(\n                                  \"ui.panel.lovelace.editor.card.entities.edit_special_row\"\n                                )}</span\n                              >\n                            </div>\n                          </div>\n                        `\n                      : html`\n                          <ha-entity-picker\n                            allow-custom-entity\n                            hideClearIcon\n                            .hass=${this.hass}\n                            .value=${(entityConf as EntityConfig).entity}\n                            .index=${index}\n                            @value-changed=${this._valueChanged}\n                          ></ha-entity-picker>\n                        `}\n                    <mwc-icon-button\n                      aria-label=${this.hass!.localize(\n                        \"ui.components.entity.entity-picker.clear\"\n                      )}\n                      class=\"remove-icon\"\n                      .index=${index}\n                      @click=${this._removeRow}\n                    >\n                      <ha-svg-icon .path=${mdiClose}></ha-svg-icon>\n                    </mwc-icon-button>\n                    <mwc-icon-button\n                      aria-label=${this.hass!.localize(\n                        \"ui.components.entity.entity-picker.edit\"\n                      )}\n                      class=\"edit-icon\"\n                      .index=${index}\n                      @click=${this._editRow}\n                    >\n                      <ha-svg-icon .path=${mdiPencil}></ha-svg-icon>\n                    </mwc-icon-button>\n                  </div>\n                `\n              )\n        )}\n      </div>\n      <ha-entity-picker\n        .hass=${this.hass}\n        @value-changed=${this._addEntity}\n      ></ha-entity-picker>\n    `;\n  }\n\n  protected firstUpdated(): void {\n    Sortable.mount(OnSpill);\n    Sortable.mount(new AutoScroll());\n  }\n\n  protected updated(changedProps: PropertyValues): void {\n    super.updated(changedProps);\n\n    const attachedChanged = changedProps.has(\"_attached\");\n    const entitiesChanged = changedProps.has(\"entities\");\n\n    if (!entitiesChanged && !attachedChanged) {\n      return;\n    }\n\n    if (attachedChanged && !this._attached) {\n      // Tear down sortable, if available\n      this._sortable?.destroy();\n      this._sortable = undefined;\n      return;\n    }\n\n    if (!this._sortable && this.entities) {\n      this._createSortable();\n      return;\n    }\n\n    if (entitiesChanged) {\n      this._handleEntitiesChanged();\n    }\n  }\n\n  private async _handleEntitiesChanged() {\n    this._renderEmptySortable = true;\n    await this.updateComplete;\n    const container = this.shadowRoot!.querySelector(\".entities\")!;\n    while (container.lastElementChild) {\n      container.removeChild(container.lastElementChild);\n    }\n    this._renderEmptySortable = false;\n  }\n\n  private _createSortable() {\n    this._sortable = new Sortable(this.shadowRoot!.querySelector(\".entities\"), {\n      animation: 150,\n      fallbackClass: \"sortable-fallback\",\n      handle: \".handle\",\n      onEnd: async (evt: SortableEvent) => this._rowMoved(evt),\n    });\n  }\n\n  private async _addEntity(ev: CustomEvent): Promise<void> {\n    const value = ev.detail.value;\n    if (value === \"\") {\n      return;\n    }\n    const newConfigEntities = this.entities!.concat({\n      entity: value as string,\n    });\n    (ev.target as HaEntityPicker).value = \"\";\n    fireEvent(this, \"entities-changed\", { entities: newConfigEntities });\n  }\n\n  private _rowMoved(ev: SortableEvent): void {\n    if (ev.oldIndex === ev.newIndex) {\n      return;\n    }\n\n    const newEntities = this.entities!.concat();\n\n    newEntities.splice(ev.newIndex!, 0, newEntities.splice(ev.oldIndex!, 1)[0]);\n\n    fireEvent(this, \"entities-changed\", { entities: newEntities });\n  }\n\n  private _removeRow(ev: CustomEvent): void {\n    const index = (ev.currentTarget as any).index;\n    const newConfigEntities = this.entities!.concat();\n\n    newConfigEntities.splice(index, 1);\n\n    fireEvent(this, \"entities-changed\", { entities: newConfigEntities });\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    const value = ev.detail.value;\n    const index = (ev.target as any).index;\n    const newConfigEntities = this.entities!.concat();\n\n    if (value === \"\") {\n      newConfigEntities.splice(index, 1);\n    } else {\n      newConfigEntities[index] = {\n        ...newConfigEntities[index],\n        entity: value!,\n      };\n    }\n\n    fireEvent(this, \"entities-changed\", { entities: newConfigEntities });\n  }\n\n  private _editRow(ev: CustomEvent): void {\n    const index = (ev.currentTarget as any).index;\n    fireEvent(this, \"edit-detail-element\", {\n      subElementConfig: {\n        index,\n        type: \"row\",\n        elementConfig: this.entities![index],\n      },\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      sortableStyles,\n      css`\n        .entity {\n          display: flex;\n          align-items: center;\n        }\n\n        .entity .handle {\n          padding-right: 8px;\n          cursor: move;\n        }\n\n        .entity ha-entity-picker {\n          flex-grow: 1;\n        }\n\n        .special-row {\n          height: 60px;\n          font-size: 16px;\n          display: flex;\n          align-items: center;\n          justify-content: space-between;\n          flex-grow: 1;\n        }\n\n        .special-row div {\n          display: flex;\n          flex-direction: column;\n        }\n\n        .remove-icon,\n        .edit-icon {\n          --mdc-icon-button-size: 36px;\n          color: var(--secondary-text-color);\n        }\n\n        .secondary {\n          font-size: 12px;\n          color: var(--secondary-text-color);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-entities-card-row-editor\": HuiEntitiesCardRowEditor;\n  }\n}\n","import \"@material/mwc-button\";\nimport \"@material/mwc-icon-button\";\nimport { mdiArrowLeft } from \"@mdi/js\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state, query } from \"lit/decorators\";\nimport { fireEvent, HASSDomEvent } from \"../../../common/dom/fire_event\";\nimport \"../../../components/ha-svg-icon\";\nimport type { HomeAssistant } from \"../../../types\";\nimport type { LovelaceRowConfig } from \"../entity-rows/types\";\nimport type { LovelaceHeaderFooterConfig } from \"../header-footer/types\";\nimport \"./entity-row-editor/hui-row-element-editor\";\nimport \"./header-footer-editor/hui-header-footer-element-editor\";\nimport type { HuiElementEditor } from \"./hui-element-editor\";\nimport type { GUIModeChangedEvent, SubElementEditorConfig } from \"./types\";\n\ndeclare global {\n  interface HASSDomEvents {\n    \"go-back\": undefined;\n  }\n}\n\n@customElement(\"hui-sub-element-editor\")\nexport class HuiSubElementEditor extends LitElement {\n  public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public config!: SubElementEditorConfig;\n\n  @state() private _guiModeAvailable = true;\n\n  @state() private _guiMode = true;\n\n  @query(\".editor\") private _editorElement?: HuiElementEditor<\n    LovelaceRowConfig | LovelaceHeaderFooterConfig\n  >;\n\n  protected render(): TemplateResult {\n    return html`\n      <div class=\"header\">\n        <div class=\"back-title\">\n          <mwc-icon-button @click=${this._goBack}>\n            <ha-svg-icon .path=${mdiArrowLeft}></ha-svg-icon>\n          </mwc-icon-button>\n          <span slot=\"title\"\n            >${this.hass.localize(\n              `ui.panel.lovelace.editor.sub-element-editor.types.${this.config?.type}`\n            )}</span\n          >\n        </div>\n        <mwc-button\n          slot=\"secondaryAction\"\n          .disabled=${!this._guiModeAvailable}\n          @click=${this._toggleMode}\n        >\n          ${this.hass.localize(\n            this._guiMode\n              ? \"ui.panel.lovelace.editor.edit_card.show_code_editor\"\n              : \"ui.panel.lovelace.editor.edit_card.show_visual_editor\"\n          )}\n        </mwc-button>\n      </div>\n      ${this.config.type === \"row\"\n        ? html`\n            <hui-row-element-editor\n              class=\"editor\"\n              .hass=${this.hass}\n              .value=${this.config.elementConfig}\n              @config-changed=${this._handleConfigChanged}\n              @GUImode-changed=${this._handleGUIModeChanged}\n            ></hui-row-element-editor>\n          `\n        : this.config.type === \"header\" || this.config.type === \"footer\"\n        ? html`\n            <hui-headerfooter-element-editor\n              class=\"editor\"\n              .hass=${this.hass}\n              .value=${this.config.elementConfig}\n              @config-changed=${this._handleConfigChanged}\n              @GUImode-changed=${this._handleGUIModeChanged}\n            ></hui-headerfooter-element-editor>\n          `\n        : \"\"}\n    `;\n  }\n\n  private _goBack(): void {\n    fireEvent(this, \"go-back\");\n  }\n\n  private _toggleMode(): void {\n    this._editorElement?.toggleMode();\n  }\n\n  private _handleGUIModeChanged(ev: HASSDomEvent<GUIModeChangedEvent>): void {\n    ev.stopPropagation();\n    this._guiMode = ev.detail.guiMode;\n    this._guiModeAvailable = ev.detail.guiModeAvailable;\n  }\n\n  private _handleConfigChanged(ev: CustomEvent): void {\n    this._guiModeAvailable = ev.detail.guiModeAvailable;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      .header {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n      }\n      .back-title {\n        display: flex;\n        align-items: center;\n        font-size: 18px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-sub-element-editor\": HuiSubElementEditor;\n  }\n}\n"],"names":[],"sourceRoot":""}