{"version":3,"file":"0c09338a.js","mappings":";;;AA6EA;AAaA;;;AAGA;;;AAGA;;;;;;AAMA;AACA;;AAEA;;;;AAlCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA1BA","sources":["webpack://home-assistant-frontend/./src/panels/lovelace/components/hui-energy-period-selector.ts"],"sourcesContent":["import { mdiChevronLeft, mdiChevronRight } from \"@mdi/js\";\nimport {\n  endOfToday,\n  addDays,\n  endOfDay,\n  startOfToday,\n  endOfWeek,\n  endOfMonth,\n  startOfDay,\n  startOfWeek,\n  startOfMonth,\n  addMonths,\n  addWeeks,\n  startOfYear,\n  addYears,\n  endOfYear,\n  isWithinInterval,\n  differenceInDays,\n} from \"date-fns\";\nimport { UnsubscribeFunc } from \"home-assistant-js-websocket\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport {\n  formatDate,\n  formatDateMonthYear,\n  formatDateShort,\n  formatDateYear,\n} from \"../../../common/datetime/format_date\";\nimport { EnergyData, getEnergyDataCollection } from \"../../../data/energy\";\nimport { SubscribeMixin } from \"../../../mixins/subscribe-mixin\";\nimport { HomeAssistant, ToggleButton } from \"../../../types\";\nimport \"@material/mwc-icon-button/mwc-icon-button\";\nimport \"../../../components/ha-svg-icon\";\nimport \"@material/mwc-button/mwc-button\";\nimport \"../../../components/ha-button-toggle-group\";\nimport { toggleAttribute } from \"../../../common/dom/toggle_attribute\";\n\nconst viewButtons: ToggleButton[] = [\n  { label: \"Day\", value: \"day\" },\n  { label: \"Week\", value: \"week\" },\n  { label: \"Month\", value: \"month\" },\n  { label: \"Year\", value: \"year\" },\n];\n\n@customElement(\"hui-energy-period-selector\")\nexport class HuiEnergyPeriodSelector extends SubscribeMixin(LitElement) {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public collectionKey?: string;\n\n  @state() _startDate?: Date;\n\n  @state() _endDate?: Date;\n\n  @state() private _period?: \"day\" | \"week\" | \"month\" | \"year\";\n\n  public connectedCallback() {\n    super.connectedCallback();\n    toggleAttribute(this, \"narrow\", this.offsetWidth < 600);\n  }\n\n  public hassSubscribe(): UnsubscribeFunc[] {\n    return [\n      getEnergyDataCollection(this.hass, {\n        key: this.collectionKey,\n      }).subscribe((data) => this._updateDates(data)),\n    ];\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass || !this._startDate) {\n      return html``;\n    }\n\n    return html`\n      <div class=\"row\">\n        <div class=\"label\">\n          ${this._period === \"day\"\n            ? formatDate(this._startDate, this.hass.locale)\n            : this._period === \"month\"\n            ? formatDateMonthYear(this._startDate, this.hass.locale)\n            : this._period === \"year\"\n            ? formatDateYear(this._startDate, this.hass.locale)\n            : `${formatDateShort(\n                this._startDate,\n                this.hass.locale\n              )} - ${formatDateShort(\n                this._endDate || new Date(),\n                this.hass.locale\n              )}`}\n          <mwc-icon-button label=\"Previous\" @click=${this._pickPrevious}>\n            <ha-svg-icon .path=${mdiChevronLeft}></ha-svg-icon>\n          </mwc-icon-button>\n          <mwc-icon-button label=\"Next\" @click=${this._pickNext}>\n            <ha-svg-icon .path=${mdiChevronRight}></ha-svg-icon>\n          </mwc-icon-button>\n          <mwc-button dense outlined @click=${this._pickToday}>\n            Today\n          </mwc-button>\n        </div>\n        <div class=\"period\">\n          <ha-button-toggle-group\n            .buttons=${viewButtons}\n            .active=${this._period}\n            dense\n            @value-changed=${this._handleView}\n          ></ha-button-toggle-group>\n        </div>\n      </div>\n    `;\n  }\n\n  private _handleView(ev: CustomEvent): void {\n    this._period = ev.detail.value;\n    const today = startOfToday();\n    const start =\n      !this._startDate ||\n      isWithinInterval(today, {\n        start: this._startDate,\n        end: this._endDate || endOfToday(),\n      })\n        ? today\n        : this._startDate;\n\n    this._setDate(\n      this._period === \"day\"\n        ? startOfDay(start)\n        : this._period === \"week\"\n        ? startOfWeek(start, { weekStartsOn: 1 })\n        : this._period === \"month\"\n        ? startOfMonth(start)\n        : startOfYear(start)\n    );\n  }\n\n  private _pickToday() {\n    this._setDate(\n      this._period === \"day\"\n        ? startOfToday()\n        : this._period === \"week\"\n        ? startOfWeek(new Date(), { weekStartsOn: 1 })\n        : this._period === \"month\"\n        ? startOfMonth(new Date())\n        : startOfYear(new Date())\n    );\n  }\n\n  private _pickPrevious() {\n    const newStart =\n      this._period === \"day\"\n        ? addDays(this._startDate!, -1)\n        : this._period === \"week\"\n        ? addWeeks(this._startDate!, -1)\n        : this._period === \"month\"\n        ? addMonths(this._startDate!, -1)\n        : addYears(this._startDate!, -1);\n    this._setDate(newStart);\n  }\n\n  private _pickNext() {\n    const newStart =\n      this._period === \"day\"\n        ? addDays(this._startDate!, 1)\n        : this._period === \"week\"\n        ? addWeeks(this._startDate!, 1)\n        : this._period === \"month\"\n        ? addMonths(this._startDate!, 1)\n        : addYears(this._startDate!, 1);\n    this._setDate(newStart);\n  }\n\n  private _setDate(startDate: Date) {\n    const endDate =\n      this._period === \"day\"\n        ? endOfDay(startDate)\n        : this._period === \"week\"\n        ? endOfWeek(startDate, { weekStartsOn: 1 })\n        : this._period === \"month\"\n        ? endOfMonth(startDate)\n        : endOfYear(startDate);\n\n    const energyCollection = getEnergyDataCollection(this.hass, {\n      key: this.collectionKey,\n    });\n    energyCollection.setPeriod(startDate, endDate);\n    energyCollection.refresh();\n  }\n\n  private _updateDates(energyData: EnergyData): void {\n    this._startDate = energyData.start;\n    this._endDate = energyData.end || endOfToday();\n    const dayDifference = differenceInDays(this._endDate, this._startDate);\n    this._period =\n      dayDifference < 1\n        ? \"day\"\n        : dayDifference === 6\n        ? \"week\"\n        : dayDifference > 26 && dayDifference < 31 // 28, 29, 30 or 31 days in a month\n        ? \"month\"\n        : dayDifference === 364 || dayDifference === 365 // Leap year\n        ? \"year\"\n        : undefined;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      .row {\n        display: flex;\n        justify-content: flex-end;\n      }\n      :host([narrow]) .row {\n        flex-direction: column-reverse;\n      }\n      :host([narrow]) .period {\n        margin-bottom: 8px;\n      }\n      .label {\n        display: flex;\n        justify-content: flex-end;\n        align-items: center;\n        font-size: 20px;\n      }\n      .period {\n        display: flex;\n        justify-content: flex-end;\n      }\n      :host {\n        --mdc-button-outline-color: currentColor;\n        --primary-color: currentColor;\n        --mdc-theme-primary: currentColor;\n        --mdc-button-disabled-outline-color: var(--disabled-text-color);\n        --mdc-button-disabled-ink-color: var(--disabled-text-color);\n        --mdc-icon-button-ripple-opacity: 0.2;\n      }\n      mwc-icon-button {\n        --mdc-icon-button-size: 28px;\n      }\n      ha-button-toggle-group {\n        padding-left: 8px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-energy-period-selector\": HuiEnergyPeriodSelector;\n  }\n}\n"],"names":[],"sourceRoot":""}