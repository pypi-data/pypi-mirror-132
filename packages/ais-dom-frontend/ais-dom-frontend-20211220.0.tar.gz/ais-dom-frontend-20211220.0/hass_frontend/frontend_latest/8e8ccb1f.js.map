{"version":3,"file":"8e8ccb1f.js","mappings":";;AAoBA;AACA;;AAfA;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC8FA;;;;;ACzEA;AACA;;AAEA;AACA;;AAGA;;;AAIA;;;;;;AAxBA","sources":["webpack://home-assistant-frontend/./src/components/ha-icon-button.ts","webpack://home-assistant-frontend/./src/layouts/ha-app-layout.js","webpack://home-assistant-frontend/./src/panels/map/ha-panel-map.ts"],"sourcesContent":["import \"@material/mwc-icon-button\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport \"./ha-icon\";\n\n@customElement(\"ha-icon-button\")\nexport class HaIconButton extends LitElement {\n  @property({ type: Boolean, reflect: true }) disabled = false;\n\n  @property({ type: String }) icon = \"\";\n\n  @property({ type: String }) label = \"\";\n\n  static shadowRootOptions: ShadowRootInit = {\n    mode: \"open\",\n    delegatesFocus: true,\n  };\n\n  protected render(): TemplateResult {\n    return html`\n      <mwc-icon-button .label=${this.label} .disabled=${this.disabled}>\n        <ha-icon .icon=${this.icon}></ha-icon>\n      </mwc-icon-button>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: inline-block;\n        outline: none;\n      }\n      :host([disabled]) {\n        pointer-events: none;\n      }\n      mwc-icon-button {\n        --mdc-theme-on-primary: currentColor;\n        --mdc-theme-text-disabled-on-light: var(--disabled-text-color);\n      }\n      ha-icon {\n        --ha-icon-display: inline;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-icon-button\": HaIconButton;\n  }\n}\n","/* eslint-plugin-disable lit */\n/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n/*\nThis code is copied from app-header-layout.\n'fullbleed' support is removed as Home Assisstant doesn't use it.\ntransform: translate(0) is added.\n*/\n/*\n  FIXME(polymer-modulizer): the above comments were extracted\n  from HTML and may be out of place here. Review them and\n  then delete this comment!\n*/\nimport \"@polymer/app-layout/app-header-layout/app-header-layout\";\nimport { html } from \"@polymer/polymer/lib/utils/html-tag\";\nimport \"@polymer/polymer/polymer-element\";\n\nclass HaAppLayout extends customElements.get(\"app-header-layout\") {\n  static get template() {\n    return html`\n      <style>\n        :host {\n          display: block;\n          /**\n         * Force app-header-layout to have its own stacking context so that its parent can\n         * control the stacking of it relative to other elements (e.g. app-drawer-layout).\n         * This could be done using \\`isolation: isolate\\`, but that's not well supported\n         * across browsers.\n         */\n          position: relative;\n          z-index: 0;\n        }\n\n        #wrapper ::slotted([slot=\"header\"]) {\n          @apply --layout-fixed-top;\n          z-index: 1;\n        }\n\n        #wrapper.initializing ::slotted([slot=\"header\"]) {\n          position: relative;\n        }\n\n        :host([has-scrolling-region]) {\n          height: 100%;\n        }\n\n        :host([has-scrolling-region]) #wrapper ::slotted([slot=\"header\"]) {\n          position: absolute;\n        }\n\n        :host([has-scrolling-region])\n          #wrapper.initializing\n          ::slotted([slot=\"header\"]) {\n          position: relative;\n        }\n\n        :host([has-scrolling-region]) #wrapper #contentContainer {\n          @apply --layout-fit;\n          overflow-y: auto;\n          -webkit-overflow-scrolling: touch;\n        }\n\n        :host([has-scrolling-region]) #wrapper.initializing #contentContainer {\n          position: relative;\n        }\n\n        #contentContainer {\n          /* Create a stacking context here so that all children appear below the header. */\n          position: relative;\n          z-index: 0;\n          /* Using 'transform' will cause 'position: fixed' elements to behave like\n           'position: absolute' relative to this element. */\n          transform: translate(0);\n          margin-left: env(safe-area-inset-left);\n          margin-right: env(safe-area-inset-right);\n        }\n\n        @media print {\n          :host([has-scrolling-region]) #wrapper #contentContainer {\n            overflow-y: visible;\n          }\n        }\n      </style>\n\n      <div id=\"wrapper\" class=\"initializing\">\n        <slot id=\"headerSlot\" name=\"header\"></slot>\n\n        <div id=\"contentContainer\"><slot></slot></div>\n        <slot id=\"fab\" name=\"fab\"></slot>\n      </div>\n    `;\n  }\n}\ncustomElements.define(\"ha-app-layout\", HaAppLayout);\n","import { mdiPencil } from \"@mdi/js\";\nimport \"@material/mwc-icon-button\";\nimport \"@polymer/app-layout/app-toolbar/app-toolbar\";\nimport { css, CSSResultGroup, html, LitElement, PropertyValues } from \"lit\";\nimport { property } from \"lit/decorators\";\nimport { computeStateDomain } from \"../../common/entity/compute_state_domain\";\nimport { navigate } from \"../../common/navigate\";\nimport \"../../components/ha-svg-icon\";\nimport \"../../components/ha-menu-button\";\nimport \"../../layouts/ha-app-layout\";\nimport { HomeAssistant } from \"../../types\";\nimport \"../../components/map/ha-map\";\nimport { haStyle } from \"../../resources/styles\";\n\nclass HaPanelMap extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public narrow!: boolean;\n\n  private _entities: string[] = [];\n\n  protected render() {\n    return html`\n      <ha-app-layout>\n        <app-header fixed slot=\"header\">\n          <app-toolbar>\n            <ha-menu-button\n              .hass=${this.hass}\n              .narrow=${this.narrow}\n            ></ha-menu-button>\n            <div main-title>${this.hass.localize(\"panel.map\")}</div>\n            ${!__DEMO__ && this.hass.user?.is_admin\n              ? html`<mwc-icon-button @click=${this._openZonesEditor}\n                  ><ha-svg-icon .path=${mdiPencil}></ha-svg-icon\n                ></mwc-icon-button>`\n              : \"\"}\n          </app-toolbar>\n        </app-header>\n        <ha-map .hass=${this.hass} .entities=${this._entities} autoFit></ha-map>\n      </ha-app-layout>\n    `;\n  }\n\n  private _openZonesEditor() {\n    navigate(\"/config/zone\");\n  }\n\n  public willUpdate(changedProps: PropertyValues) {\n    super.willUpdate(changedProps);\n    if (!changedProps.has(\"hass\")) {\n      return;\n    }\n    const oldHass = changedProps.get(\"hass\") as HomeAssistant | undefined;\n    this._getStates(oldHass);\n  }\n\n  private _getStates(oldHass?: HomeAssistant) {\n    let changed = false;\n    const personSources = new Set<string>();\n    const locationEntities: string[] = [];\n    Object.values(this.hass!.states).forEach((entity) => {\n      if (\n        entity.state === \"home\" ||\n        !(\"latitude\" in entity.attributes) ||\n        !(\"longitude\" in entity.attributes)\n      ) {\n        return;\n      }\n      locationEntities.push(entity.entity_id);\n      if (computeStateDomain(entity) === \"person\" && entity.attributes.source) {\n        personSources.add(entity.attributes.source);\n      }\n      if (oldHass?.states[entity.entity_id] !== entity) {\n        changed = true;\n      }\n    });\n\n    if (changed) {\n      this._entities = locationEntities.filter(\n        (entity) => !personSources.has(entity)\n      );\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        ha-map {\n          height: calc(100vh - var(--header-height));\n        }\n      `,\n    ];\n  }\n}\n\ncustomElements.define(\"ha-panel-map\", HaPanelMap);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-panel-map\": HaPanelMap;\n  }\n}\n"],"names":[],"sourceRoot":""}