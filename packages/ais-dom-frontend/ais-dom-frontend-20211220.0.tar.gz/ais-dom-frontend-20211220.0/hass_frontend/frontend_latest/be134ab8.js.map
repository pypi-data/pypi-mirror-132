{"version":3,"file":"be134ab8.js","mappings":";AAsCA;AAGA;;AAIA;AACA;;;AAGA;AAGA;;AAEA;AACA;;;AAGA;AAGA;;AAIA;AACA;AAhCA;;;;;;;AAjBA","sources":["webpack://home-assistant-frontend/./src/components/ha-cover-tilt-controls.ts"],"sourcesContent":["import { HassEntity } from \"home-assistant-js-websocket\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { UNAVAILABLE } from \"../data/entity\";\nimport { HomeAssistant } from \"../types\";\nimport CoverEntity from \"../util/cover-model\";\nimport \"./ha-icon-button\";\n\n@customElement(\"ha-cover-tilt-controls\")\nclass HaCoverTiltControls extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) stateObj!: HassEntity;\n\n  @state() private _entityObj?: CoverEntity;\n\n  public willUpdate(changedProperties: PropertyValues): void {\n    super.willUpdate(changedProperties);\n\n    if (changedProperties.has(\"stateObj\")) {\n      this._entityObj = new CoverEntity(this.hass, this.stateObj);\n    }\n  }\n\n  protected render(): TemplateResult {\n    if (!this._entityObj) {\n      return html``;\n    }\n\n    return html` <ha-icon-button\n        class=${classMap({\n          invisible: !this._entityObj.supportsOpenTilt,\n        })}\n        label=${this.hass.localize(\n          \"ui.dialogs.more_info_control.open_tilt_cover\"\n        )}\n        icon=\"hass:arrow-top-right\"\n        @click=${this._onOpenTiltTap}\n        .disabled=${this._computeOpenDisabled()}\n      ></ha-icon-button>\n      <ha-icon-button\n        class=${classMap({\n          invisible: !this._entityObj.supportsStopTilt,\n        })}\n        label=${this.hass.localize(\"ui.dialogs.more_info_control.stop_cover\")}\n        icon=\"hass:stop\"\n        @click=${this._onStopTiltTap}\n        .disabled=${this.stateObj.state === UNAVAILABLE}\n      ></ha-icon-button>\n      <ha-icon-button\n        class=${classMap({\n          invisible: !this._entityObj.supportsCloseTilt,\n        })}\n        label=${this.hass.localize(\n          \"ui.dialogs.more_info_control.close_tilt_cover\"\n        )}\n        icon=\"hass:arrow-bottom-left\"\n        @click=${this._onCloseTiltTap}\n        .disabled=${this._computeClosedDisabled()}\n      ></ha-icon-button>`;\n  }\n\n  private _computeOpenDisabled(): boolean {\n    if (this.stateObj.state === UNAVAILABLE) {\n      return true;\n    }\n    const assumedState = this.stateObj.attributes.assumed_state === true;\n    return this._entityObj.isFullyOpenTilt && !assumedState;\n  }\n\n  private _computeClosedDisabled(): boolean {\n    if (this.stateObj.state === UNAVAILABLE) {\n      return true;\n    }\n    const assumedState = this.stateObj.attributes.assumed_state === true;\n    return this._entityObj.isFullyClosedTilt && !assumedState;\n  }\n\n  private _onOpenTiltTap(ev): void {\n    ev.stopPropagation();\n    this._entityObj.openCoverTilt();\n  }\n\n  private _onCloseTiltTap(ev): void {\n    ev.stopPropagation();\n    this._entityObj.closeCoverTilt();\n  }\n\n  private _onStopTiltTap(ev): void {\n    ev.stopPropagation();\n    this._entityObj.stopCoverTilt();\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        white-space: nowrap;\n      }\n      .invisible {\n        visibility: hidden !important;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-cover-tilt-controls\": HaCoverTiltControls;\n  }\n}\n"],"names":[],"sourceRoot":""}