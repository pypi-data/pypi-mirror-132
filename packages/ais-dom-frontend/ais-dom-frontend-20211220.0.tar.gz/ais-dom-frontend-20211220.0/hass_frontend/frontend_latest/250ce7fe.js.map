{"version":3,"file":"250ce7fe.js","mappings":";;;;AAqBA;ACRA;;AAEA;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQA;;;;ACoNA;AAIA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAEA;;AAEA;;AAEA;;;;;;;;;AAUA;AACA;;;;;;;;AAQA;AACA;AACA;AACA;AACA;;;AAGA;;;AAIA;;AAGA;;AAEA;AACA;;;;AAjEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAhMA","sources":["webpack://home-assistant-frontend/./src/components/ha-code-editor.ts","webpack://home-assistant-frontend/./src/components/ha-dialog.ts","webpack://home-assistant-frontend/./src/panels/media-browser/hui-dialog-web-browser-ais-edit-image.ts"],"sourcesContent":["import type { EditorView, KeyBinding, ViewUpdate } from \"@codemirror/view\";\nimport { css, CSSResultGroup, PropertyValues, ReactiveElement } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { loadCodeMirror } from \"../resources/codemirror.ondemand\";\n\ndeclare global {\n  interface HASSDomEvents {\n    \"editor-save\": undefined;\n  }\n}\n\nconst saveKeyBinding: KeyBinding = {\n  key: \"Mod-s\",\n  run: (view: EditorView) => {\n    fireEvent(view.dom, \"editor-save\");\n    return true;\n  },\n};\n\n@customElement(\"ha-code-editor\")\nexport class HaCodeEditor extends ReactiveElement {\n  public codemirror?: EditorView;\n\n  @property() public mode = \"yaml\";\n\n  @property({ type: Boolean }) public autofocus = false;\n\n  @property({ type: Boolean }) public readOnly = false;\n\n  @property() public error = false;\n\n  @state() private _value = \"\";\n\n  private _loadedCodeMirror?: typeof import(\"../resources/codemirror\");\n\n  public set value(value: string) {\n    this._value = value;\n  }\n\n  public get value(): string {\n    return this.codemirror ? this.codemirror.state.doc.toString() : this._value;\n  }\n\n  public get hasComments(): boolean {\n    if (!this.codemirror || !this._loadedCodeMirror) {\n      return false;\n    }\n    const className = this._loadedCodeMirror.HighlightStyle.get(\n      this.codemirror.state,\n      this._loadedCodeMirror.tags.comment\n    );\n    return !!this.shadowRoot!.querySelector(`span.${className}`);\n  }\n\n  public connectedCallback() {\n    super.connectedCallback();\n    if (!this.codemirror) {\n      return;\n    }\n    if (this.autofocus !== false) {\n      this.codemirror.focus();\n    }\n  }\n\n  protected update(changedProps: PropertyValues): void {\n    super.update(changedProps);\n\n    if (!this.codemirror) {\n      return;\n    }\n\n    if (changedProps.has(\"mode\")) {\n      this.codemirror.dispatch({\n        effects: this._loadedCodeMirror!.langCompartment!.reconfigure(\n          this._mode\n        ),\n      });\n    }\n    if (changedProps.has(\"readOnly\")) {\n      this.codemirror.dispatch({\n        effects: this._loadedCodeMirror!.readonlyCompartment!.reconfigure(\n          this._loadedCodeMirror!.EditorView!.editable.of(!this.readOnly)\n        ),\n      });\n    }\n    if (changedProps.has(\"_value\") && this._value !== this.value) {\n      this.codemirror.dispatch({\n        changes: {\n          from: 0,\n          to: this.codemirror.state.doc.length,\n          insert: this._value,\n        },\n      });\n    }\n    if (changedProps.has(\"error\")) {\n      this.classList.toggle(\"error-state\", this.error);\n    }\n  }\n\n  protected firstUpdated(changedProps: PropertyValues): void {\n    super.firstUpdated(changedProps);\n    this._blockKeyboardShortcuts();\n    this._load();\n  }\n\n  private get _mode() {\n    return this._loadedCodeMirror!.langs[this.mode];\n  }\n\n  private async _load(): Promise<void> {\n    this._loadedCodeMirror = await loadCodeMirror();\n\n    this.codemirror = new this._loadedCodeMirror.EditorView({\n      state: this._loadedCodeMirror.EditorState.create({\n        doc: this._value,\n        extensions: [\n          this._loadedCodeMirror.lineNumbers(),\n          this._loadedCodeMirror.EditorState.allowMultipleSelections.of(true),\n          this._loadedCodeMirror.history(),\n          this._loadedCodeMirror.highlightSelectionMatches(),\n          this._loadedCodeMirror.highlightActiveLine(),\n          this._loadedCodeMirror.drawSelection(),\n          this._loadedCodeMirror.rectangularSelection(),\n          this._loadedCodeMirror.keymap.of([\n            ...this._loadedCodeMirror.defaultKeymap,\n            ...this._loadedCodeMirror.searchKeymap,\n            ...this._loadedCodeMirror.historyKeymap,\n            ...this._loadedCodeMirror.tabKeyBindings,\n            saveKeyBinding,\n          ] as KeyBinding[]),\n          this._loadedCodeMirror.langCompartment.of(this._mode),\n          this._loadedCodeMirror.theme,\n          this._loadedCodeMirror.Prec.fallback(\n            this._loadedCodeMirror.highlightStyle\n          ),\n          this._loadedCodeMirror.readonlyCompartment.of(\n            this._loadedCodeMirror.EditorView.editable.of(!this.readOnly)\n          ),\n          this._loadedCodeMirror.EditorView.updateListener.of((update) =>\n            this._onUpdate(update)\n          ),\n        ],\n      }),\n      root: this.shadowRoot!,\n      parent: this.shadowRoot!,\n    });\n  }\n\n  private _blockKeyboardShortcuts() {\n    this.addEventListener(\"keydown\", (ev) => ev.stopPropagation());\n  }\n\n  private _onUpdate(update: ViewUpdate): void {\n    if (!update.docChanged) {\n      return;\n    }\n    const newValue = this.value;\n    if (newValue === this._value) {\n      return;\n    }\n    this._value = newValue;\n    fireEvent(this, \"value-changed\", { value: this._value });\n  }\n\n  // Only Lit 2.0 will use this\n  static get styles(): CSSResultGroup {\n    return css`\n      :host(.error-state) div.cm-wrap .cm-gutters {\n        border-color: var(--error-state-color, red);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-code-editor\": HaCodeEditor;\n  }\n}\n","import { Dialog } from \"@material/mwc-dialog\";\nimport { mdiClose } from \"@mdi/js\";\nimport { css, CSSResultGroup, html, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport { computeRTLDirection } from \"../common/util/compute_rtl\";\nimport type { HomeAssistant } from \"../types\";\nimport \"@material/mwc-icon-button/mwc-icon-button\";\nimport \"./ha-svg-icon\";\n\nexport const createCloseHeading = (\n  hass: HomeAssistant,\n  title: string | TemplateResult\n) => html`\n  <span class=\"header_title\">${title}</span>\n  <mwc-icon-button\n    aria-label=${hass.localize(\"ui.dialogs.generic.close\")}\n    dialogAction=\"close\"\n    class=\"header_button\"\n    dir=${computeRTLDirection(hass)}\n  >\n    <ha-svg-icon .path=${mdiClose}></ha-svg-icon>\n  </mwc-icon-button>\n`;\n\n@customElement(\"ha-dialog\")\n// @ts-expect-error\nexport class HaDialog extends Dialog {\n  public scrollToPos(x: number, y: number) {\n    this.contentElement.scrollTo(x, y);\n  }\n\n  protected renderHeading() {\n    return html`<slot name=\"heading\"> ${super.renderHeading()} </slot>`;\n  }\n\n  protected static get styles(): CSSResultGroup {\n    return [\n      Dialog.styles,\n      css`\n        .mdc-dialog {\n          --mdc-dialog-scroll-divider-color: var(--divider-color);\n          z-index: var(--dialog-z-index, 7);\n          backdrop-filter: var(--dialog-backdrop-filter, none);\n        }\n        .mdc-dialog__actions {\n          justify-content: var(--justify-action-buttons, flex-end);\n          padding-bottom: max(env(safe-area-inset-bottom), 8px);\n        }\n        .mdc-dialog__container {\n          align-items: var(--vertial-align-dialog, center);\n        }\n        .mdc-dialog__title::before {\n          display: block;\n          height: 20px;\n        }\n        .mdc-dialog .mdc-dialog__content {\n          position: var(--dialog-content-position, relative);\n          padding: var(--dialog-content-padding, 20px 24px);\n        }\n        :host([hideactions]) .mdc-dialog .mdc-dialog__content {\n          padding-bottom: max(\n            var(--dialog-content-padding, 20px),\n            env(safe-area-inset-bottom)\n          );\n        }\n        .mdc-dialog .mdc-dialog__surface {\n          position: var(--dialog-surface-position, relative);\n          top: var(--dialog-surface-top);\n          min-height: var(--mdc-dialog-min-height, auto);\n        }\n        :host([flexContent]) .mdc-dialog .mdc-dialog__content {\n          display: flex;\n          flex-direction: column;\n        }\n        .header_button {\n          position: absolute;\n          right: 16px;\n          top: 10px;\n          text-decoration: none;\n          color: inherit;\n        }\n        .header_title {\n          margin-right: 40px;\n        }\n        [dir=\"rtl\"].header_button {\n          right: auto;\n          left: 16px;\n        }\n        [dir=\"rtl\"].header_title {\n          margin-left: 40px;\n          margin-right: 0px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog\": HaDialog;\n  }\n}\n","/* eslint-disable no-template-curly-in-string */\nimport {css, CSSResultGroup, html, LitElement, TemplateResult} from \"lit\";\nimport {property, customElement} from 'lit/decorators';\nimport \"@polymer/paper-listbox/paper-listbox\";\nimport { mdiPlus } from \"@mdi/js\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { createCloseHeading } from \"../../components/ha-dialog\";\nimport \"../../components/ha-hls-player\";\nimport type { HomeAssistant } from \"../../types\";\nimport { haStyleDialog } from \"../../resources/styles\";\nimport { WebBrowserPlayMediaDialogParams } from \"./show-media-player-dialog\";\nimport { addEntitiesToLovelaceView } from \"../lovelace/editor/add-entities-to-view\";\nimport \"../../components/ha-code-editor\";\nimport \"../../components/entity/ha-entity-picker\";\nimport \"../../components/ha-paper-dropdown-menu\";\n\nexport interface ElemetCssAttr {\n  position: string;\n  top: string;\n  left: string;\n  transform: string;\n}\n\nexport interface AisPictureElements {\n  type: string;\n  entity: string;\n  style: ElemetCssAttr;\n}\n\nexport interface AisDragItem {\n  style: string;\n  currentX: number;\n  currentY: number;\n  initialX: number;\n  initialY: number;\n  offsetX: number;\n  offsetY: number;\n}\n\n@customElement(\"hui-dialog-web-browser-ais-edit-image\")\nexport class HuiDialogWebBrowserAisEditImage extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() private codeValue = \"\";\n\n  @property() private selectedElementType = \"\";\n\n  @property() private selectedEntityId = \"\";\n\n  @property() private pictureElements: AisPictureElements[] = [];\n\n  @property() private dragCurrentItemIndex = -1;\n\n  @property() private dragItems: AisDragItem[] = [];\n\n  @property() private dragItemStyle = \"\";\n\n  @property() private dragActive = false;\n\n  @property({ attribute: false })\n  private _params?: WebBrowserPlayMediaDialogParams;\n\n  public showDialog(params: WebBrowserPlayMediaDialogParams): void {\n    this._params = params;\n    this.codeValue =\n      \"type: picture-elements\\nimage: '/local/img/${this._params.title}'\\ntitle: ''\\nelements: []\";\n    this.selectedElementType = \"\";\n    this.selectedEntityId = \"\";\n    this.pictureElements = [];\n  }\n\n  public closeDialog() {\n    this._params = undefined;\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  private _dragStart(e) {\n    // 1. check if drag div has id type number\n    if (isNaN(e.target.id)) {\n      return;\n    }\n    // 2. check if draged div id is in the dragItems array\n    if (typeof this.dragItems[e.target.id] === \"undefined\") {\n      return;\n    }\n\n    this.dragCurrentItemIndex = e.target.id;\n\n    if (e.type === \"touchstart\") {\n      this.dragItems[this.dragCurrentItemIndex].initialX =\n        e.touches[0].clientX -\n        this.dragItems[this.dragCurrentItemIndex].offsetX;\n      this.dragItems[this.dragCurrentItemIndex].initialY =\n        e.touches[0].clientY -\n        this.dragItems[this.dragCurrentItemIndex].offsetY;\n    } else {\n      this.dragItems[this.dragCurrentItemIndex].initialX =\n        e.clientX - this.dragItems[this.dragCurrentItemIndex].offsetX;\n      this.dragItems[this.dragCurrentItemIndex].initialY =\n        e.clientY - this.dragItems[this.dragCurrentItemIndex].offsetY;\n    }\n\n    this.dragActive = true;\n  }\n\n  private _dragEnd(_e) {\n    if (this.dragActive) {\n      this.dragItems[this.dragCurrentItemIndex].initialX = this.dragItems[\n        this.dragCurrentItemIndex\n      ].currentX;\n      this.dragItems[this.dragCurrentItemIndex].initialY = this.dragItems[\n        this.dragCurrentItemIndex\n      ].currentY;\n      this.dragActive = false;\n      this.pictureElements[\n        this.dragCurrentItemIndex\n      ].style.transform = this.dragItemStyle;\n      this._handleCodeChanged();\n    }\n  }\n\n  private _getDragStyle(idx: number) {\n    if (idx === this.dragCurrentItemIndex) {\n      return \"transform: \" + this.dragItemStyle;\n    }\n    return \"transform: \" + this.dragItems[idx].style;\n  }\n\n  private _drag(e) {\n    if (this.dragActive) {\n      e.preventDefault();\n      let currentX;\n      let currentY;\n      if (e.type === \"touchmove\") {\n        currentX =\n          e.touches[0].clientX -\n          this.dragItems[this.dragCurrentItemIndex].initialX;\n        currentY =\n          e.touches[0].clientY -\n          this.dragItems[this.dragCurrentItemIndex].initialY;\n      } else {\n        currentX =\n          e.clientX - this.dragItems[this.dragCurrentItemIndex].initialX;\n        currentY =\n          e.clientY - this.dragItems[this.dragCurrentItemIndex].initialY;\n      }\n      this.dragItemStyle =\n        \"translate3d(\" + currentX + \"px, \" + currentY + \"px, 0)\";\n\n      this.dragItems[this.dragCurrentItemIndex].currentX = currentX;\n      this.dragItems[this.dragCurrentItemIndex].currentY = currentY;\n\n      this.dragItems[this.dragCurrentItemIndex].offsetX = currentX;\n      this.dragItems[this.dragCurrentItemIndex].offsetY = currentY;\n\n      this.dragItems[this.dragCurrentItemIndex].style =\n        \"translate3d(\" + currentX + \"px, \" + currentY + \"px, 0)\";\n    }\n  }\n\n  private _handleAddElement() {\n    const cssAttr: ElemetCssAttr = {\n      position: \"absolute\",\n      top: \"50%\",\n      left: \"50%\",\n      transform: \"\",\n    };\n    const element: AisPictureElements = {\n      type: this.selectedElementType,\n      entity: this.selectedEntityId,\n      style: cssAttr,\n    };\n    this.pictureElements.push(element);\n    const aisDragItem: AisDragItem = {\n      currentX: 0,\n      currentY: 0,\n      initialX: 0,\n      initialY: 0,\n      offsetX: 0,\n      offsetY: 0,\n      style: \"\",\n    };\n    this.dragItems.push(aisDragItem);\n    this.selectedEntityId = \"\";\n    this.selectedElementType = \"\";\n    this._handleCodeChanged();\n  }\n\n  private _handleSelectedElementTypeChanged(e: CustomEvent) {\n    const itemid = e.detail.item.getAttribute(\"itemid\");\n    this.selectedElementType = itemid;\n  }\n\n  private _handleSelectedEntityIdChanged(e: CustomEvent) {\n    this.selectedEntityId = e.detail.value;\n  }\n\n  private entityFilter(stateObj) {\n    return !stateObj.entity_id.includes(\".ais\");\n  }\n\n  private _handleCodeChanged() {\n    this.codeValue =\n      \"type: picture-elements\\nimage: '/local/img/${this._params.title}'\\ntitle: ''\\nelements: [\\n\";\n    this.pictureElements.forEach((element) => {\n      this.codeValue += JSON.stringify(element) + \",\\n\";\n    });\n    this.codeValue += \"]\";\n  }\n\n  private _addToLovelaceView(): void {\n    const url = this._params?.sourceUrl\n      .split(\"?authSig=\")[0]\n      .replace(\"/media/galeria/\", \" /local/img/\");\n    addEntitiesToLovelaceView(\n      this,\n      this.hass,\n      [],\n      [\n        {\n          type: \"picture-elements\",\n          title: \"\",\n          image: url,\n          elements: this.pictureElements,\n        },\n      ]\n    );\n    this.closeDialog();\n  }\n\n  protected render(): TemplateResult {\n    if (!this._params || !this._params.sourceType || !this._params.sourceUrl) {\n      return html``;\n    }\n    return html`\n      <ha-dialog\n        open\n        hideActions\n        .heading=${createCloseHeading(\n          this.hass,\n          \"Konfiguracja karty elementy obrazu\"\n        )}\n        @closed=${this.closeDialog}\n      >\n        <div id=\"outerContainer\">\n          <div\n            id=\"container\"\n            style=\"background-image: url(${this._params.sourceUrl});\"\n            @touchstart=${this._dragStart}\n            @touchend=${this._dragEnd}\n            @touchmove=${this._drag}\n            @mousedown=${this._dragStart}\n            @mouseup=${this._dragEnd}\n            @mousemove=${this._drag}\n          >\n            ${this.pictureElements.map(\n              (pictureElement, index) => html` <div\n                .id=${index.toString()}\n                class=\"pictureElementItem\"\n                .style=${this._getDragStyle(index)}\n              >\n                ${pictureElement.entity}\n              </div>`\n            )}\n          </div>\n        </div>\n        <h3>Wybierz element do dodania</h3>\n        <ha-paper-dropdown-menu dynamic-align label-float label=\"Typ\">\n          <paper-listbox\n            slot=\"dropdown-content\"\n            attr-for-selected=\"itemId\"\n            .selected=${this.selectedElementType}\n            @iron-select=${this._handleSelectedElementTypeChanged}\n          >\n            <paper-item itemid=\"state-badge\">State Badge</paper-item>\n            <paper-item itemid=\"state-icon\">State Icon</paper-item>\n            <paper-item itemid=\"state-label\">State Label</paper-item>\n          </paper-listbox>\n        </ha-paper-dropdown-menu>\n        <ha-entity-picker\n          .hass=${this.hass}\n          .value=${this.selectedEntityId}\n          @value-changed=${this._handleSelectedEntityIdChanged}\n          .configValue=${\"entity\"}\n          .entityFilter=${this.entityFilter}\n          allow-custom-entity\n        ></ha-entity-picker>\n        ${this.selectedEntityId !== \"\" && this.selectedElementType !== \"\"\n          ? html` <mwc-button @click=${this._handleAddElement}>\n              <ha-svg-icon .path=${mdiPlus}></ha-svg-icon>\n              Dodaj element do obrazu\n            </mwc-button>`\n          : \"\"}\n        <br /><br />\n        <ha-code-editor mode=\"yaml\" .value=${this.codeValue}></ha-code-editor>\n        <div class=\"card-actions\">\n          <mwc-button @click=${this._addToLovelaceView}>\n            ${this.hass.localize(\n              \"ui.panel.config.devices.entities.add_entities_lovelace\"\n            ) || \"Dodaj do interfejsu użytkownika\"}\n          </mwc-button>\n        </div>\n      </ha-dialog>\n    `;\n  }\n\n  static get styles(): CSSResultGroup[] {\n    return [\n      haStyleDialog,\n      css`\n        /* @media (min-width: 800px) {\n          ha-dialog {\n            --mdc-dialog-max-width: 800px;\n            --mdc-dialog-min-width: 400px;\n            width: 100%;\n          }\n        } */\n        /* make dialog fullscreen */\n        ha-dialog {\n          --mdc-dialog-min-width: calc(\n            100vw - env(safe-area-inset-right) - env(safe-area-inset-left)\n          );\n          --mdc-dialog-max-width: calc(\n            100vw - env(safe-area-inset-right) - env(safe-area-inset-left)\n          );\n          --mdc-dialog-min-height: 100%;\n          --mdc-dialog-max-height: 100%;\n          --mdc-shape-medium: 0px;\n          --vertial-align-dialog: flex-end;\n        }\n        #outerContainer {\n          height: 50vh;\n        }\n        #container {\n          height: 50vh;\n          width: 50vw;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          overflow: hidden;\n          border-radius: 7px;\n          touch-action: none;\n          background-size: 50vw 50vh;\n          background-repeat: no-repeat;\n          background-position: center;\n          margin: auto;\n        }\n        div.pictureElementItem {\n          width: 80px;\n          height: 80px;\n          background-color: rgb(245, 230, 99);\n          border: 10px solid rgba(136, 136, 136, 0.5);\n          border-radius: 50%;\n          touch-action: none;\n          user-select: none;\n          top: 50%;\n          left: 50%;\n        }\n        div.pictureElementItem:active {\n          background-color: rgba(168, 218, 220, 1);\n        }\n        div.pictureElementItem:hover {\n          cursor: pointer;\n          /* border-width: 20px; */\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-dialog-web-browser-ais-edit-image\": HuiDialogWebBrowserAisEditImage;\n  }\n}\n"],"names":[],"sourceRoot":""}