{"version":3,"file":"a47e4488.js","mappings":";AAaA;;AAEA;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQA;;;;;;;;ACpBA;;;;;;;;;;;;;;;;;ACCA;;;AC+EA;;;AAGA;;;AAGA;AACA;;;AAIA;AAGA;;;;AAIA;AACA;AACA;AACA;;;;AAKA;AAGA;;;;AAIA;AACA;;;;AAIA;;;AAKA;;;AAGA;AACA;;;;AAIA;;AAIA;AACA;;;AAGA;AAGA;;;;AAMA;AACA;;AAEA;;;AAGA;;AAGA;;;;;AAQA;AACA;;AAEA;;AAEA;;;;AAKA;;;AAIA;AAIA;;AAEA;;;;AA9GA;;;;;;;;AAnDA","sources":["webpack://home-assistant-frontend/./src/components/ha-dialog.ts","webpack://home-assistant-frontend/./src/components/ha-formfield.ts","webpack://home-assistant-frontend/./src/components/ha-switch.ts","webpack://home-assistant-frontend/./src/panels/config/users/dialog-add-user.ts"],"sourcesContent":["import { Dialog } from \"@material/mwc-dialog\";\nimport { mdiClose } from \"@mdi/js\";\nimport { css, CSSResultGroup, html, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport { computeRTLDirection } from \"../common/util/compute_rtl\";\nimport type { HomeAssistant } from \"../types\";\nimport \"@material/mwc-icon-button/mwc-icon-button\";\nimport \"./ha-svg-icon\";\n\nexport const createCloseHeading = (\n  hass: HomeAssistant,\n  title: string | TemplateResult\n) => html`\n  <span class=\"header_title\">${title}</span>\n  <mwc-icon-button\n    aria-label=${hass.localize(\"ui.dialogs.generic.close\")}\n    dialogAction=\"close\"\n    class=\"header_button\"\n    dir=${computeRTLDirection(hass)}\n  >\n    <ha-svg-icon .path=${mdiClose}></ha-svg-icon>\n  </mwc-icon-button>\n`;\n\n@customElement(\"ha-dialog\")\n// @ts-expect-error\nexport class HaDialog extends Dialog {\n  public scrollToPos(x: number, y: number) {\n    this.contentElement.scrollTo(x, y);\n  }\n\n  protected renderHeading() {\n    return html`<slot name=\"heading\"> ${super.renderHeading()} </slot>`;\n  }\n\n  protected static get styles(): CSSResultGroup {\n    return [\n      Dialog.styles,\n      css`\n        .mdc-dialog {\n          --mdc-dialog-scroll-divider-color: var(--divider-color);\n          z-index: var(--dialog-z-index, 7);\n          backdrop-filter: var(--dialog-backdrop-filter, none);\n        }\n        .mdc-dialog__actions {\n          justify-content: var(--justify-action-buttons, flex-end);\n          padding-bottom: max(env(safe-area-inset-bottom), 8px);\n        }\n        .mdc-dialog__container {\n          align-items: var(--vertial-align-dialog, center);\n        }\n        .mdc-dialog__title::before {\n          display: block;\n          height: 20px;\n        }\n        .mdc-dialog .mdc-dialog__content {\n          position: var(--dialog-content-position, relative);\n          padding: var(--dialog-content-padding, 20px 24px);\n        }\n        :host([hideactions]) .mdc-dialog .mdc-dialog__content {\n          padding-bottom: max(\n            var(--dialog-content-padding, 20px),\n            env(safe-area-inset-bottom)\n          );\n        }\n        .mdc-dialog .mdc-dialog__surface {\n          position: var(--dialog-surface-position, relative);\n          top: var(--dialog-surface-top);\n          min-height: var(--mdc-dialog-min-height, auto);\n        }\n        :host([flexContent]) .mdc-dialog .mdc-dialog__content {\n          display: flex;\n          flex-direction: column;\n        }\n        .header_button {\n          position: absolute;\n          right: 16px;\n          top: 10px;\n          text-decoration: none;\n          color: inherit;\n        }\n        .header_title {\n          margin-right: 40px;\n        }\n        [dir=\"rtl\"].header_button {\n          right: auto;\n          left: 16px;\n        }\n        [dir=\"rtl\"].header_title {\n          margin-left: 40px;\n          margin-right: 0px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog\": HaDialog;\n  }\n}\n","import { Formfield } from \"@material/mwc-formfield\";\nimport { css, CSSResultGroup } from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-formfield\")\n// @ts-expect-error\nexport class HaFormfield extends Formfield {\n  protected static get styles(): CSSResultGroup {\n    return [\n      Formfield.styles,\n      css`\n        :host(:not([alignEnd])) ::slotted(ha-switch) {\n          margin-right: 10px;\n        }\n        :host([dir=\"rtl\"]:not([alignEnd])) ::slotted(ha-switch) {\n          margin-left: 10px;\n          margin-right: auto;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-formfield\": HaFormfield;\n  }\n}\n","import { Switch } from \"@material/mwc-switch/deprecated\";\nimport { css, CSSResultGroup } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { forwardHaptic } from \"../data/haptics\";\n\n@customElement(\"ha-switch\")\n// @ts-expect-error\nexport class HaSwitch extends Switch {\n  // Generate a haptic vibration.\n  // Only set to true if the new value of the switch is applied right away when toggling.\n  // Do not add haptic when a user is required to press save.\n  @property({ type: Boolean }) public haptic = false;\n\n  protected firstUpdated() {\n    super.firstUpdated();\n    this.style.setProperty(\n      \"--mdc-theme-secondary\",\n      \"var(--switch-checked-color)\"\n    );\n    this.addEventListener(\"change\", () => {\n      if (this.haptic) {\n        forwardHaptic(\"light\");\n      }\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      Switch.styles,\n      css`\n        .mdc-switch.mdc-switch--checked .mdc-switch__thumb {\n          background-color: var(--switch-checked-button-color);\n          border-color: var(--switch-checked-button-color);\n        }\n        .mdc-switch.mdc-switch--checked .mdc-switch__track {\n          background-color: var(--switch-checked-track-color);\n          border-color: var(--switch-checked-track-color);\n        }\n        .mdc-switch:not(.mdc-switch--checked) .mdc-switch__thumb {\n          background-color: var(--switch-unchecked-button-color);\n          border-color: var(--switch-unchecked-button-color);\n        }\n        .mdc-switch:not(.mdc-switch--checked) .mdc-switch__track {\n          background-color: var(--switch-unchecked-track-color);\n          border-color: var(--switch-unchecked-track-color);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-switch\": HaSwitch;\n  }\n}\n","import \"@material/mwc-button\";\nimport \"@polymer/paper-input/paper-input\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { computeRTLDirection } from \"../../../common/util/compute_rtl\";\nimport \"../../../components/ha-circular-progress\";\nimport \"../../../components/ha-dialog\";\nimport \"../../../components/ha-formfield\";\nimport \"../../../components/ha-switch\";\nimport { createAuthForUser } from \"../../../data/auth\";\nimport {\n  createUser,\n  deleteUser,\n  SYSTEM_GROUP_ID_ADMIN,\n  SYSTEM_GROUP_ID_USER,\n  User,\n} from \"../../../data/user\";\nimport { PolymerChangedEvent } from \"../../../polymer-types\";\nimport { haStyleDialog } from \"../../../resources/styles\";\nimport { HomeAssistant } from \"../../../types\";\nimport { AddUserDialogParams } from \"./show-dialog-add-user\";\n\n@customElement(\"dialog-add-user\")\nexport class DialogAddUser extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _loading = false;\n\n  // Error message when can't talk to server etc\n  @state() private _error?: string;\n\n  @state() private _params?: AddUserDialogParams;\n\n  @state() private _name?: string;\n\n  @state() private _username?: string;\n\n  @state() private _password?: string;\n\n  @state() private _passwordConfirm?: string;\n\n  @state() private _isAdmin?: boolean;\n\n  @state() private _allowChangeName = true;\n\n  public showDialog(params: AddUserDialogParams) {\n    this._params = params;\n    this._name = this._params.name || \"\";\n    this._username = \"\";\n    this._password = \"\";\n    this._passwordConfirm = \"\";\n    this._isAdmin = false;\n    this._error = undefined;\n    this._loading = false;\n\n    if (this._params.name) {\n      this._allowChangeName = false;\n      this._maybePopulateUsername();\n    } else {\n      this._allowChangeName = true;\n    }\n  }\n\n  protected firstUpdated(changedProperties: PropertyValues) {\n    super.firstUpdated(changedProperties);\n    this.addEventListener(\"keypress\", (ev) => {\n      if (ev.keyCode === 13) {\n        this._createUser(ev);\n      }\n    });\n  }\n\n  protected render(): TemplateResult {\n    if (!this._params) {\n      return html``;\n    }\n    return html`\n      <ha-dialog\n        open\n        @closed=${this._close}\n        scrimClickAction\n        escapeKeyAction\n        .heading=${this.hass.localize(\"ui.panel.config.users.add_user.caption\")}\n      >\n        <div>\n          ${this._error ? html` <div class=\"error\">${this._error}</div> ` : \"\"}\n          ${this._allowChangeName\n            ? html` <paper-input\n                class=\"name\"\n                name=\"name\"\n                .label=${this.hass.localize(\n                  \"ui.panel.config.users.editor.name\"\n                )}\n                .value=${this._name}\n                required\n                auto-validate\n                autocapitalize=\"on\"\n                .errorMessage=${this.hass.localize(\"ui.common.error_required\")}\n                @value-changed=${this._handleValueChanged}\n                @blur=${this._maybePopulateUsername}\n              ></paper-input>`\n            : \"\"}\n          <paper-input\n            class=\"username\"\n            name=\"username\"\n            .label=${this.hass.localize(\n              \"ui.panel.config.users.editor.username\"\n            )}\n            .value=${this._username}\n            required\n            auto-validate\n            autocapitalize=\"none\"\n            @value-changed=${this._handleValueChanged}\n            .errorMessage=${this.hass.localize(\"ui.common.error_required\")}\n          ></paper-input>\n\n          <paper-input\n            .label=${this.hass.localize(\n              \"ui.panel.config.users.add_user.password\"\n            )}\n            type=\"password\"\n            name=\"password\"\n            .value=${this._password}\n            required\n            auto-validate\n            @value-changed=${this._handleValueChanged}\n            .errorMessage=${this.hass.localize(\"ui.common.error_required\")}\n          ></paper-input>\n\n          <paper-input\n            label=${this.hass.localize(\n              \"ui.panel.config.users.add_user.password_confirm\"\n            )}\n            name=\"passwordConfirm\"\n            .value=${this._passwordConfirm}\n            @value-changed=${this._handleValueChanged}\n            required\n            type=\"password\"\n            .invalid=${this._password !== \"\" &&\n            this._passwordConfirm !== \"\" &&\n            this._passwordConfirm !== this._password}\n            .errorMessage=${this.hass.localize(\n              \"ui.panel.config.users.add_user.password_not_match\"\n            )}\n          ></paper-input>\n\n          <ha-formfield\n            .label=${this.hass.localize(\"ui.panel.config.users.editor.admin\")}\n            .dir=${computeRTLDirection(this.hass)}\n          >\n            <ha-switch .checked=${this._isAdmin} @change=${this._adminChanged}>\n            </ha-switch>\n          </ha-formfield>\n          ${!this._isAdmin\n            ? html`\n                <br />\n                ${this.hass.localize(\n                  \"ui.panel.config.users.users_privileges_note\"\n                )}\n              `\n            : \"\"}\n        </div>\n        <mwc-button\n          slot=\"secondaryAction\"\n          @click=${this._close}\n          .disabled=${this._loading}\n        >\n          ${this.hass!.localize(\"ui.common.cancel\")}\n        </mwc-button>\n        ${this._loading\n          ? html`\n              <div slot=\"primaryAction\" class=\"submit-spinner\">\n                <ha-circular-progress active></ha-circular-progress>\n              </div>\n            `\n          : html`\n              <mwc-button\n                slot=\"primaryAction\"\n                .disabled=${!this._name ||\n                !this._username ||\n                !this._password ||\n                this._password !== this._passwordConfirm}\n                @click=${this._createUser}\n              >\n                ${this.hass.localize(\"ui.panel.config.users.add_user.create\")}\n              </mwc-button>\n            `}\n      </ha-dialog>\n    `;\n  }\n\n  private _close() {\n    this._params = undefined;\n  }\n\n  private _maybePopulateUsername() {\n    if (this._username || !this._name) {\n      return;\n    }\n\n    const parts = this._name.split(\" \");\n\n    if (parts.length) {\n      this._username = parts[0].toLowerCase();\n    }\n  }\n\n  private _handleValueChanged(ev: PolymerChangedEvent<string>): void {\n    this._error = undefined;\n    const name = (ev.target as any).name;\n    this[`_${name}`] = ev.detail.value;\n  }\n\n  private async _adminChanged(ev): Promise<void> {\n    this._isAdmin = ev.target.checked;\n  }\n\n  private async _createUser(ev) {\n    ev.preventDefault();\n    if (!this._name || !this._username || !this._password) {\n      return;\n    }\n\n    this._loading = true;\n    this._error = \"\";\n\n    let user: User;\n    try {\n      const userResponse = await createUser(this.hass, this._name, [\n        this._isAdmin ? SYSTEM_GROUP_ID_ADMIN : SYSTEM_GROUP_ID_USER,\n      ]);\n      user = userResponse.user;\n    } catch (err: any) {\n      this._loading = false;\n      this._error = err.message;\n      return;\n    }\n\n    try {\n      await createAuthForUser(\n        this.hass,\n        user.id,\n        this._username,\n        this._password\n      );\n    } catch (err: any) {\n      await deleteUser(this.hass, user.id);\n      this._loading = false;\n      this._error = err.message;\n      return;\n    }\n\n    user.username = this._username;\n    this._params!.userAddedCallback(user);\n    this._close();\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyleDialog,\n      css`\n        ha-dialog {\n          --mdc-dialog-max-width: 500px;\n          --dialog-z-index: 10;\n        }\n        ha-switch {\n          margin-top: 8px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-add-user\": DialogAddUser;\n  }\n}\n"],"names":[],"sourceRoot":""}