{"version":3,"file":"38a7b162.js","mappings":";AAaA;;AAEA;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQA;;;;;ACgCA;AACA;;AAIA;AACA;;;AAGA;;;;;;;;;AASA;;;AAGA;;AAGA;;;AAKA;AAGA;;;AAGA;AACA;;;AAGA;;AAGA;;;AAKA;;;AAKA;;;AAKA;;;;AAIA;;;AAIA;AACA;;;;AAIA;AACA;AAGA;;AAEA;;;;AAKA;AAEA;;AAIA;;;AAIA;AAGA;;;;AArGA;;;;;;;;;;;;;;;;;;;AA3BA","sources":["webpack://home-assistant-frontend/./src/components/ha-dialog.ts","webpack://home-assistant-frontend/./src/panels/lovelace/editor/hui-dialog-save-config.ts"],"sourcesContent":["import { Dialog } from \"@material/mwc-dialog\";\nimport { mdiClose } from \"@mdi/js\";\nimport { css, CSSResultGroup, html, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport { computeRTLDirection } from \"../common/util/compute_rtl\";\nimport type { HomeAssistant } from \"../types\";\nimport \"@material/mwc-icon-button/mwc-icon-button\";\nimport \"./ha-svg-icon\";\n\nexport const createCloseHeading = (\n  hass: HomeAssistant,\n  title: string | TemplateResult\n) => html`\n  <span class=\"header_title\">${title}</span>\n  <mwc-icon-button\n    aria-label=${hass.localize(\"ui.dialogs.generic.close\")}\n    dialogAction=\"close\"\n    class=\"header_button\"\n    dir=${computeRTLDirection(hass)}\n  >\n    <ha-svg-icon .path=${mdiClose}></ha-svg-icon>\n  </mwc-icon-button>\n`;\n\n@customElement(\"ha-dialog\")\n// @ts-expect-error\nexport class HaDialog extends Dialog {\n  public scrollToPos(x: number, y: number) {\n    this.contentElement.scrollTo(x, y);\n  }\n\n  protected renderHeading() {\n    return html`<slot name=\"heading\"> ${super.renderHeading()} </slot>`;\n  }\n\n  protected static get styles(): CSSResultGroup {\n    return [\n      Dialog.styles,\n      css`\n        .mdc-dialog {\n          --mdc-dialog-scroll-divider-color: var(--divider-color);\n          z-index: var(--dialog-z-index, 7);\n          backdrop-filter: var(--dialog-backdrop-filter, none);\n        }\n        .mdc-dialog__actions {\n          justify-content: var(--justify-action-buttons, flex-end);\n          padding-bottom: max(env(safe-area-inset-bottom), 8px);\n        }\n        .mdc-dialog__container {\n          align-items: var(--vertial-align-dialog, center);\n        }\n        .mdc-dialog__title::before {\n          display: block;\n          height: 20px;\n        }\n        .mdc-dialog .mdc-dialog__content {\n          position: var(--dialog-content-position, relative);\n          padding: var(--dialog-content-padding, 20px 24px);\n        }\n        :host([hideactions]) .mdc-dialog .mdc-dialog__content {\n          padding-bottom: max(\n            var(--dialog-content-padding, 20px),\n            env(safe-area-inset-bottom)\n          );\n        }\n        .mdc-dialog .mdc-dialog__surface {\n          position: var(--dialog-surface-position, relative);\n          top: var(--dialog-surface-top);\n          min-height: var(--mdc-dialog-min-height, auto);\n        }\n        :host([flexContent]) .mdc-dialog .mdc-dialog__content {\n          display: flex;\n          flex-direction: column;\n        }\n        .header_button {\n          position: absolute;\n          right: 16px;\n          top: 10px;\n          text-decoration: none;\n          color: inherit;\n        }\n        .header_title {\n          margin-right: 40px;\n        }\n        [dir=\"rtl\"].header_button {\n          right: auto;\n          left: 16px;\n        }\n        [dir=\"rtl\"].header_title {\n          margin-left: 40px;\n          margin-right: 0px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog\": HaDialog;\n  }\n}\n","import \"@material/mwc-button\";\nimport \"@material/mwc-icon-button/mwc-icon-button\";\nimport { mdiHelpCircle } from \"@mdi/js\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport { computeRTLDirection } from \"../../../common/util/compute_rtl\";\nimport \"../../../components/ha-circular-progress\";\nimport \"../../../components/ha-dialog\";\nimport \"../../../components/ha-formfield\";\nimport \"../../../components/ha-svg-icon\";\nimport \"../../../components/ha-switch\";\nimport \"../../../components/ha-yaml-editor\";\nimport type { LovelaceConfig } from \"../../../data/lovelace\";\nimport type { HassDialog } from \"../../../dialogs/make-dialog-manager\";\nimport { haStyleDialog } from \"../../../resources/styles\";\nimport type { HomeAssistant } from \"../../../types\";\nimport { documentationUrl } from \"../../../util/documentation-url\";\nimport { expandLovelaceConfigStrategies } from \"../strategies/get-strategy\";\nimport type { SaveDialogParams } from \"./show-save-config-dialog\";\n\nconst EMPTY_CONFIG: LovelaceConfig = { views: [{ title: \"Home\" }] };\n\n@customElement(\"hui-dialog-save-config\")\nexport class HuiSaveConfig extends LitElement implements HassDialog {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _params?: SaveDialogParams;\n\n  @state() private _emptyConfig = false;\n\n  @state() private _saving: boolean;\n\n  public constructor() {\n    super();\n    this._saving = false;\n  }\n\n  public showDialog(params: SaveDialogParams): void {\n    this._params = params;\n    this._emptyConfig = false;\n  }\n\n  public closeDialog(): boolean {\n    this._params = undefined;\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n    return true;\n  }\n\n  protected render(): TemplateResult {\n    if (!this._params) {\n      return html``;\n    }\n    return html`\n      <ha-dialog\n        open\n        scrimClickAction\n        escapeKeyAction\n        @closed=${this._close}\n        .heading=${html`${this.hass!.localize(\n            \"ui.panel.lovelace.editor.save_config.header\"\n          )}<a\n            class=\"header_button\"\n            href=${documentationUrl(this.hass!, \"/lovelace/\")}\n            title=${this.hass!.localize(\"ui.panel.lovelace.menu.help\")}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n            dir=${computeRTLDirection(this.hass!)}\n          >\n            <mwc-icon-button>\n              <ha-svg-icon .path=${mdiHelpCircle}></ha-svg-icon>\n            </mwc-icon-button>\n          </a>`}\n      >\n        <div>\n          <p>\n            ${this.hass!.localize(\"ui.panel.lovelace.editor.save_config.para\")}\n          </p>\n\n          ${this._params.mode === \"storage\"\n            ? html`\n                <p>\n                  ${this.hass!.localize(\n                    \"ui.panel.lovelace.editor.save_config.para_sure\"\n                  )}\n                </p>\n                <ha-formfield\n                  .label=${this.hass!.localize(\n                    \"ui.panel.lovelace.editor.save_config.empty_config\"\n                  )}\n                  .dir=${computeRTLDirection(this.hass!)}\n                >\n                  <ha-switch\n                    .checked=${this._emptyConfig}\n                    @change=${this._emptyConfigChanged}\n                  ></ha-switch\n                ></ha-formfield>\n              `\n            : html`\n                <p>\n                  ${this.hass!.localize(\n                    \"ui.panel.lovelace.editor.save_config.yaml_mode\"\n                  )}\n                </p>\n                <p>\n                  ${this.hass!.localize(\n                    \"ui.panel.lovelace.editor.save_config.yaml_control\"\n                  )}\n                </p>\n                <p>\n                  ${this.hass!.localize(\n                    \"ui.panel.lovelace.editor.save_config.yaml_config\"\n                  )}\n                </p>\n                <ha-yaml-editor\n                  .defaultValue=${this._params!.lovelace.config}\n                ></ha-yaml-editor>\n              `}\n        </div>\n        ${this._params.mode === \"storage\"\n          ? html`\n              <mwc-button\n                slot=\"primaryAction\"\n                .label=${this.hass!.localize(\"ui.common.cancel\")}\n                @click=${this.closeDialog}\n              ></mwc-button>\n              <mwc-button\n                slot=\"primaryAction\"\n                ?disabled=${this._saving}\n                aria-label=${this.hass!.localize(\n                  \"ui.panel.lovelace.editor.save_config.save\"\n                )}\n                @click=${this._saveConfig}\n              >\n                ${this._saving\n                  ? html`<ha-circular-progress\n                      active\n                      size=\"small\"\n                      title=\"Saving\"\n                    ></ha-circular-progress>`\n                  : \"\"}\n                ${this.hass!.localize(\n                  \"ui.panel.lovelace.editor.save_config.save\"\n                )}\n              </mwc-button>\n            `\n          : html`\n              <mwc-button\n                slot=\"primaryAction\"\n                .label=${this.hass!.localize(\n                  \"ui.panel.lovelace.editor.save_config.close\"\n                )}\n                @click=${this.closeDialog}\n              ></mwc-button>\n            `}\n      </ha-dialog>\n    `;\n  }\n\n  private _close(ev?: Event) {\n    if (ev) {\n      ev.stopPropagation();\n    }\n    this.closeDialog();\n  }\n\n  private _emptyConfigChanged(ev) {\n    this._emptyConfig = ev.target.checked;\n  }\n\n  private async _saveConfig(): Promise<void> {\n    if (!this.hass || !this._params) {\n      return;\n    }\n    this._saving = true;\n    try {\n      const lovelace = this._params!.lovelace;\n      await lovelace.saveConfig(\n        this._emptyConfig\n          ? EMPTY_CONFIG\n          : await expandLovelaceConfigStrategies({\n              config: lovelace.config,\n              hass: this.hass!,\n              narrow: this._params!.narrow,\n            })\n      );\n      lovelace.setEditMode(true);\n      this._saving = false;\n      this.closeDialog();\n    } catch (err: any) {\n      alert(`Saving failed: ${err.message}`);\n      this._saving = false;\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyleDialog,\n      css`\n        @media all and (max-width: 450px), all and (max-height: 500px) {\n          /* overrule the ha-style-dialog max-height on small screens */\n          ha-paper-dialog {\n            max-height: 100%;\n            height: 100%;\n          }\n        }\n        @media all and (min-width: 660px) {\n          ha-paper-dialog {\n            width: 650px;\n          }\n        }\n        ha-paper-dialog {\n          max-width: 650px;\n        }\n        ha-switch {\n          padding-bottom: 16px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-dialog-save-config\": HuiSaveConfig;\n  }\n}\n"],"names":[],"sourceRoot":""}