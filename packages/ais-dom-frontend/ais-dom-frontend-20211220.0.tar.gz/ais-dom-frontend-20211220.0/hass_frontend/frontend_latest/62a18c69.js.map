{"version":3,"file":"62a18c69.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA;AAoEA;;AApEA;;;ACWA;;;AAGA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;AAdA","sources":["webpack://home-assistant-frontend/./src/components/ha-card.ts","webpack://home-assistant-frontend/./src/dialogs/ha-store-auth-card.ts"],"sourcesContent":["import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-card\")\nexport class HaCard extends LitElement {\n  @property() public header?: string;\n\n  @property({ type: Boolean, reflect: true }) public outlined = false;\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        background: var(\n          --ha-card-background,\n          var(--card-background-color, white)\n        );\n        border-radius: var(--ha-card-border-radius, 4px);\n        box-shadow: var(\n          --ha-card-box-shadow,\n          0px 2px 1px -1px rgba(0, 0, 0, 0.2),\n          0px 1px 1px 0px rgba(0, 0, 0, 0.14),\n          0px 1px 3px 0px rgba(0, 0, 0, 0.12)\n        );\n        color: var(--primary-text-color);\n        display: block;\n        transition: all 0.3s ease-out;\n        position: relative;\n      }\n\n      :host([outlined]) {\n        box-shadow: none;\n        border-width: var(--ha-card-border-width, 1px);\n        border-style: solid;\n        border-color: var(\n          --ha-card-border-color,\n          var(--divider-color, #e0e0e0)\n        );\n      }\n\n      .card-header,\n      :host ::slotted(.card-header) {\n        color: var(--ha-card-header-color, --primary-text-color);\n        font-family: var(--ha-card-header-font-family, inherit);\n        font-size: var(--ha-card-header-font-size, 24px);\n        letter-spacing: -0.012em;\n        line-height: 48px;\n        padding: 12px 16px 16px;\n        display: block;\n        margin-block-start: 0px;\n        margin-block-end: 0px;\n        font-weight: normal;\n      }\n\n      :host ::slotted(.card-content:not(:first-child)),\n      slot:not(:first-child)::slotted(.card-content) {\n        padding-top: 0px;\n        margin-top: -8px;\n      }\n\n      :host ::slotted(.card-content) {\n        padding: 16px;\n      }\n\n      :host ::slotted(.card-actions) {\n        border-top: 1px solid var(--divider-color, #e8e8e8);\n        padding: 5px 16px;\n      }\n    `;\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      ${this.header\n        ? html`<h1 class=\"card-header\">${this.header}</h1>`\n        : html``}\n      <slot></slot>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-card\": HaCard;\n  }\n}\n","import { LitElement, TemplateResult, html, css } from \"lit\";\nimport { property } from \"lit/decorators\";\nimport { enableWrite } from \"../common/auth/token_storage\";\nimport { HomeAssistant } from \"../types\";\nimport \"../components/ha-card\";\nimport type { HaCard } from \"../components/ha-card\";\nimport \"@material/mwc-button/mwc-button\";\n\nclass HaStoreAuth extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  protected render(): TemplateResult {\n    return html`\n      <ha-card>\n        <div class=\"card-content\">\n          ${this.hass.localize(\"ui.auth_store.ask\")}\n        </div>\n        <div class=\"card-actions\">\n          <mwc-button @click=${this._dismiss}>\n            ${this.hass.localize(\"ui.auth_store.decline\")}\n          </mwc-button>\n          <mwc-button raised @click=${this._save}>\n            ${this.hass.localize(\"ui.auth_store.confirm\")}\n          </mwc-button>\n        </div>\n      </ha-card>\n    `;\n  }\n\n  firstUpdated() {\n    this.classList.toggle(\"small\", window.innerWidth < 600);\n  }\n\n  private _save(): void {\n    enableWrite();\n    this._dismiss();\n  }\n\n  private _dismiss(): void {\n    const card = this.shadowRoot!.querySelector(\"ha-card\") as HaCard;\n    card.style.bottom = `-${card.offsetHeight + 8}px`;\n    setTimeout(() => this.parentNode!.removeChild(this), 300);\n  }\n\n  static get styles() {\n    return css`\n      ha-card {\n        position: fixed;\n        padding: 8px 0;\n        bottom: 16px;\n        right: 16px;\n        transition: bottom 0.25s;\n        --ha-card-box-shadow: 0px 3px 5px -1px rgba(0, 0, 0, 0.2),\n          0px 6px 10px 0px rgba(0, 0, 0, 0.14),\n          0px 1px 18px 0px rgba(0, 0, 0, 0.12);\n      }\n\n      .card-actions {\n        text-align: right;\n        border-top: 0;\n      }\n\n      :host(.small) ha-card {\n        bottom: 0;\n        left: 0;\n        right: 0;\n      }\n    `;\n  }\n}\n\ncustomElements.define(\"ha-store-auth-card\", HaStoreAuth);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-store-auth-card\": HaStoreAuth;\n  }\n}\n"],"names":[],"sourceRoot":""}