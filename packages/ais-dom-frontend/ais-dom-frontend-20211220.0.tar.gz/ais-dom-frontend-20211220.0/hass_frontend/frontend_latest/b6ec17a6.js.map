{"version":3,"file":"b6ec17a6.js","mappings":";;;;;;;;;;;;;;;;;;;;;;AA+GA;ACZA;AACA;AACA;AAqBA;AACA;AAGA;AAGA;;;AAGA;AAEA;AACA;;AAEA;AAKA;AAOA;AACA;AACA;AAKA;;AAIA;AAOA;AACA;AAGA;;;;AAqBA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAIA;;;;;;;;;;;AAWA;;;;;AAOA;;;;;AAKA;;AAIA;;;;;;AAYA;;;AAGA;;;;AAOA","sources":["webpack://home-assistant-frontend/./node_modules/@polymer/iron-icon/iron-icon.js","webpack://home-assistant-frontend/./src/panels/config/blueprint/ha-blueprint-overview.ts"],"sourcesContent":["/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/iron-flex-layout/iron-flex-layout.js';\n\nimport {IronMeta} from '@polymer/iron-meta/iron-meta.js';\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {dom} from '@polymer/polymer/lib/legacy/polymer.dom.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\nimport {Base} from '@polymer/polymer/polymer-legacy.js';\n\n/**\n\nThe `iron-icon` element displays an icon. By default an icon renders as a 24px\nsquare.\n\nExample using src:\n\n    <iron-icon src=\"star.png\"></iron-icon>\n\nExample setting size to 32px x 32px:\n\n    <iron-icon class=\"big\" src=\"big_star.png\"></iron-icon>\n\n    <style is=\"custom-style\">\n      .big {\n        --iron-icon-height: 32px;\n        --iron-icon-width: 32px;\n      }\n    </style>\n\nThe iron elements include several sets of icons. To use the default set of\nicons, import `iron-icons.js` and use the `icon` attribute to specify an icon:\n\n    <script type=\"module\">\n      import \"@polymer/iron-icons/iron-icons.js\";\n    </script>\n\n    <iron-icon icon=\"menu\"></iron-icon>\n\nTo use a different built-in set of icons, import the specific\n`iron-icons/<iconset>-icons.js`, and specify the icon as `<iconset>:<icon>`.\nFor example, to use a communication icon, you would use:\n\n    <script type=\"module\">\n      import \"@polymer/iron-icons/communication-icons.js\";\n    </script>\n\n    <iron-icon icon=\"communication:email\"></iron-icon>\n\nYou can also create custom icon sets of bitmap or SVG icons.\n\nExample of using an icon named `cherry` from a custom iconset with the ID\n`fruit`:\n\n    <iron-icon icon=\"fruit:cherry\"></iron-icon>\n\nSee `<iron-iconset>` and `<iron-iconset-svg>` for more information about how to\ncreate a custom iconset.\n\nSee the `iron-icons` demo to see the icons available in the various iconsets.\n\n### Styling\n\nThe following custom properties are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--iron-icon` | Mixin applied to the icon | {}\n`--iron-icon-width` | Width of the icon | `24px`\n`--iron-icon-height` | Height of the icon | `24px`\n`--iron-icon-fill-color` | Fill color of the svg icon | `currentcolor`\n`--iron-icon-stroke-color` | Stroke color of the svg icon | none\n\n@group Iron Elements\n@element iron-icon\n@demo demo/index.html\n@hero hero.svg\n@homepage polymer.github.io\n*/\nPolymer({\n  _template: html`\n    <style>\n      :host {\n        @apply --layout-inline;\n        @apply --layout-center-center;\n        position: relative;\n\n        vertical-align: middle;\n\n        fill: var(--iron-icon-fill-color, currentcolor);\n        stroke: var(--iron-icon-stroke-color, none);\n\n        width: var(--iron-icon-width, 24px);\n        height: var(--iron-icon-height, 24px);\n        @apply --iron-icon;\n      }\n\n      :host([hidden]) {\n        display: none;\n      }\n    </style>\n`,\n\n  is: 'iron-icon',\n\n  properties: {\n\n    /**\n     * The name of the icon to use. The name should be of the form:\n     * `iconset_name:icon_name`.\n     */\n    icon: {type: String},\n\n    /**\n     * The name of the theme to used, if one is specified by the\n     * iconset.\n     */\n    theme: {type: String},\n\n    /**\n     * If using iron-icon without an iconset, you can set the src to be\n     * the URL of an individual icon image file. Note that this will take\n     * precedence over a given icon attribute.\n     */\n    src: {type: String},\n\n    /**\n     * @type {!IronMeta}\n     */\n    _meta: {value: Base.create('iron-meta', {type: 'iconset'})}\n\n  },\n\n  observers: [\n    '_updateIcon(_meta, isAttached)',\n    '_updateIcon(theme, isAttached)',\n    '_srcChanged(src, isAttached)',\n    '_iconChanged(icon, isAttached)'\n  ],\n\n  _DEFAULT_ICONSET: 'icons',\n\n  _iconChanged: function(icon) {\n    var parts = (icon || '').split(':');\n    this._iconName = parts.pop();\n    this._iconsetName = parts.pop() || this._DEFAULT_ICONSET;\n    this._updateIcon();\n  },\n\n  _srcChanged: function(src) {\n    this._updateIcon();\n  },\n\n  _usesIconset: function() {\n    return this.icon || !this.src;\n  },\n\n  /** @suppress {visibility} */\n  _updateIcon: function() {\n    if (this._usesIconset()) {\n      if (this._img && this._img.parentNode) {\n        dom(this.root).removeChild(this._img);\n      }\n      if (this._iconName === '') {\n        if (this._iconset) {\n          this._iconset.removeIcon(this);\n        }\n      } else if (this._iconsetName && this._meta) {\n        this._iconset = /** @type {?Polymer.Iconset} */ (\n            this._meta.byKey(this._iconsetName));\n        if (this._iconset) {\n          this._iconset.applyIcon(this, this._iconName, this.theme);\n          this.unlisten(window, 'iron-iconset-added', '_updateIcon');\n        } else {\n          this.listen(window, 'iron-iconset-added', '_updateIcon');\n        }\n      }\n    } else {\n      if (this._iconset) {\n        this._iconset.removeIcon(this);\n      }\n      if (!this._img) {\n        this._img = document.createElement('img');\n        this._img.style.width = '100%';\n        this._img.style.height = '100%';\n        this._img.draggable = false;\n      }\n      this._img.src = this.src;\n      dom(this.root).appendChild(this._img);\n    }\n  }\n});\n","import \"@material/mwc-icon-button\";\nimport {\n  mdiDelete,\n  mdiDownload,\n  mdiHelpCircle,\n  mdiRobot,\n  mdiShareVariant,\n} from \"@mdi/js\";\nimport \"@polymer/paper-tooltip/paper-tooltip\";\nimport {\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport { navigate } from \"../../../common/navigate\";\nimport { extractSearchParam } from \"../../../common/url/search-params\";\nimport { DataTableColumnContainer } from \"../../../components/data-table/ha-data-table\";\nimport \"../../../components/entity/ha-entity-toggle\";\nimport \"../../../components/ha-fab\";\nimport \"../../../components/ha-svg-icon\";\nimport { showAutomationEditor } from \"../../../data/automation\";\nimport {\n  BlueprintMetaData,\n  Blueprints,\n  deleteBlueprint,\n} from \"../../../data/blueprint\";\nimport {\n  showAlertDialog,\n  showConfirmationDialog,\n} from \"../../../dialogs/generic/show-dialog-box\";\nimport \"../../../layouts/hass-tabs-subpage-data-table\";\nimport { haStyle } from \"../../../resources/styles\";\nimport { HomeAssistant, Route } from \"../../../types\";\nimport { documentationUrl } from \"../../../util/documentation-url\";\nimport { configSections } from \"../ha-panel-config\";\nimport { showAddBlueprintDialog } from \"./show-dialog-import-blueprint\";\n\ninterface BlueprintMetaDataPath extends BlueprintMetaData {\n  path: string;\n  error: boolean;\n}\n\nconst createNewFunctions = {\n  automation: (blueprintMeta: BlueprintMetaDataPath) => {\n    showAutomationEditor({\n      alias: blueprintMeta.name,\n      use_blueprint: { path: blueprintMeta.path },\n    });\n  },\n};\n\n@customElement(\"ha-blueprint-overview\")\nclass HaBlueprintOverview extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public isWide!: boolean;\n\n  @property({ type: Boolean }) public narrow!: boolean;\n\n  @property() public route!: Route;\n\n  @property() public blueprints!: Blueprints;\n\n  private _processedBlueprints = memoizeOne((blueprints: Blueprints) => {\n    const result = Object.entries(blueprints).map(([path, blueprint]) => {\n      if (\"error\" in blueprint) {\n        return {\n          name: blueprint.error,\n          error: true,\n          path,\n        };\n      }\n      return {\n        ...blueprint.metadata,\n        error: false,\n        path,\n      };\n    });\n    return result;\n  });\n\n  private _columns = memoizeOne(\n    (narrow, _language): DataTableColumnContainer => ({\n      name: {\n        title: this.hass.localize(\n          \"ui.panel.config.blueprint.overview.headers.name\"\n        ),\n        sortable: true,\n        filterable: true,\n        direction: \"asc\",\n        grows: true,\n        template: narrow\n          ? (name, entity: any) =>\n              html`\n                ${name}<br />\n                <div class=\"secondary\">${entity.path}</div>\n              `\n          : undefined,\n      },\n      path: {\n        title: this.hass.localize(\n          \"ui.panel.config.blueprint.overview.headers.file_name\"\n        ),\n        sortable: true,\n        filterable: true,\n        hidden: narrow,\n        direction: \"asc\",\n        width: \"25%\",\n      },\n      create: {\n        title: \"\",\n        type: narrow ? \"icon-button\" : undefined,\n        template: (_, blueprint: any) =>\n          blueprint.error\n            ? \"\"\n            : narrow\n            ? html`<mwc-icon-button\n                .blueprint=${blueprint}\n                .label=${this.hass.localize(\n                  \"ui.panel.config.blueprint.overview.use_blueprint\"\n                )}\n                title=${this.hass.localize(\n                  \"ui.panel.config.blueprint.overview.use_blueprint\"\n                )}\n                @click=${this._createNew}\n              >\n                <ha-svg-icon .path=${mdiRobot}></ha-svg-icon>\n              </mwc-icon-button>`\n            : html`<mwc-button\n                .blueprint=${blueprint}\n                @click=${this._createNew}\n              >\n                ${this.hass.localize(\n                  \"ui.panel.config.blueprint.overview.use_blueprint\"\n                )}\n              </mwc-button>`,\n      },\n      share: {\n        title: \"\",\n        type: \"icon-button\",\n        template: (_, blueprint: any) =>\n          blueprint.error\n            ? \"\"\n            : html`<mwc-icon-button\n                .blueprint=${blueprint}\n                .disabled=${!blueprint.source_url}\n                .label=${this.hass.localize(\n                  blueprint.source_url\n                    ? \"ui.panel.config.blueprint.overview.share_blueprint\"\n                    : \"ui.panel.config.blueprint.overview.share_blueprint_no_url\"\n                )}\n                @click=${this._share}\n                ><ha-svg-icon .path=${mdiShareVariant}></ha-svg-icon\n              ></mwc-icon-button>`,\n      },\n      delete: {\n        title: \"\",\n        type: \"icon-button\",\n        template: (_, blueprint: any) =>\n          blueprint.error\n            ? \"\"\n            : html` <mwc-icon-button\n                .blueprint=${blueprint}\n                .label=${this.hass.localize(\n                  \"ui.panel.config.blueprint.overview.delete_blueprint\"\n                )}\n                @click=${this._delete}\n                ><ha-svg-icon .path=${mdiDelete}></ha-svg-icon\n              ></mwc-icon-button>`,\n      },\n    })\n  );\n\n  protected firstUpdated(changedProps: PropertyValues) {\n    super.firstUpdated(changedProps);\n    if (this.route.path === \"/import\") {\n      const url = extractSearchParam(\"blueprint_url\");\n      navigate(\"/config/blueprint/dashboard\", { replace: true });\n      if (url) {\n        this._addBlueprint(url);\n      }\n    }\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <hass-tabs-subpage-data-table\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        back-path=\"/config\"\n        .route=${this.route}\n        .tabs=${configSections.automation}\n        .columns=${this._columns(this.narrow, this.hass.language)}\n        .data=${this._processedBlueprints(this.blueprints)}\n        id=\"entity_id\"\n        .noDataText=${this.hass.localize(\n          \"ui.panel.config.blueprint.overview.no_blueprints\"\n        )}\n        hasFab\n        .appendRow=${html` <div\n          class=\"mdc-data-table__cell\"\n          style=\"width: 100%; text-align: center;\"\n          role=\"cell\"\n        >\n          <a\n            href=\"https://www.home-assistant.io/get-blueprints\"\n            target=\"_blank\"\n            rel=\"noreferrer noopener\"\n          >\n            <mwc-button\n              >${this.hass.localize(\n                \"ui.panel.config.blueprint.overview.discover_more\"\n              )}</mwc-button\n            >\n          </a>\n        </div>`}\n      >\n        <mwc-icon-button slot=\"toolbar-icon\" @click=${this._showHelp}>\n          <ha-svg-icon .path=${mdiHelpCircle}></ha-svg-icon>\n        </mwc-icon-button>\n        <ha-fab\n          slot=\"fab\"\n          .label=${this.hass.localize(\n            \"ui.panel.config.blueprint.overview.add_blueprint\"\n          )}\n          extended\n          @click=${this._addBlueprintClicked}\n        >\n          <ha-svg-icon slot=\"icon\" .path=${mdiDownload}></ha-svg-icon>\n        </ha-fab>\n      </hass-tabs-subpage-data-table>\n    `;\n  }\n\n  private _showHelp() {\n    showAlertDialog(this, {\n      title: this.hass.localize(\"ui.panel.config.blueprint.caption\"),\n      text: html`\n        ${this.hass.localize(\"ui.panel.config.blueprint.overview.introduction\")}\n        <p>\n          <a\n            href=${documentationUrl(\n              this.hass,\n              \"/docs/automation/using_blueprints/\"\n            )}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            ${this.hass.localize(\n              \"ui.panel.config.blueprint.overview.learn_more\"\n            )}\n          </a>\n        </p>\n      `,\n    });\n  }\n\n  private _addBlueprint(url?: string) {\n    showAddBlueprintDialog(this, {\n      url,\n      importedCallback: () => this._reload(),\n    });\n  }\n\n  private _addBlueprintClicked(): void {\n    this._addBlueprint();\n  }\n\n  private _reload() {\n    fireEvent(this, \"reload-blueprints\");\n  }\n\n  private _createNew = (ev) => {\n    const blueprint = ev.currentTarget.blueprint as BlueprintMetaDataPath;\n    createNewFunctions[blueprint.domain](blueprint);\n  };\n\n  private _share = (ev) => {\n    const blueprint = ev.currentTarget.blueprint;\n    const params = new URLSearchParams();\n    params.append(\"redirect\", \"blueprint_import\");\n    params.append(\"blueprint_url\", blueprint.source_url);\n    window.open(\n      `https://my.home-assistant.io/create-link/?${params.toString()}`\n    );\n  };\n\n  private _delete = async (ev) => {\n    const blueprint = ev.currentTarget.blueprint;\n    if (\n      !(await showConfirmationDialog(this, {\n        title: this.hass.localize(\n          \"ui.panel.config.blueprint.overview.confirm_delete_header\"\n        ),\n        text: this.hass.localize(\n          \"ui.panel.config.blueprint.overview.confirm_delete_text\"\n        ),\n      }))\n    ) {\n      return;\n    }\n    await deleteBlueprint(this.hass, blueprint.domain, blueprint.path);\n    fireEvent(this, \"reload-blueprints\");\n  };\n\n  static get styles(): CSSResultGroup {\n    return haStyle;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-blueprint-overview\": HaBlueprintOverview;\n  }\n}\n"],"names":[],"sourceRoot":""}