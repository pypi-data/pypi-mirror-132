{"version":3,"file":"0b4f5b85.js","mappings":";;;AAyCA;AAGA;AAGA;AACA;AACA;;;AAGA;AAGA;;AAIA;AACA;;;AAGA;AAGA;AAGA;AACA;AACA;;;AApCA;;;;;;;AAjBA;ACiCA;AACA;;AAGA;AACA;;AAEA;;AAGA;AACA;;;;AAnBA;;AAEA;;;;;;;AA1BA","sources":["webpack://home-assistant-frontend/./src/components/ha-cover-controls.ts","webpack://home-assistant-frontend/./src/panels/lovelace/entity-rows/hui-cover-entity-row.ts"],"sourcesContent":["import type { HassEntity } from \"home-assistant-js-websocket\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { computeCloseIcon, computeOpenIcon } from \"../common/entity/cover_icon\";\nimport { UNAVAILABLE } from \"../data/entity\";\nimport type { HomeAssistant } from \"../types\";\nimport CoverEntity from \"../util/cover-model\";\nimport \"./ha-icon-button\";\n\n@customElement(\"ha-cover-controls\")\nclass HaCoverControls extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public stateObj!: HassEntity;\n\n  @state() private _entityObj?: CoverEntity;\n\n  public willUpdate(changedProperties: PropertyValues): void {\n    super.willUpdate(changedProperties);\n\n    if (changedProperties.has(\"stateObj\")) {\n      this._entityObj = new CoverEntity(this.hass, this.stateObj);\n    }\n  }\n\n  protected render(): TemplateResult {\n    if (!this._entityObj) {\n      return html``;\n    }\n\n    return html`\n      <div class=\"state\">\n        <ha-icon-button\n          class=${classMap({\n            hidden: !this._entityObj.supportsOpen,\n          })}\n          .label=${this.hass.localize(\n            \"ui.dialogs.more_info_control.open_cover\"\n          )}\n          .icon=${computeOpenIcon(this.stateObj)}\n          @click=${this._onOpenTap}\n          .disabled=${this._computeOpenDisabled()}\n        ></ha-icon-button>\n        <ha-icon-button\n          class=${classMap({\n            hidden: !this._entityObj.supportsStop,\n          })}\n          .label=${this.hass.localize(\n            \"ui.dialogs.more_info_control.stop_cover\"\n          )}\n          icon=\"hass:stop\"\n          @click=${this._onStopTap}\n          .disabled=${this.stateObj.state === UNAVAILABLE}\n        ></ha-icon-button>\n        <ha-icon-button\n          class=${classMap({\n            hidden: !this._entityObj.supportsClose,\n          })}\n          .label=${this.hass.localize(\n            \"ui.dialogs.more_info_control.close_cover\"\n          )}\n          .icon=${computeCloseIcon(this.stateObj)}\n          @click=${this._onCloseTap}\n          .disabled=${this._computeClosedDisabled()}\n        ></ha-icon-button>\n      </div>\n    `;\n  }\n\n  private _computeOpenDisabled(): boolean {\n    if (this.stateObj.state === UNAVAILABLE) {\n      return true;\n    }\n    const assumedState = this.stateObj.attributes.assumed_state === true;\n    return (\n      (this._entityObj.isFullyOpen || this._entityObj.isOpening) &&\n      !assumedState\n    );\n  }\n\n  private _computeClosedDisabled(): boolean {\n    if (this.stateObj.state === UNAVAILABLE) {\n      return true;\n    }\n    const assumedState = this.stateObj.attributes.assumed_state === true;\n    return (\n      (this._entityObj.isFullyClosed || this._entityObj.isClosing) &&\n      !assumedState\n    );\n  }\n\n  private _onOpenTap(ev): void {\n    ev.stopPropagation();\n    this._entityObj.openCover();\n  }\n\n  private _onCloseTap(ev): void {\n    ev.stopPropagation();\n    this._entityObj.closeCover();\n  }\n\n  private _onStopTap(ev): void {\n    ev.stopPropagation();\n    this._entityObj.stopCover();\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      .state {\n        white-space: nowrap;\n      }\n      .hidden {\n        visibility: hidden !important;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-cover-controls\": HaCoverControls;\n  }\n}\n","import {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport \"../../../components/ha-cover-controls\";\nimport \"../../../components/ha-cover-tilt-controls\";\nimport { HomeAssistant } from \"../../../types\";\nimport { isTiltOnly } from \"../../../util/cover-model\";\nimport { hasConfigOrEntityChanged } from \"../common/has-changed\";\nimport \"../components/hui-generic-entity-row\";\nimport { createEntityNotFoundWarning } from \"../components/hui-warning\";\nimport { EntityConfig, LovelaceRow } from \"./types\";\n\n@customElement(\"hui-cover-entity-row\")\nclass HuiCoverEntityRow extends LitElement implements LovelaceRow {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _config?: EntityConfig;\n\n  public setConfig(config: EntityConfig): void {\n    if (!config) {\n      throw new Error(\"Invalid configuration\");\n    }\n    this._config = config;\n  }\n\n  protected shouldUpdate(changedProps: PropertyValues): boolean {\n    return hasConfigOrEntityChanged(this, changedProps);\n  }\n\n  protected render(): TemplateResult {\n    if (!this._config || !this.hass) {\n      return html``;\n    }\n\n    const stateObj = this.hass.states[this._config.entity];\n\n    if (!stateObj) {\n      return html`\n        <hui-warning>\n          ${createEntityNotFoundWarning(this.hass, this._config.entity)}\n        </hui-warning>\n      `;\n    }\n\n    return html`\n      <hui-generic-entity-row .hass=${this.hass} .config=${this._config}>\n        ${isTiltOnly(stateObj)\n          ? html`\n              <ha-cover-tilt-controls\n                .hass=${this.hass}\n                .stateObj=${stateObj}\n              ></ha-cover-tilt-controls>\n            `\n          : html`\n              <ha-cover-controls\n                .hass=${this.hass}\n                .stateObj=${stateObj}\n              ></ha-cover-controls>\n            `}\n      </hui-generic-entity-row>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-cover-controls,\n      ha-cover-tilt-controls {\n        margin-right: -0.57em;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-cover-entity-row\": HuiCoverEntityRow;\n  }\n}\n"],"names":[],"sourceRoot":""}