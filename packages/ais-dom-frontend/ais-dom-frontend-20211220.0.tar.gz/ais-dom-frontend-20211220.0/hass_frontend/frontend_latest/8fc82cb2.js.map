{"version":3,"file":"8fc82cb2.js","mappings":";;;;;;;;;;;;;;;;;;;;;;AAkCA;AAGA;AACA;AACA;;;AArBA;;;ACqCA;;;AAKA;;AAIA;AACA;AACA;;;;AAIA;AACA;;;AAGA;AACA;;AAEA;;;;AAKA;AAEA;;;;AArEA;;;;;;;;;;;;;;;;AAAA","sources":["webpack://home-assistant-frontend/./src/panels/lovelace/editor/lovelace-editor/hui-lovelace-editor.ts","webpack://home-assistant-frontend/./src/panels/lovelace/editor/lovelace-editor/hui-dialog-edit-lovelace.ts"],"sourcesContent":["import \"@polymer/paper-input/paper-input\";\nimport { CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { LovelaceConfig } from \"../../../../data/lovelace\";\nimport { HomeAssistant } from \"../../../../types\";\nimport { configElementStyle } from \"../config-elements/config-elements-style\";\nimport { EditorTarget } from \"../types\";\n\ndeclare global {\n  interface HASSDomEvents {\n    \"lovelace-config-changed\": {\n      config: LovelaceConfig;\n    };\n  }\n}\n\n@customElement(\"hui-lovelace-editor\")\nexport class HuiLovelaceEditor extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public config?: LovelaceConfig;\n\n  get _title(): string {\n    if (!this.config) {\n      return \"\";\n    }\n    return this.config.title || \"\";\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <div class=\"card-config\">\n        <paper-input\n          .label=${this.hass.localize(\n            \"ui.panel.lovelace.editor.edit_lovelace.title\"\n          )}\n          .value=${this._title}\n          .configValue=${\"title\"}\n          @value-changed=${this._valueChanged}\n        ></paper-input>\n      </div>\n    `;\n  }\n\n  private _valueChanged(ev: Event): void {\n    if (!this.config) {\n      return;\n    }\n\n    const target = ev.currentTarget! as EditorTarget;\n\n    if (this[`_${target.configValue}`] === target.value) {\n      return;\n    }\n\n    let newConfig;\n\n    if (target.configValue) {\n      newConfig = {\n        ...this.config,\n        [target.configValue]: target.value,\n      };\n    }\n\n    fireEvent(this, \"lovelace-config-changed\", { config: newConfig });\n  }\n\n  static get styles(): CSSResultGroup {\n    return configElementStyle;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-lovelace-editor\": HuiLovelaceEditor;\n  }\n}\n","import \"@material/mwc-button\";\nimport \"@polymer/paper-dialog-scrollable/paper-dialog-scrollable\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport \"../../../../components/dialog/ha-paper-dialog\";\nimport type { HaPaperDialog } from \"../../../../components/dialog/ha-paper-dialog\";\nimport \"../../../../components/ha-circular-progress\";\nimport type { LovelaceConfig } from \"../../../../data/lovelace\";\nimport { haStyleDialog } from \"../../../../resources/styles\";\nimport type { HomeAssistant } from \"../../../../types\";\nimport type { Lovelace } from \"../../types\";\nimport \"./hui-lovelace-editor\";\n\n@customElement(\"hui-dialog-edit-lovelace\")\nexport class HuiDialogEditLovelace extends LitElement {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _lovelace?: Lovelace;\n\n  private _config?: LovelaceConfig;\n\n  private _saving: boolean;\n\n  public constructor() {\n    super();\n    this._saving = false;\n  }\n\n  public async showDialog(lovelace: Lovelace): Promise<void> {\n    this._lovelace = lovelace;\n    if (this._dialog == null) {\n      await this.updateComplete;\n    }\n\n    const { views, ...lovelaceConfig } = this._lovelace!.config;\n    this._config = lovelaceConfig as LovelaceConfig;\n\n    this._dialog.open();\n  }\n\n  public closeDialog(): void {\n    this._config = undefined;\n    this._dialog.close();\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  private get _dialog(): HaPaperDialog {\n    return this.shadowRoot!.querySelector(\"ha-paper-dialog\")!;\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <ha-paper-dialog with-backdrop modal>\n        <h2>\n          ${this.hass!.localize(\n            \"ui.panel.lovelace.editor.edit_lovelace.header\"\n          )}\n        </h2>\n        <paper-dialog-scrollable>\n          ${this.hass!.localize(\n            \"ui.panel.lovelace.editor.edit_lovelace.explanation\"\n          )}\n          <hui-lovelace-editor\n            .hass=${this.hass}\n            .config=${this._config}\n            @lovelace-config-changed=${this._ConfigChanged}\n          ></hui-lovelace-editor\n        ></paper-dialog-scrollable>\n        <div class=\"paper-dialog-buttons\">\n          <mwc-button @click=${this.closeDialog}\n            >${this.hass!.localize(\"ui.common.cancel\")}</mwc-button\n          >\n          <mwc-button\n            ?disabled=${!this._config || this._saving}\n            @click=${this._save}\n          >\n            ${this._saving\n              ? html`<ha-circular-progress\n                  active\n                  size=\"small\"\n                  title=\"Saving\"\n                ></ha-circular-progress>`\n              : \"\"}\n            ${this.hass!.localize(\"ui.common.save\")}</mwc-button\n          >\n        </div>\n      </ha-paper-dialog>\n    `;\n  }\n\n  private async _save(): Promise<void> {\n    if (!this._config) {\n      return;\n    }\n    if (!this._isConfigChanged()) {\n      this.closeDialog();\n      return;\n    }\n\n    this._saving = true;\n    const lovelace = this._lovelace!;\n\n    const config: LovelaceConfig = {\n      ...lovelace.config,\n      ...this._config,\n    };\n\n    try {\n      await lovelace.saveConfig(config);\n      this.closeDialog();\n    } catch (err: any) {\n      alert(`Saving failed: ${err.message}`);\n    } finally {\n      this._saving = false;\n    }\n  }\n\n  private _ConfigChanged(ev: CustomEvent): void {\n    if (ev.detail && ev.detail.config) {\n      this._config = ev.detail.config;\n    }\n  }\n\n  private _isConfigChanged(): boolean {\n    const { views, ...lovelaceConfig } = this._lovelace!.config;\n    return JSON.stringify(this._config) !== JSON.stringify(lovelaceConfig);\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyleDialog,\n      css`\n        @media all and (max-width: 450px), all and (max-height: 500px) {\n          /* overrule the ha-style-dialog max-height on small screens */\n          ha-paper-dialog {\n            max-height: 100%;\n            height: 100%;\n          }\n        }\n        @media all and (min-width: 660px) {\n          ha-paper-dialog {\n            width: 650px;\n          }\n        }\n        ha-paper-dialog {\n          max-width: 650px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-dialog-edit-lovelace\": HuiDialogEditLovelace;\n  }\n}\n"],"names":[],"sourceRoot":""}