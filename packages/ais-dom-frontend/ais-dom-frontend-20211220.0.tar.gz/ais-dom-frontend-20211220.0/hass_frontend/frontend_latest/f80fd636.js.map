{"version":3,"file":"f80fd636.js","mappings":";;AAmGA;;;;;;;;;;;;;;;AAgBA;AACA;AAKA;AACA;;;;;AAKA;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AArGA","sources":["webpack://home-assistant-frontend/./src/panels/lovelace/cards/energy/hui-energy-grid-neutrality-gauge-card.ts"],"sourcesContent":["import { mdiInformation } from \"@mdi/js\";\nimport \"@polymer/paper-tooltip\";\nimport { UnsubscribeFunc } from \"home-assistant-js-websocket\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { formatNumber } from \"../../../../common/number/format_number\";\nimport \"../../../../components/ha-card\";\nimport \"../../../../components/ha-svg-icon\";\nimport \"../../../../components/ha-gauge\";\nimport type { LevelDefinition } from \"../../../../components/ha-gauge\";\nimport {\n  EnergyData,\n  getEnergyDataCollection,\n  GridSourceTypeEnergyPreference,\n} from \"../../../../data/energy\";\nimport { calculateStatisticsSumGrowth } from \"../../../../data/history\";\nimport { SubscribeMixin } from \"../../../../mixins/subscribe-mixin\";\nimport type { HomeAssistant } from \"../../../../types\";\nimport type { LovelaceCard } from \"../../types\";\nimport type { EnergyGridGaugeCardConfig } from \"../types\";\nimport { severityMap } from \"../hui-gauge-card\";\n\nconst LEVELS: LevelDefinition[] = [\n  { level: -1, stroke: severityMap.red },\n  { level: -0.2, stroke: severityMap.yellow },\n  { level: 0, stroke: severityMap.green },\n];\n\n@customElement(\"hui-energy-grid-neutrality-gauge-card\")\nclass HuiEnergyGridGaugeCard\n  extends SubscribeMixin(LitElement)\n  implements LovelaceCard\n{\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _config?: EnergyGridGaugeCardConfig;\n\n  @state() private _data?: EnergyData;\n\n  public hassSubscribe(): UnsubscribeFunc[] {\n    return [\n      getEnergyDataCollection(this.hass!, {\n        key: this._config?.collection_key,\n      }).subscribe((data) => {\n        this._data = data;\n      }),\n    ];\n  }\n\n  public getCardSize(): number {\n    return 4;\n  }\n\n  public setConfig(config: EnergyGridGaugeCardConfig): void {\n    this._config = config;\n  }\n\n  protected render(): TemplateResult {\n    if (!this._config || !this.hass) {\n      return html``;\n    }\n\n    if (!this._data) {\n      return html`Loading...`;\n    }\n\n    const prefs = this._data.prefs;\n    const gridSource = prefs.energy_sources.find(\n      (src) => src.type === \"grid\"\n    ) as GridSourceTypeEnergyPreference | undefined;\n\n    let value: number | undefined;\n\n    if (!gridSource) {\n      return html``;\n    }\n\n    const consumedFromGrid = calculateStatisticsSumGrowth(\n      this._data.stats,\n      gridSource.flow_from.map((flow) => flow.stat_energy_from)\n    );\n\n    const returnedToGrid = calculateStatisticsSumGrowth(\n      this._data.stats,\n      gridSource.flow_to.map((flow) => flow.stat_energy_to)\n    );\n\n    if (consumedFromGrid !== null && returnedToGrid !== null) {\n      if (returnedToGrid > consumedFromGrid) {\n        value = 1 - consumedFromGrid / returnedToGrid;\n      } else if (returnedToGrid < consumedFromGrid) {\n        value = (1 - returnedToGrid / consumedFromGrid) * -1;\n      } else {\n        value = 0;\n      }\n    }\n\n    return html`\n      <ha-card>\n        ${value !== undefined\n          ? html`\n              <ha-svg-icon id=\"info\" .path=${mdiInformation}></ha-svg-icon>\n              <paper-tooltip animation-delay=\"0\" for=\"info\" position=\"left\">\n                <span>\n                  This card represents your energy dependency.\n                  <br /><br />\n                  If it's green, it means you produced more energy than that you\n                  consumed from the grid. If it's in the red, it means that you\n                  relied on the grid for part of your home's energy consumption.\n                </span>\n              </paper-tooltip>\n\n              <ha-gauge\n                min=\"-1\"\n                max=\"1\"\n                .value=${value}\n                .valueText=${formatNumber(\n                  Math.abs(returnedToGrid! - consumedFromGrid!),\n                  this.hass.locale,\n                  { maximumFractionDigits: 2 }\n                )}\n                .locale=${this.hass!.locale}\n                .levels=${LEVELS}\n                label=\"kWh\"\n                needle\n              ></ha-gauge>\n              <div class=\"name\">\n                ${returnedToGrid! >= consumedFromGrid!\n                  ? \"Net returned to the grid\"\n                  : \"Net consumed from the grid\"}\n              </div>\n            `\n          : \"Grid neutrality could not be calculated\"}\n      </ha-card>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-card {\n        height: 100%;\n        overflow: hidden;\n        padding: 16px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        flex-direction: column;\n        box-sizing: border-box;\n      }\n\n      ha-gauge {\n        width: 100%;\n        max-width: 250px;\n      }\n\n      .name {\n        text-align: center;\n        line-height: initial;\n        color: var(--primary-text-color);\n        width: 100%;\n        font-size: 15px;\n        margin-top: 8px;\n      }\n\n      ha-svg-icon {\n        position: absolute;\n        right: 4px;\n        top: 4px;\n        color: var(--secondary-text-color);\n      }\n      paper-tooltip > span {\n        font-size: 12px;\n        line-height: 12px;\n      }\n      paper-tooltip {\n        width: 80%;\n        max-width: 250px;\n        top: 8px !important;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-energy-grid-neutrality-gauge-card\": HuiEnergyGridGaugeCard;\n  }\n}\n"],"names":[],"sourceRoot":""}