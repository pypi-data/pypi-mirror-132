{"version":3,"file":"5e796926.js","mappings":";AAwEA;AAIA;;AAkDA;;;;;;;;;;;;AAaA;AACA;;AAEA;;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAvHA","sources":["webpack://home-assistant-frontend/./src/panels/lovelace/cards/energy/hui-energy-carbon-consumed-gauge-card.ts"],"sourcesContent":["import { mdiInformation } from \"@mdi/js\";\nimport \"@polymer/paper-tooltip\";\nimport { UnsubscribeFunc } from \"home-assistant-js-websocket\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { styleMap } from \"lit/directives/style-map\";\nimport { round } from \"../../../../common/number/round\";\nimport \"../../../../components/ha-card\";\nimport \"../../../../components/ha-gauge\";\nimport \"../../../../components/ha-svg-icon\";\nimport {\n  EnergyData,\n  energySourcesByType,\n  getEnergyDataCollection,\n} from \"../../../../data/energy\";\nimport {\n  calculateStatisticsSumGrowth,\n  calculateStatisticsSumGrowthWithPercentage,\n} from \"../../../../data/history\";\nimport { SubscribeMixin } from \"../../../../mixins/subscribe-mixin\";\nimport type { HomeAssistant } from \"../../../../types\";\nimport { createEntityNotFoundWarning } from \"../../components/hui-warning\";\nimport type { LovelaceCard } from \"../../types\";\nimport { severityMap } from \"../hui-gauge-card\";\nimport type { EnergyCarbonGaugeCardConfig } from \"../types\";\n\n@customElement(\"hui-energy-carbon-consumed-gauge-card\")\nclass HuiEnergyCarbonGaugeCard\n  extends SubscribeMixin(LitElement)\n  implements LovelaceCard\n{\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _config?: EnergyCarbonGaugeCardConfig;\n\n  @state() private _data?: EnergyData;\n\n  public getCardSize(): number {\n    return 4;\n  }\n\n  public setConfig(config: EnergyCarbonGaugeCardConfig): void {\n    this._config = config;\n  }\n\n  public hassSubscribe(): UnsubscribeFunc[] {\n    return [\n      getEnergyDataCollection(this.hass, {\n        key: this._config?.collection_key,\n      }).subscribe((data) => {\n        this._data = data;\n      }),\n    ];\n  }\n\n  protected render(): TemplateResult {\n    if (!this._config || !this.hass) {\n      return html``;\n    }\n\n    if (!this._data) {\n      return html`Loading...`;\n    }\n\n    if (!this._data.co2SignalEntity) {\n      return html``;\n    }\n\n    const co2State = this.hass.states[this._data.co2SignalEntity];\n\n    if (!co2State) {\n      return html`<hui-warning>\n        ${createEntityNotFoundWarning(this.hass, this._data.co2SignalEntity)}\n      </hui-warning>`;\n    }\n\n    const prefs = this._data.prefs;\n    const types = energySourcesByType(prefs);\n\n    const totalGridConsumption = calculateStatisticsSumGrowth(\n      this._data.stats,\n      types.grid![0].flow_from.map((flow) => flow.stat_energy_from)\n    );\n\n    let value: number | undefined;\n\n    if (totalGridConsumption === 0) {\n      value = 100;\n    }\n\n    if (\n      this._data.co2SignalEntity in this._data.stats &&\n      totalGridConsumption\n    ) {\n      const highCarbonEnergy =\n        calculateStatisticsSumGrowthWithPercentage(\n          this._data.stats[this._data.co2SignalEntity],\n          types\n            .grid![0].flow_from.map(\n              (flow) => this._data!.stats![flow.stat_energy_from]\n            )\n            .filter(Boolean)\n        ) || 0;\n\n      const totalSolarProduction = types.solar\n        ? calculateStatisticsSumGrowth(\n            this._data.stats,\n            types.solar.map((source) => source.stat_energy_from)\n          ) || 0\n        : 0;\n\n      const totalGridReturned =\n        calculateStatisticsSumGrowth(\n          this._data.stats,\n          types.grid![0].flow_to.map((flow) => flow.stat_energy_to)\n        ) || 0;\n\n      const totalEnergyConsumed =\n        totalGridConsumption +\n        Math.max(0, totalSolarProduction - totalGridReturned);\n\n      value = round((1 - highCarbonEnergy / totalEnergyConsumed) * 100);\n    }\n\n    return html`\n      <ha-card>\n        ${value !== undefined\n          ? html`\n              <ha-svg-icon id=\"info\" .path=${mdiInformation}></ha-svg-icon>\n              <paper-tooltip animation-delay=\"0\" for=\"info\" position=\"left\">\n                <span>\n                  This card indicates how much of the energy consumed by your\n                  home was generated using non-fossil fuels like solar, wind and\n                  nuclear. The higher, the better!\n                </span>\n              </paper-tooltip>\n              <ha-gauge\n                min=\"0\"\n                max=\"100\"\n                .value=${value}\n                .locale=${this.hass!.locale}\n                label=\"%\"\n                style=${styleMap({\n                  \"--gauge-color\": this._computeSeverity(value),\n                })}\n              ></ha-gauge>\n              <div class=\"name\">Non-fossil energy consumed</div>\n            `\n          : html`Consumed non-fossil energy couldn't be calculated`}\n      </ha-card>\n    `;\n  }\n\n  private _computeSeverity(numberValue: number): string {\n    if (numberValue < 10) {\n      return severityMap.red;\n    }\n    if (numberValue < 30) {\n      return severityMap.yellow;\n    }\n    if (numberValue > 75) {\n      return severityMap.green;\n    }\n    return severityMap.normal;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-card {\n        height: 100%;\n        overflow: hidden;\n        padding: 16px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        flex-direction: column;\n        box-sizing: border-box;\n      }\n\n      ha-gauge {\n        width: 100%;\n        max-width: 250px;\n      }\n\n      .name {\n        text-align: center;\n        line-height: initial;\n        color: var(--primary-text-color);\n        width: 100%;\n        font-size: 15px;\n        margin-top: 8px;\n      }\n\n      ha-svg-icon {\n        position: absolute;\n        right: 4px;\n        top: 4px;\n        color: var(--secondary-text-color);\n      }\n      paper-tooltip > span {\n        font-size: 12px;\n        line-height: 12px;\n      }\n      paper-tooltip {\n        width: 80%;\n        max-width: 250px;\n        top: 8px !important;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-energy-carbon-consumed-gauge-card\": HuiEnergyCarbonGaugeCard;\n  }\n}\n"],"names":[],"sourceRoot":""}