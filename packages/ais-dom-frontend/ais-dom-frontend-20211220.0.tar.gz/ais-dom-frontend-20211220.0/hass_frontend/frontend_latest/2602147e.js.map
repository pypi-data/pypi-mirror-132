{"version":3,"file":"2602147e.js","mappings":";;;AA8CA;;;;;;;AAOA;AACA;AACA;AACA;;;;;AAKA;;;AA7CA;;;;;;;;;;;;;AAAA","sources":["webpack://home-assistant-frontend/./src/panels/config/ais_dom/dialog-manage-ais-cloudhook/dialog-manage-ais-cloudhook.ts"],"sourcesContent":["import \"@material/mwc-button\";\nimport \"@polymer/paper-dialog-scrollable/paper-dialog-scrollable\";\nimport \"@polymer/paper-input/paper-input\";\nimport type { PaperInputElement } from \"@polymer/paper-input/paper-input\";\nimport { css, CSSResultGroup, html, LitElement, PropertyDeclarations } from \"lit\";\nimport { property } from \"lit/decorators\";\nimport \"../../../../components/dialog/ha-paper-dialog\";\nimport type { HaPaperDialog } from \"../../../../components/dialog/ha-paper-dialog\";\nimport { HomeAssistant } from \"../../../../types\";\nimport { haStyle } from \"../../../../resources/styles\";\nimport { WebhookDialogParams } from \"./show-dialog-manage-ais-cloudhook\";\n\n\nconst inputLabel =\n  \"Publiczny unikalny adres URL – kliknij, aby skopiować do schowka.\";\n\nexport class DialogManageAisCloudhook extends LitElement {\n  \n  public hass!: HomeAssistant;\n\n  @property() private _params?: WebhookDialogParams;\n\n  static get properties(): PropertyDeclarations {\n    return {\n      _params: {},\n      hass: {},\n    };\n  }\n\n  public async showDialog(params: WebhookDialogParams) {\n    this._params = params;\n    // Wait till dialog is rendered.\n    await this.updateComplete;\n    this._dialog.open();\n  }\n\n  protected render() {\n    if (!this._params) {\n      return html``;\n    }\n    const { webhook } = this._params;\n    const gateId = this.hass.states[\"sensor.ais_secure_android_id_dom\"].state;\n    const webhookUrl =\n      \"https://\" + gateId + \".paczka.pro/api/webhook/\" + webhook.webhook_id;\n    return html`\n      <ha-paper-dialog with-backdrop>\n        <h2>Wywołanie zwrotne dla ${webhook.name}</h2>\n        <div>\n          <p>\n            Wywołanie zwrotne HTTP (Webhook) jest dostępny pod następującym\n            adresem URL:\n          </p>\n          <paper-input\n            label=\"${inputLabel}\"\n            value=\"${webhookUrl}\"\n            @click=\"${this._copyClipboard}\"\n            @blur=\"${this._restoreLabel}\"\n          ></paper-input>\n        </div>\n\n        <div class=\"paper-dialog-buttons\">\n          <mwc-button @click=\"${this._closeDialog}\">ZAMKNIJ</mwc-button>\n        </div>\n      </ha-paper-dialog>\n    `;\n  }\n\n  private get _dialog(): HaPaperDialog {\n    return this.shadowRoot!.querySelector(\"ha-paper-dialog\")!;\n  }\n\n  private get _paperInput(): PaperInputElement {\n    return this.shadowRoot!.querySelector(\"paper-input\")!;\n  }\n\n  private _closeDialog() {\n    this._dialog.close();\n  }\n\n  private _copyClipboard(ev: FocusEvent) {\n    // paper-input -> iron-input -> input\n    const paperInput = ev.currentTarget as PaperInputElement;\n    const input = (paperInput.inputElement as any)\n      .inputElement as HTMLInputElement;\n    input.setSelectionRange(0, input.value.length);\n    try {\n      document.execCommand(\"kopiuj\");\n      paperInput.label = \"SKOPIOWANO DO SCHOWKA\";\n    } catch (err) {\n      // Copying failed. Oh no\n    }\n  }\n\n  private _restoreLabel() {\n    this._paperInput.label = inputLabel;\n  }\n\n  static get styles(): CSSResultGroup[] {\n    return [\n      haStyle,\n      css`\n        ha-paper-dialog {\n          width: 650px;\n        }\n        paper-input {\n          margin-top: -8px;\n        }\n        button.link {\n          color: var(--primary-color);\n        }\n        .paper-dialog-buttons a {\n          text-decoration: none;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-manage-ais-cloudhook\": DialogManageAisCloudhook;\n  }\n}\n\ncustomElements.define(\"dialog-manage-ais-cloudhook\", DialogManageAisCloudhook);\n"],"names":[],"sourceRoot":""}