"""
    Cakemail API

    The Cakemail API exposes multiple APIs including Authentication, Marketing, Contact, Transactional, Analytic, Content, Account and Partner.  # noqa: E501

    The version of the OpenAPI document: 1.9.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from cakemail_openapi.api_client import ApiClient, Endpoint as _Endpoint
from cakemail_openapi.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from cakemail_openapi.model.contact import Contact
from cakemail_openapi.model.contact_response import ContactResponse
from cakemail_openapi.model.contacts_response import ContactsResponse
from cakemail_openapi.model.create_contact_response import CreateContactResponse
from cakemail_openapi.model.delete_contact_response import DeleteContactResponse
from cakemail_openapi.model.http_bad_request_error import HTTPBadRequestError
from cakemail_openapi.model.http_validation_error import HTTPValidationError
from cakemail_openapi.model.import_contacts import ImportContacts
from cakemail_openapi.model.import_contacts_response import ImportContactsResponse
from cakemail_openapi.model.patch_contact import PatchContact
from cakemail_openapi.model.patch_contact_response import PatchContactResponse
from cakemail_openapi.model.unsubscribe_contact_response import UnsubscribeContactResponse


class ContactApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.create_contact_endpoint = _Endpoint(
            settings={
                'response_type': (CreateContactResponse,),
                'auth': [
                    'OAuth2PasswordBearer'
                ],
                'endpoint_path': '/lists/{list_id}/contacts',
                'operation_id': 'create_contact',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'list_id',
                    'contact',
                    'account_id',
                    'send_double_opt_in',
                ],
                'required': [
                    'list_id',
                    'contact',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'list_id',
                ]
            },
            root_map={
                'validations': {
                    ('list_id',): {

                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'list_id':
                        (int,),
                    'contact':
                        (Contact,),
                    'account_id':
                        (int,),
                    'send_double_opt_in':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                },
                'attribute_map': {
                    'list_id': 'list_id',
                    'account_id': 'account_id',
                    'send_double_opt_in': 'send_double_opt_in',
                },
                'location_map': {
                    'list_id': 'path',
                    'contact': 'body',
                    'account_id': 'query',
                    'send_double_opt_in': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.delete_contact_endpoint = _Endpoint(
            settings={
                'response_type': (DeleteContactResponse,),
                'auth': [
                    'OAuth2PasswordBearer'
                ],
                'endpoint_path': '/lists/{list_id}/contacts/{contact_id}',
                'operation_id': 'delete_contact',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'list_id',
                    'contact_id',
                    'account_id',
                ],
                'required': [
                    'list_id',
                    'contact_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'list_id',
                    'contact_id',
                ]
            },
            root_map={
                'validations': {
                    ('list_id',): {

                        'inclusive_minimum': 1,
                    },
                    ('contact_id',): {

                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'list_id':
                        (int,),
                    'contact_id':
                        (int,),
                    'account_id':
                        (int,),
                },
                'attribute_map': {
                    'list_id': 'list_id',
                    'contact_id': 'contact_id',
                    'account_id': 'account_id',
                },
                'location_map': {
                    'list_id': 'path',
                    'contact_id': 'path',
                    'account_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_contact_endpoint = _Endpoint(
            settings={
                'response_type': (ContactResponse,),
                'auth': [
                    'OAuth2PasswordBearer'
                ],
                'endpoint_path': '/lists/{list_id}/contacts/{contact_id}',
                'operation_id': 'get_contact',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'list_id',
                    'contact_id',
                    'account_id',
                ],
                'required': [
                    'list_id',
                    'contact_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'list_id',
                    'contact_id',
                ]
            },
            root_map={
                'validations': {
                    ('list_id',): {

                        'inclusive_minimum': 1,
                    },
                    ('contact_id',): {

                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'list_id':
                        (int,),
                    'contact_id':
                        (int,),
                    'account_id':
                        (int,),
                },
                'attribute_map': {
                    'list_id': 'list_id',
                    'contact_id': 'contact_id',
                    'account_id': 'account_id',
                },
                'location_map': {
                    'list_id': 'path',
                    'contact_id': 'path',
                    'account_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.import_contacts_endpoint = _Endpoint(
            settings={
                'response_type': (ImportContactsResponse,),
                'auth': [
                    'OAuth2PasswordBearer'
                ],
                'endpoint_path': '/lists/{list_id}/import-contacts',
                'operation_id': 'import_contacts',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'list_id',
                    'import_contacts',
                    'account_id',
                    'send_double_opt_in',
                ],
                'required': [
                    'list_id',
                    'import_contacts',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'list_id',
                ]
            },
            root_map={
                'validations': {
                    ('list_id',): {

                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'list_id':
                        (int,),
                    'import_contacts':
                        (ImportContacts,),
                    'account_id':
                        (int,),
                    'send_double_opt_in':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                },
                'attribute_map': {
                    'list_id': 'list_id',
                    'account_id': 'account_id',
                    'send_double_opt_in': 'send_double_opt_in',
                },
                'location_map': {
                    'list_id': 'path',
                    'import_contacts': 'body',
                    'account_id': 'query',
                    'send_double_opt_in': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.list_contacts_of_list_endpoint = _Endpoint(
            settings={
                'response_type': (ContactsResponse,),
                'auth': [
                    'OAuth2PasswordBearer'
                ],
                'endpoint_path': '/lists/{list_id}/contacts',
                'operation_id': 'list_contacts_of_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'list_id',
                    'account_id',
                    'page',
                    'per_page',
                    'with_count',
                    'query',
                    'fiql',
                    'json',
                    'sort',
                    'filter',
                ],
                'required': [
                    'list_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'list_id',
                    'page',
                    'per_page',
                ]
            },
            root_map={
                'validations': {
                    ('list_id',): {

                        'inclusive_minimum': 1,
                    },
                    ('page',): {

                        'inclusive_minimum': 1,
                    },
                    ('per_page',): {

                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'list_id':
                        (int,),
                    'account_id':
                        (int,),
                    'page':
                        (int,),
                    'per_page':
                        (int,),
                    'with_count':
                        (bool,),
                    'query':
                        (str,),
                    'fiql':
                        (str,),
                    'json':
                        (str,),
                    'sort':
                        (str,),
                    'filter':
                        (str,),
                },
                'attribute_map': {
                    'list_id': 'list_id',
                    'account_id': 'account_id',
                    'page': 'page',
                    'per_page': 'per_page',
                    'with_count': 'with_count',
                    'query': 'query',
                    'fiql': 'fiql',
                    'json': 'json',
                    'sort': 'sort',
                    'filter': 'filter',
                },
                'location_map': {
                    'list_id': 'path',
                    'account_id': 'query',
                    'page': 'query',
                    'per_page': 'query',
                    'with_count': 'query',
                    'query': 'query',
                    'fiql': 'query',
                    'json': 'query',
                    'sort': 'query',
                    'filter': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.list_contacts_of_segment_endpoint = _Endpoint(
            settings={
                'response_type': (ContactsResponse,),
                'auth': [
                    'OAuth2PasswordBearer'
                ],
                'endpoint_path': '/lists/{list_id}/segments/{segment_id}/contacts',
                'operation_id': 'list_contacts_of_segment',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'segment_id',
                    'list_id',
                    'account_id',
                    'page',
                    'per_page',
                    'with_count',
                    'query',
                    'fiql',
                    'json',
                    'sort',
                    'filter',
                ],
                'required': [
                    'segment_id',
                    'list_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'segment_id',
                    'list_id',
                    'page',
                    'per_page',
                ]
            },
            root_map={
                'validations': {
                    ('segment_id',): {

                        'inclusive_minimum': 1,
                    },
                    ('list_id',): {

                        'inclusive_minimum': 1,
                    },
                    ('page',): {

                        'inclusive_minimum': 1,
                    },
                    ('per_page',): {

                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'segment_id':
                        (int,),
                    'list_id':
                        (int,),
                    'account_id':
                        (int,),
                    'page':
                        (int,),
                    'per_page':
                        (int,),
                    'with_count':
                        (bool,),
                    'query':
                        (str,),
                    'fiql':
                        (str,),
                    'json':
                        (str,),
                    'sort':
                        (str,),
                    'filter':
                        (str,),
                },
                'attribute_map': {
                    'segment_id': 'segment_id',
                    'list_id': 'list_id',
                    'account_id': 'account_id',
                    'page': 'page',
                    'per_page': 'per_page',
                    'with_count': 'with_count',
                    'query': 'query',
                    'fiql': 'fiql',
                    'json': 'json',
                    'sort': 'sort',
                    'filter': 'filter',
                },
                'location_map': {
                    'segment_id': 'path',
                    'list_id': 'path',
                    'account_id': 'query',
                    'page': 'query',
                    'per_page': 'query',
                    'with_count': 'query',
                    'query': 'query',
                    'fiql': 'query',
                    'json': 'query',
                    'sort': 'query',
                    'filter': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.patch_contact_endpoint = _Endpoint(
            settings={
                'response_type': (PatchContactResponse,),
                'auth': [
                    'OAuth2PasswordBearer'
                ],
                'endpoint_path': '/lists/{list_id}/contacts/{contact_id}',
                'operation_id': 'patch_contact',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'list_id',
                    'contact_id',
                    'patch_contact',
                    'account_id',
                ],
                'required': [
                    'list_id',
                    'contact_id',
                    'patch_contact',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'list_id',
                    'contact_id',
                ]
            },
            root_map={
                'validations': {
                    ('list_id',): {

                        'inclusive_minimum': 1,
                    },
                    ('contact_id',): {

                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'list_id':
                        (int,),
                    'contact_id':
                        (int,),
                    'patch_contact':
                        (PatchContact,),
                    'account_id':
                        (int,),
                },
                'attribute_map': {
                    'list_id': 'list_id',
                    'contact_id': 'contact_id',
                    'account_id': 'account_id',
                },
                'location_map': {
                    'list_id': 'path',
                    'contact_id': 'path',
                    'patch_contact': 'body',
                    'account_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.unsubscribe_contact_endpoint = _Endpoint(
            settings={
                'response_type': (UnsubscribeContactResponse,),
                'auth': [
                    'OAuth2PasswordBearer'
                ],
                'endpoint_path': '/lists/{list_id}/contacts/{contact_id}/unsubscribe',
                'operation_id': 'unsubscribe_contact',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'list_id',
                    'contact_id',
                    'account_id',
                ],
                'required': [
                    'list_id',
                    'contact_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'list_id',
                    'contact_id',
                ]
            },
            root_map={
                'validations': {
                    ('list_id',): {

                        'inclusive_minimum': 1,
                    },
                    ('contact_id',): {

                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'list_id':
                        (int,),
                    'contact_id':
                        (int,),
                    'account_id':
                        (int,),
                },
                'attribute_map': {
                    'list_id': 'list_id',
                    'contact_id': 'contact_id',
                    'account_id': 'account_id',
                },
                'location_map': {
                    'list_id': 'path',
                    'contact_id': 'path',
                    'account_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def create_contact(
        self,
        list_id,
        contact,
        **kwargs
    ):
        """Add a contact to a list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_contact(list_id, contact, async_req=True)
        >>> result = thread.get()

        Args:
            list_id (int):
            contact (Contact):

        Keyword Args:
            account_id (int): [optional]
            send_double_opt_in (bool, date, datetime, dict, float, int, list, str, none_type): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            CreateContactResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['list_id'] = \
            list_id
        kwargs['contact'] = \
            contact
        return self.create_contact_endpoint.call_with_http_info(**kwargs)

    def delete_contact(
        self,
        list_id,
        contact_id,
        **kwargs
    ):
        """Delete a contact  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_contact(list_id, contact_id, async_req=True)
        >>> result = thread.get()

        Args:
            list_id (int):
            contact_id (int):

        Keyword Args:
            account_id (int): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            DeleteContactResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['list_id'] = \
            list_id
        kwargs['contact_id'] = \
            contact_id
        return self.delete_contact_endpoint.call_with_http_info(**kwargs)

    def get_contact(
        self,
        list_id,
        contact_id,
        **kwargs
    ):
        """Show a contact details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_contact(list_id, contact_id, async_req=True)
        >>> result = thread.get()

        Args:
            list_id (int):
            contact_id (int):

        Keyword Args:
            account_id (int): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ContactResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['list_id'] = \
            list_id
        kwargs['contact_id'] = \
            contact_id
        return self.get_contact_endpoint.call_with_http_info(**kwargs)

    def import_contacts(
        self,
        list_id,
        import_contacts,
        **kwargs
    ):
        """Import contacts  # noqa: E501

        Synchronize your own list with Cakemail by importing to your active, unsubscribed or delete contacts.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.import_contacts(list_id, import_contacts, async_req=True)
        >>> result = thread.get()

        Args:
            list_id (int):
            import_contacts (ImportContacts):

        Keyword Args:
            account_id (int): [optional]
            send_double_opt_in (bool, date, datetime, dict, float, int, list, str, none_type): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ImportContactsResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['list_id'] = \
            list_id
        kwargs['import_contacts'] = \
            import_contacts
        return self.import_contacts_endpoint.call_with_http_info(**kwargs)

    def list_contacts_of_list(
        self,
        list_id,
        **kwargs
    ):
        """Show all contacts in a list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_contacts_of_list(list_id, async_req=True)
        >>> result = thread.get()

        Args:
            list_id (int):

        Keyword Args:
            account_id (int): [optional]
            page (int): [optional] if omitted the server will use the default value of 1
            per_page (int): [optional] if omitted the server will use the default value of 50
            with_count (bool): [optional] if omitted the server will use the default value of False
            query (str): SQL selection query (only use one of query, fiql and json). [optional]
            fiql (str): FIQL selection expression (only use one of query, fiql and json). [optional]
            json (str): JSON selection expression (only use one of query, fiql and json). [optional]
            sort (str): Sort term and direction, using syntax `[-|+]term`.  Valid terms:   - `id`   - `email`   - `status`   - `subscribed_on`   - `last_bounce_type`   - `bounces_count`. [optional]
            filter (str): Valid Terms:   - `status`   - `email`  Valid Operators:   - `==`  Query separator:   - `;`. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ContactsResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['list_id'] = \
            list_id
        return self.list_contacts_of_list_endpoint.call_with_http_info(**kwargs)

    def list_contacts_of_segment(
        self,
        segment_id,
        list_id,
        **kwargs
    ):
        """Show all contacts in a segment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_contacts_of_segment(segment_id, list_id, async_req=True)
        >>> result = thread.get()

        Args:
            segment_id (int):
            list_id (int):

        Keyword Args:
            account_id (int): [optional]
            page (int): [optional] if omitted the server will use the default value of 1
            per_page (int): [optional] if omitted the server will use the default value of 50
            with_count (bool): [optional] if omitted the server will use the default value of False
            query (str): SQL selection query (only use one of query, fiql and json). [optional]
            fiql (str): FIQL selection expression (only use one of query, fiql and json). [optional]
            json (str): JSON selection expression (only use one of query, fiql and json). [optional]
            sort (str): Sort term and direction, using syntax `[-|+]term`.  Valid terms:   - `id`   - `email`   - `status`   - `subscribed_on`   - `last_bounce_type`   - `bounces_count`. [optional]
            filter (str): Valid Terms:   - `status`   - `email`  Valid Operators:   - `==`  Query separator:   - `;`. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ContactsResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['segment_id'] = \
            segment_id
        kwargs['list_id'] = \
            list_id
        return self.list_contacts_of_segment_endpoint.call_with_http_info(**kwargs)

    def patch_contact(
        self,
        list_id,
        contact_id,
        patch_contact,
        **kwargs
    ):
        """Update a contact  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.patch_contact(list_id, contact_id, patch_contact, async_req=True)
        >>> result = thread.get()

        Args:
            list_id (int):
            contact_id (int):
            patch_contact (PatchContact):

        Keyword Args:
            account_id (int): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            PatchContactResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['list_id'] = \
            list_id
        kwargs['contact_id'] = \
            contact_id
        kwargs['patch_contact'] = \
            patch_contact
        return self.patch_contact_endpoint.call_with_http_info(**kwargs)

    def unsubscribe_contact(
        self,
        list_id,
        contact_id,
        **kwargs
    ):
        """Unsubscribe a contact from a list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.unsubscribe_contact(list_id, contact_id, async_req=True)
        >>> result = thread.get()

        Args:
            list_id (int):
            contact_id (int):

        Keyword Args:
            account_id (int): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            UnsubscribeContactResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['list_id'] = \
            list_id
        kwargs['contact_id'] = \
            contact_id
        return self.unsubscribe_contact_endpoint.call_with_http_info(**kwargs)

