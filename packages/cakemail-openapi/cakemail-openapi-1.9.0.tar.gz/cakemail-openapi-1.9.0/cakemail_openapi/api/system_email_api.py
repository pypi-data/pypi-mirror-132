"""
    Cakemail API

    The Cakemail API exposes multiple APIs including Authentication, Marketing, Contact, Transactional, Analytic, Content, Account and Partner.  # noqa: E501

    The version of the OpenAPI document: 1.9.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from cakemail_openapi.api_client import ApiClient, Endpoint as _Endpoint
from cakemail_openapi.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from cakemail_openapi.model.http_bad_request_error import HTTPBadRequestError
from cakemail_openapi.model.http_validation_error import HTTPValidationError
from cakemail_openapi.model.put_system_emails_response import PutSystemEmailsResponse
from cakemail_openapi.model.system_emails_response import SystemEmailsResponse
from cakemail_openapi.model.system_emails_templates import SystemEmailsTemplates


class SystemEmailApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.patch_system_emails_endpoint = _Endpoint(
            settings={
                'response_type': (PutSystemEmailsResponse,),
                'auth': [
                    'OAuth2PasswordBearer'
                ],
                'endpoint_path': '/brands/default/system-emails',
                'operation_id': 'patch_system_emails',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'system_emails_templates',
                    'account_id',
                ],
                'required': [
                    'system_emails_templates',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'system_emails_templates':
                        (SystemEmailsTemplates,),
                    'account_id':
                        (int,),
                },
                'attribute_map': {
                    'account_id': 'account_id',
                },
                'location_map': {
                    'system_emails_templates': 'body',
                    'account_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.set_system_emails_endpoint = _Endpoint(
            settings={
                'response_type': (PutSystemEmailsResponse,),
                'auth': [
                    'OAuth2PasswordBearer'
                ],
                'endpoint_path': '/brands/default/system-emails',
                'operation_id': 'set_system_emails',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'system_emails_templates',
                    'account_id',
                ],
                'required': [
                    'system_emails_templates',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'system_emails_templates':
                        (SystemEmailsTemplates,),
                    'account_id':
                        (int,),
                },
                'attribute_map': {
                    'account_id': 'account_id',
                },
                'location_map': {
                    'system_emails_templates': 'body',
                    'account_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.show_system_emails_endpoint = _Endpoint(
            settings={
                'response_type': (SystemEmailsResponse,),
                'auth': [
                    'OAuth2PasswordBearer'
                ],
                'endpoint_path': '/brands/default/system-emails',
                'operation_id': 'show_system_emails',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'account_id',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_id':
                        (int,),
                },
                'attribute_map': {
                    'account_id': 'account_id',
                },
                'location_map': {
                    'account_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def patch_system_emails(
        self,
        system_emails_templates,
        **kwargs
    ):
        """Update system emails configuration  # noqa: E501

        Partially update system emails configuration  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.patch_system_emails(system_emails_templates, async_req=True)
        >>> result = thread.get()

        Args:
            system_emails_templates (SystemEmailsTemplates):

        Keyword Args:
            account_id (int): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            PutSystemEmailsResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['system_emails_templates'] = \
            system_emails_templates
        return self.patch_system_emails_endpoint.call_with_http_info(**kwargs)

    def set_system_emails(
        self,
        system_emails_templates,
        **kwargs
    ):
        """Set system emails configuration  # noqa: E501

        Set system emails configuration  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.set_system_emails(system_emails_templates, async_req=True)
        >>> result = thread.get()

        Args:
            system_emails_templates (SystemEmailsTemplates):

        Keyword Args:
            account_id (int): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            PutSystemEmailsResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['system_emails_templates'] = \
            system_emails_templates
        return self.set_system_emails_endpoint.call_with_http_info(**kwargs)

    def show_system_emails(
        self,
        **kwargs
    ):
        """Show system emails configuration  # noqa: E501

        Show system emails configuration  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.show_system_emails(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            account_id (int): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            SystemEmailsResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.show_system_emails_endpoint.call_with_http_info(**kwargs)

