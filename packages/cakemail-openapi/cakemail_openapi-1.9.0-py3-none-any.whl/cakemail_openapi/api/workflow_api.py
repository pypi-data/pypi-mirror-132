"""
    Cakemail API

    The Cakemail API exposes multiple APIs including Authentication, Marketing, Contact, Transactional, Analytic, Content, Account and Partner.  # noqa: E501

    The version of the OpenAPI document: 1.9.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from cakemail_openapi.api_client import ApiClient, Endpoint as _Endpoint
from cakemail_openapi.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from cakemail_openapi.model.activate_workflow_response import ActivateWorkflowResponse
from cakemail_openapi.model.create_workflow_response import CreateWorkflowResponse
from cakemail_openapi.model.deactivate_workflow_response import DeactivateWorkflowResponse
from cakemail_openapi.model.delete_workflow_response import DeleteWorkflowResponse
from cakemail_openapi.model.get_workflow_response import GetWorkflowResponse
from cakemail_openapi.model.http_bad_request_error import HTTPBadRequestError
from cakemail_openapi.model.http_validation_error import HTTPValidationError
from cakemail_openapi.model.list_workflows_response import ListWorkflowsResponse
from cakemail_openapi.model.lock_workflow import LockWorkflow
from cakemail_openapi.model.lock_workflow_response import LockWorkflowResponse
from cakemail_openapi.model.patch_workflow import PatchWorkflow
from cakemail_openapi.model.patch_workflow_response import PatchWorkflowResponse
from cakemail_openapi.model.unlock_workflow import UnlockWorkflow
from cakemail_openapi.model.unlock_workflow_response import UnlockWorkflowResponse
from cakemail_openapi.model.workflow import Workflow


class WorkflowApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.activate_workflow_endpoint = _Endpoint(
            settings={
                'response_type': (ActivateWorkflowResponse,),
                'auth': [
                    'OAuth2PasswordBearer'
                ],
                'endpoint_path': '/workflows/{workflow_id}/activate',
                'operation_id': 'activate_workflow',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'workflow_id',
                    'account_id',
                    'lock_key',
                ],
                'required': [
                    'workflow_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'lock_key',
                ]
            },
            root_map={
                'validations': {
                    ('lock_key',): {

                        'regex': {
                            'pattern': r'^[a-zA-Z0-9-_]{8,}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'workflow_id':
                        (str,),
                    'account_id':
                        (int,),
                    'lock_key':
                        (str,),
                },
                'attribute_map': {
                    'workflow_id': 'workflow_id',
                    'account_id': 'account_id',
                    'lock_key': 'lock_key',
                },
                'location_map': {
                    'workflow_id': 'path',
                    'account_id': 'query',
                    'lock_key': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.create_workflow_endpoint = _Endpoint(
            settings={
                'response_type': (CreateWorkflowResponse,),
                'auth': [
                    'OAuth2PasswordBearer'
                ],
                'endpoint_path': '/workflows',
                'operation_id': 'create_workflow',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'workflow',
                    'account_id',
                    'lock_key',
                ],
                'required': [
                    'workflow',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'lock_key',
                ]
            },
            root_map={
                'validations': {
                    ('lock_key',): {

                        'regex': {
                            'pattern': r'^[a-zA-Z0-9-_]{8,}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'workflow':
                        (Workflow,),
                    'account_id':
                        (int,),
                    'lock_key':
                        (str,),
                },
                'attribute_map': {
                    'account_id': 'account_id',
                    'lock_key': 'lock_key',
                },
                'location_map': {
                    'workflow': 'body',
                    'account_id': 'query',
                    'lock_key': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.deactivate_workflow_endpoint = _Endpoint(
            settings={
                'response_type': (DeactivateWorkflowResponse,),
                'auth': [
                    'OAuth2PasswordBearer'
                ],
                'endpoint_path': '/workflows/{workflow_id}/deactivate',
                'operation_id': 'deactivate_workflow',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'workflow_id',
                    'account_id',
                    'lock_key',
                ],
                'required': [
                    'workflow_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'lock_key',
                ]
            },
            root_map={
                'validations': {
                    ('lock_key',): {

                        'regex': {
                            'pattern': r'^[a-zA-Z0-9-_]{8,}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'workflow_id':
                        (str,),
                    'account_id':
                        (int,),
                    'lock_key':
                        (str,),
                },
                'attribute_map': {
                    'workflow_id': 'workflow_id',
                    'account_id': 'account_id',
                    'lock_key': 'lock_key',
                },
                'location_map': {
                    'workflow_id': 'path',
                    'account_id': 'query',
                    'lock_key': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_workflow_endpoint = _Endpoint(
            settings={
                'response_type': (DeleteWorkflowResponse,),
                'auth': [
                    'OAuth2PasswordBearer'
                ],
                'endpoint_path': '/workflows/{workflow_id}',
                'operation_id': 'delete_workflow',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'workflow_id',
                    'account_id',
                    'lock_key',
                ],
                'required': [
                    'workflow_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'lock_key',
                ]
            },
            root_map={
                'validations': {
                    ('lock_key',): {

                        'regex': {
                            'pattern': r'^[a-zA-Z0-9-_]{8,}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'workflow_id':
                        (str,),
                    'account_id':
                        (int,),
                    'lock_key':
                        (str,),
                },
                'attribute_map': {
                    'workflow_id': 'workflow_id',
                    'account_id': 'account_id',
                    'lock_key': 'lock_key',
                },
                'location_map': {
                    'workflow_id': 'path',
                    'account_id': 'query',
                    'lock_key': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_workflow_endpoint = _Endpoint(
            settings={
                'response_type': (GetWorkflowResponse,),
                'auth': [
                    'OAuth2PasswordBearer'
                ],
                'endpoint_path': '/workflows/{workflow_id}',
                'operation_id': 'get_workflow',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'workflow_id',
                    'account_id',
                    'lock_key',
                ],
                'required': [
                    'workflow_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'lock_key',
                ]
            },
            root_map={
                'validations': {
                    ('lock_key',): {

                        'regex': {
                            'pattern': r'^[a-zA-Z0-9-_]{8,}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'workflow_id':
                        (str,),
                    'account_id':
                        (int,),
                    'lock_key':
                        (str,),
                },
                'attribute_map': {
                    'workflow_id': 'workflow_id',
                    'account_id': 'account_id',
                    'lock_key': 'lock_key',
                },
                'location_map': {
                    'workflow_id': 'path',
                    'account_id': 'query',
                    'lock_key': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.list_workflows_endpoint = _Endpoint(
            settings={
                'response_type': (ListWorkflowsResponse,),
                'auth': [
                    'OAuth2PasswordBearer'
                ],
                'endpoint_path': '/workflows',
                'operation_id': 'list_workflows',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'page',
                    'per_page',
                    'account_id',
                    'with_count',
                    'sort',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'page',
                    'per_page',
                ]
            },
            root_map={
                'validations': {
                    ('page',): {

                        'inclusive_minimum': 1,
                    },
                    ('per_page',): {

                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'page':
                        (int,),
                    'per_page':
                        (int,),
                    'account_id':
                        (int,),
                    'with_count':
                        (bool,),
                    'sort':
                        (str,),
                },
                'attribute_map': {
                    'page': 'page',
                    'per_page': 'per_page',
                    'account_id': 'account_id',
                    'with_count': 'with_count',
                    'sort': 'sort',
                },
                'location_map': {
                    'page': 'query',
                    'per_page': 'query',
                    'account_id': 'query',
                    'with_count': 'query',
                    'sort': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.lock_workflow_endpoint = _Endpoint(
            settings={
                'response_type': (LockWorkflowResponse,),
                'auth': [
                    'OAuth2PasswordBearer'
                ],
                'endpoint_path': '/workflows/{workflow_id}/lock',
                'operation_id': 'lock_workflow',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'workflow_id',
                    'lock_workflow',
                    'account_id',
                ],
                'required': [
                    'workflow_id',
                    'lock_workflow',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'workflow_id':
                        (str,),
                    'lock_workflow':
                        (LockWorkflow,),
                    'account_id':
                        (int,),
                },
                'attribute_map': {
                    'workflow_id': 'workflow_id',
                    'account_id': 'account_id',
                },
                'location_map': {
                    'workflow_id': 'path',
                    'lock_workflow': 'body',
                    'account_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.patch_workflow_endpoint = _Endpoint(
            settings={
                'response_type': (PatchWorkflowResponse,),
                'auth': [
                    'OAuth2PasswordBearer'
                ],
                'endpoint_path': '/workflows/{workflow_id}',
                'operation_id': 'patch_workflow',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'workflow_id',
                    'patch_workflow',
                    'account_id',
                    'lock_key',
                ],
                'required': [
                    'workflow_id',
                    'patch_workflow',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'lock_key',
                ]
            },
            root_map={
                'validations': {
                    ('lock_key',): {

                        'regex': {
                            'pattern': r'^[a-zA-Z0-9-_]{8,}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'workflow_id':
                        (str,),
                    'patch_workflow':
                        (PatchWorkflow,),
                    'account_id':
                        (int,),
                    'lock_key':
                        (str,),
                },
                'attribute_map': {
                    'workflow_id': 'workflow_id',
                    'account_id': 'account_id',
                    'lock_key': 'lock_key',
                },
                'location_map': {
                    'workflow_id': 'path',
                    'patch_workflow': 'body',
                    'account_id': 'query',
                    'lock_key': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.unlock_workflow_endpoint = _Endpoint(
            settings={
                'response_type': (UnlockWorkflowResponse,),
                'auth': [
                    'OAuth2PasswordBearer'
                ],
                'endpoint_path': '/workflows/{workflow_id}/unlock',
                'operation_id': 'unlock_workflow',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'workflow_id',
                    'unlock_workflow',
                    'account_id',
                ],
                'required': [
                    'workflow_id',
                    'unlock_workflow',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'workflow_id':
                        (str,),
                    'unlock_workflow':
                        (UnlockWorkflow,),
                    'account_id':
                        (int,),
                },
                'attribute_map': {
                    'workflow_id': 'workflow_id',
                    'account_id': 'account_id',
                },
                'location_map': {
                    'workflow_id': 'path',
                    'unlock_workflow': 'body',
                    'account_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def activate_workflow(
        self,
        workflow_id,
        **kwargs
    ):
        """Activate a workflow  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.activate_workflow(workflow_id, async_req=True)
        >>> result = thread.get()

        Args:
            workflow_id (str):

        Keyword Args:
            account_id (int): [optional]
            lock_key (str): Locking key, preventing other users from modifying this workflow for a short period.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ActivateWorkflowResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['workflow_id'] = \
            workflow_id
        return self.activate_workflow_endpoint.call_with_http_info(**kwargs)

    def create_workflow(
        self,
        workflow,
        **kwargs
    ):
        """Create a workflow  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_workflow(workflow, async_req=True)
        >>> result = thread.get()

        Args:
            workflow (Workflow):

        Keyword Args:
            account_id (int): [optional]
            lock_key (str): Locking key, preventing other users from modifying this workflow for a short period.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            CreateWorkflowResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['workflow'] = \
            workflow
        return self.create_workflow_endpoint.call_with_http_info(**kwargs)

    def deactivate_workflow(
        self,
        workflow_id,
        **kwargs
    ):
        """Deactivate a workflow  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.deactivate_workflow(workflow_id, async_req=True)
        >>> result = thread.get()

        Args:
            workflow_id (str):

        Keyword Args:
            account_id (int): [optional]
            lock_key (str): Locking key, preventing other users from modifying this workflow for a short period.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            DeactivateWorkflowResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['workflow_id'] = \
            workflow_id
        return self.deactivate_workflow_endpoint.call_with_http_info(**kwargs)

    def delete_workflow(
        self,
        workflow_id,
        **kwargs
    ):
        """Delete a workflow  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_workflow(workflow_id, async_req=True)
        >>> result = thread.get()

        Args:
            workflow_id (str):

        Keyword Args:
            account_id (int): [optional]
            lock_key (str): Locking key, preventing other users from modifying this workflow for a short period.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            DeleteWorkflowResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['workflow_id'] = \
            workflow_id
        return self.delete_workflow_endpoint.call_with_http_info(**kwargs)

    def get_workflow(
        self,
        workflow_id,
        **kwargs
    ):
        """Show a workflow  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflow(workflow_id, async_req=True)
        >>> result = thread.get()

        Args:
            workflow_id (str):

        Keyword Args:
            account_id (int): [optional]
            lock_key (str): Locking key, preventing other users from modifying this workflow for a short period.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            GetWorkflowResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['workflow_id'] = \
            workflow_id
        return self.get_workflow_endpoint.call_with_http_info(**kwargs)

    def list_workflows(
        self,
        **kwargs
    ):
        """Show all workflows  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_workflows(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            page (int): [optional] if omitted the server will use the default value of 1
            per_page (int): [optional] if omitted the server will use the default value of 50
            account_id (int): [optional]
            with_count (bool): [optional] if omitted the server will use the default value of False
            sort (str): Sort term and direction, using syntax `[-|+]term`.  Valid terms:   - `name`   - `description`   - `goal`   - `status`   - `created_on`   - `updated_on`   - `activated_on`. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ListWorkflowsResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.list_workflows_endpoint.call_with_http_info(**kwargs)

    def lock_workflow(
        self,
        workflow_id,
        lock_workflow,
        **kwargs
    ):
        """Lock a workflow  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.lock_workflow(workflow_id, lock_workflow, async_req=True)
        >>> result = thread.get()

        Args:
            workflow_id (str):
            lock_workflow (LockWorkflow):

        Keyword Args:
            account_id (int): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            LockWorkflowResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['workflow_id'] = \
            workflow_id
        kwargs['lock_workflow'] = \
            lock_workflow
        return self.lock_workflow_endpoint.call_with_http_info(**kwargs)

    def patch_workflow(
        self,
        workflow_id,
        patch_workflow,
        **kwargs
    ):
        """Update a workflow  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.patch_workflow(workflow_id, patch_workflow, async_req=True)
        >>> result = thread.get()

        Args:
            workflow_id (str):
            patch_workflow (PatchWorkflow):

        Keyword Args:
            account_id (int): [optional]
            lock_key (str): Locking key, preventing other users from modifying this workflow for a short period.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            PatchWorkflowResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['workflow_id'] = \
            workflow_id
        kwargs['patch_workflow'] = \
            patch_workflow
        return self.patch_workflow_endpoint.call_with_http_info(**kwargs)

    def unlock_workflow(
        self,
        workflow_id,
        unlock_workflow,
        **kwargs
    ):
        """Unlock a workflow  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.unlock_workflow(workflow_id, unlock_workflow, async_req=True)
        >>> result = thread.get()

        Args:
            workflow_id (str):
            unlock_workflow (UnlockWorkflow):

        Keyword Args:
            account_id (int): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            UnlockWorkflowResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['workflow_id'] = \
            workflow_id
        kwargs['unlock_workflow'] = \
            unlock_workflow
        return self.unlock_workflow_endpoint.call_with_http_info(**kwargs)

