# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['cmdline']

package_data = \
{'': ['*']}

setup_kwargs = {
    'name': 'cmdline-mini',
    'version': '1.0.2',
    'description': 'Partial command line handler',
    'long_description': '# cmdline\n- a tiny unsophisticated partial  command line parser\n\n## Objective\nThis package was written to allow parsing of parts of a command line, just pre-commandline arguments to a command.\n\nIt is originally written as a front-end command pre-processor for arguments passed to Django\'s `manage.py`, not \nswallowing the entire command line but allowing some options to be parsed and actioned before the main show, \nwithout interfering with the specific command being executed.\n\nThis allows, for example, setting internal or environment variables, modifying or setting the \nDJANGO_SETTINGS_MODULE variable or any other use that can be imagined.\n\nParsing rules are a simplified version of what are accepted as POSIX rules for command line processing.\n- Both short \'-x\' and long \'--xoption\' are supported\n- Short options can be concatenated, but to avoid ambiguity any option that requires an argument are consumed\n  consecutively from subsequent arguments and cannot be appended to the short opt itself\n- The form --longopt=argument is supported\n- Optional arguments are not supported \n- Evaluation order is significant and is exactly as specified on the command line.\n- You can\'t mix arguments with command arguments, the parser quits when a command is encountered and\n  preserves all arguments following that command\n\nThe Option class used in option specifications are NamedTuples which is very compact. \n\nExample (based on Django manage.py generated by cookiecutter-django):\n ```python3\n#!/usr/bin/env python3\n"""\nUsage: manage.py [-e <env>] [-d] [-o] [-h] <other manage.py args>\n  -e --env <environment>   set runtime environment local, production\n  -d --docker              set internal configuration for docker\n  -o --dotenv              enhanced configuration via .env\n  -h --help                display this help\n"""\nimport os\nimport sys\nfrom cmdline import Option, system_args\n\n\nif __name__ == "__main__":\n    opts = [\n        Option(\'e\', \'env\', has_arg=True),   # -e or --env switch\n        Option(\'d\', \'docker\'),              # -d or --docker\n        Option(\'o\', \'dotenv\'),              # -o or --dotenv\n        Option(\'h\', \'help\'),                # -h or --help\n    ]\n    environ = \'local\'   # default\n    docker = False\n    read_dotenv = \'0\'\n    settings = dict(prog=sys.argv[0])\n\n    def process_args(option: Option, key, arg):\n        if not option:  # use 2nd arg to do something based on command invoked\n            settings[\'prog\'] = key\n        elif option.short == \'e\':\n            settings[\'environ\'] = arg\n        elif option.short == \'d\':\n            settings[\'docker\'] = True\n        elif option.short == \'o\':\n            settings[\'read_dotenv\'] = \'1\'\n        elif option.short == \'h\':\n            print(__doc__)\n            exit(0)\n\n    def export(var, val):\n        os.environ[var] = val\n\n    system_args(opts, process_args)\n    vars().update(settings)   \n\n    default_settings = f\'config.settings.{environ}\'\n    export(\'USE_DOCKER\', \'yes\' if docker else \'no\')\n    export(\'DOCKER_READ_DOT_ENV_FILE\', read_dotenv)\n            \n    os.environ.setdefault("DJANGO_SETTINGS_MODULE", default_settings)\n\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError:\n        # The above import may fail for some other reason. Ensure that the\n        # issue is really that Django is missing to avoid masking other\n        # exceptions on Python 2.\n        try:\n            import django  # noqa\n        except ImportError:\n            raise ImportError(\n                "Couldn\'t import Django. Are you sure it\'s installed and "\n                "available on your PYTHONPATH environment variable? Did you "\n                "forget to activate a virtual environment?"\n            )\n\n        raise\n\n    execute_from_command_line(sys.argv)\n```\n',
    'author': 'David Nugent',
    'author_email': 'david.nugent@news.com.au',
    'maintainer': None,
    'maintainer_email': None,
    'url': None,
    'packages': packages,
    'package_data': package_data,
    'python_requires': '>=3.9,<4.0',
}


setup(**setup_kwargs)
